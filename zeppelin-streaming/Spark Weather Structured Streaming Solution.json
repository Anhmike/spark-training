{"paragraphs":[{"text":"%md\n# Pretty Printing\n\nAs usual we first define a helper method for pretty print Spark DataFrames\n","dateUpdated":"2017-01-09T02:23:59-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957418876_-1602880048","id":"20170109-022338_184387115","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Pretty Printing</h1>\n<p>As usual we first define a helper method for pretty print Spark DataFrames</p>\n"},"dateCreated":"2017-01-09T02:23:38-0800","dateStarted":"2017-01-09T02:23:56-0800","dateFinished":"2017-01-09T02:23:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:196"},{"text":"implicit class ZeppelinOutput[T](ds:org.apache.spark.sql.Dataset[T]) {\n    def toZeppelin(limit:Int = -1)  = {\n        val df = ds.toDF\n        println(\"%table\")\n        println(df.schema.map(_.name).mkString(\"\\t\"))\n        val data = if (limit <= 0) df else df.limit(limit)\n        data.collect.foreach(row => println(row.mkString(\"\\t\")))\n    }\n}","dateUpdated":"2017-01-09T04:25:57-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957436877_-285453842","id":"20170109-022356_2016873496","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined class ZeppelinOutput\n"},"dateCreated":"2017-01-09T02:23:56-0800","dateStarted":"2017-01-09T04:25:57-0800","dateFinished":"2017-01-09T04:26:14-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:197","focus":true},{"text":"%md\n# Load Station Data\n\nNow we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple.\n","dateUpdated":"2017-01-09T02:24:23-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957448779_-2006820421","id":"20170109-022408_398981917","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Load Station Data</h1>\n<p>Now we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple.</p>\n"},"dateCreated":"2017-01-09T02:24:08-0800","dateStarted":"2017-01-09T02:24:20-0800","dateFinished":"2017-01-09T02:24:20-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:198"},{"text":"import org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructField\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.types.FloatType\nimport org.apache.spark.sql.types.DateType\n\ndef extractFloat = udf((v:String) => if (v != null) v.toFloat else None, FloatType)\n\nval isdSchema = StructType(\n        StructField(\"usaf\", StringType) ::\n        StructField(\"wban\", StringType) ::\n        StructField(\"name\", StringType) ::\n        StructField(\"country\", StringType) ::\n        StructField(\"state\", StringType) ::\n        StructField(\"icao\", StringType) ::\n        StructField(\"latitude\", StringType) ::\n        StructField(\"longitude\", StringType) ::\n        StructField(\"elevation\", StringType) ::\n        StructField(\"date_begin\", DateType) ::\n        StructField(\"date_end\", DateType) ::\n        Nil\n    )\nval isd = sqlContext.read\n    .option(\"header\",\"true\")\n    .option(\"dateFormat\",\"yyyyMMdd\")\n    .schema(isdSchema)\n    .csv(\"/user/training/data/weather/isd-history\")\n    .withColumn(\"latitude\", extractFloat($\"latitude\"))\n    .withColumn(\"longitude\", extractFloat($\"longitude\"))\n    .withColumn(\"elevation\", extractFloat($\"elevation\"))\n    \n\nisd.toZeppelin(10)","dateUpdated":"2017-01-09T04:27:37-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957460067_-478967214","id":"20170109-022420_197453754","result":{"code":"SUCCESS","type":"TABLE","msg":"usaf\twban\tname\tcountry\tstate\ticao\tlatitude\tlongitude\televation\tdate_begin\tdate_end\n007005\t99999\tCWOS 07005\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007011\t99999\tCWOS 07011\tnull\tnull\tnull\tnull\tnull\tnull\t2011-10-25\t2012-11-29\n007018\t99999\tWXPOD 7018\tnull\tnull\tnull\t0.0\t0.0\t7018.0\t2011-03-09\t2013-07-30\n007025\t99999\tCWOS 07025\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007026\t99999\tWXPOD 7026\tAF\tnull\tnull\t0.0\t0.0\t7026.0\t2012-07-13\t2014-11-20\n007034\t99999\tCWOS 07034\tnull\tnull\tnull\tnull\tnull\tnull\t2012-10-24\t2012-11-06\n007037\t99999\tCWOS 07037\tnull\tnull\tnull\tnull\tnull\tnull\t2011-12-02\t2012-11-25\n007044\t99999\tCWOS 07044\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007047\t99999\tCWOS 07047\tnull\tnull\tnull\tnull\tnull\tnull\t2012-06-13\t2012-07-17\n007052\t99999\tCWOS 07052\tnull\tnull\tnull\tnull\tnull\tnull\t2012-11-29\t2012-11-30\n","comment":"","msgTable":[[{"key":"wban","value":"007005"},{"key":"wban","value":"99999"},{"key":"wban","value":"CWOS 07005"},{"key":"wban","value":"null"},{"key":"wban","value":"null"},{"key":"wban","value":"null"},{"key":"wban","value":"null"},{"key":"wban","value":"null"},{"key":"wban","value":"null"},{"key":"wban","value":"2012-01-27"},{"key":"wban","value":"2012-01-27"}],[{"key":"name","value":"007011"},{"key":"name","value":"99999"},{"key":"name","value":"CWOS 07011"},{"key":"name","value":"null"},{"key":"name","value":"null"},{"key":"name","value":"null"},{"key":"name","value":"null"},{"key":"name","value":"null"},{"key":"name","value":"null"},{"key":"name","value":"2011-10-25"},{"key":"name","value":"2012-11-29"}],[{"key":"country","value":"007018"},{"key":"country","value":"99999"},{"key":"country","value":"WXPOD 7018"},{"key":"country","value":"null"},{"key":"country","value":"null"},{"key":"country","value":"null"},{"key":"country","value":"0.0"},{"key":"country","value":"0.0"},{"key":"country","value":"7018.0"},{"key":"country","value":"2011-03-09"},{"key":"country","value":"2013-07-30"}],[{"key":"state","value":"007025"},{"key":"state","value":"99999"},{"key":"state","value":"CWOS 07025"},{"key":"state","value":"null"},{"key":"state","value":"null"},{"key":"state","value":"null"},{"key":"state","value":"null"},{"key":"state","value":"null"},{"key":"state","value":"null"},{"key":"state","value":"2012-01-27"},{"key":"state","value":"2012-01-27"}],[{"key":"icao","value":"007026"},{"key":"icao","value":"99999"},{"key":"icao","value":"WXPOD 7026"},{"key":"icao","value":"AF"},{"key":"icao","value":"null"},{"key":"icao","value":"null"},{"key":"icao","value":"0.0"},{"key":"icao","value":"0.0"},{"key":"icao","value":"7026.0"},{"key":"icao","value":"2012-07-13"},{"key":"icao","value":"2014-11-20"}],[{"key":"latitude","value":"007034"},{"key":"latitude","value":"99999"},{"key":"latitude","value":"CWOS 07034"},{"key":"latitude","value":"null"},{"key":"latitude","value":"null"},{"key":"latitude","value":"null"},{"key":"latitude","value":"null"},{"key":"latitude","value":"null"},{"key":"latitude","value":"null"},{"key":"latitude","value":"2012-10-24"},{"key":"latitude","value":"2012-11-06"}],[{"key":"longitude","value":"007037"},{"key":"longitude","value":"99999"},{"key":"longitude","value":"CWOS 07037"},{"key":"longitude","value":"null"},{"key":"longitude","value":"null"},{"key":"longitude","value":"null"},{"key":"longitude","value":"null"},{"key":"longitude","value":"null"},{"key":"longitude","value":"null"},{"key":"longitude","value":"2011-12-02"},{"key":"longitude","value":"2012-11-25"}],[{"key":"elevation","value":"007044"},{"key":"elevation","value":"99999"},{"key":"elevation","value":"CWOS 07044"},{"key":"elevation","value":"null"},{"key":"elevation","value":"null"},{"key":"elevation","value":"null"},{"key":"elevation","value":"null"},{"key":"elevation","value":"null"},{"key":"elevation","value":"null"},{"key":"elevation","value":"2012-01-27"},{"key":"elevation","value":"2012-01-27"}],[{"key":"date_begin","value":"007047"},{"key":"date_begin","value":"99999"},{"key":"date_begin","value":"CWOS 07047"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"null"},{"key":"date_begin","value":"2012-06-13"},{"key":"date_begin","value":"2012-07-17"}],[{"key":"date_end","value":"007052"},{"key":"date_end","value":"99999"},{"key":"date_end","value":"CWOS 07052"},{"key":"date_end","value":"null"},{"key":"date_end","value":"null"},{"key":"date_end","value":"null"},{"key":"date_end","value":"null"},{"key":"date_end","value":"null"},{"key":"date_end","value":"null"},{"key":"date_end","value":"2012-11-29"},{"key":"date_end","value":"2012-11-30"}]],"columnNames":[{"name":"usaf","index":0,"aggr":"sum"},{"name":"wban","index":1,"aggr":"sum"},{"name":"name","index":2,"aggr":"sum"},{"name":"country","index":3,"aggr":"sum"},{"name":"state","index":4,"aggr":"sum"},{"name":"icao","index":5,"aggr":"sum"},{"name":"latitude","index":6,"aggr":"sum"},{"name":"longitude","index":7,"aggr":"sum"},{"name":"elevation","index":8,"aggr":"sum"},{"name":"date_begin","index":9,"aggr":"sum"},{"name":"date_end","index":10,"aggr":"sum"}],"rows":[["007005","99999","CWOS 07005","null","null","null","null","null","null","2012-01-27","2012-01-27"],["007011","99999","CWOS 07011","null","null","null","null","null","null","2011-10-25","2012-11-29"],["007018","99999","WXPOD 7018","null","null","null","0.0","0.0","7018.0","2011-03-09","2013-07-30"],["007025","99999","CWOS 07025","null","null","null","null","null","null","2012-01-27","2012-01-27"],["007026","99999","WXPOD 7026","AF","null","null","0.0","0.0","7026.0","2012-07-13","2014-11-20"],["007034","99999","CWOS 07034","null","null","null","null","null","null","2012-10-24","2012-11-06"],["007037","99999","CWOS 07037","null","null","null","null","null","null","2011-12-02","2012-11-25"],["007044","99999","CWOS 07044","null","null","null","null","null","null","2012-01-27","2012-01-27"],["007047","99999","CWOS 07047","null","null","null","null","null","null","2012-06-13","2012-07-17"],["007052","99999","CWOS 07052","null","null","null","null","null","null","2012-11-29","2012-11-30"]]},"dateCreated":"2017-01-09T02:24:20-0800","dateStarted":"2017-01-09T04:27:38-0800","dateFinished":"2017-01-09T04:27:45-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:199","focus":true},{"text":"isd.printSchema()","dateUpdated":"2017-01-09T04:27:40-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957489242_1226502067","id":"20170109-022449_34670710","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- usaf: string (nullable = true)\n |-- wban: string (nullable = true)\n |-- name: string (nullable = true)\n |-- country: string (nullable = true)\n |-- state: string (nullable = true)\n |-- icao: string (nullable = true)\n |-- latitude: float (nullable = true)\n |-- longitude: float (nullable = true)\n |-- elevation: float (nullable = true)\n |-- date_begin: date (nullable = true)\n |-- date_end: date (nullable = true)\n\n"},"dateCreated":"2017-01-09T02:24:49-0800","dateStarted":"2017-01-09T04:27:40-0800","dateFinished":"2017-01-09T04:27:46-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:200","focus":true},{"text":"%md\n# Spark Structured Streaming","dateUpdated":"2017-01-09T02:25:32-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957507401_293886057","id":"20170109-022507_1035657177","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Spark Structured Streaming</h1>\n"},"dateCreated":"2017-01-09T02:25:07-0800","dateStarted":"2017-01-09T02:25:32-0800","dateFinished":"2017-01-09T02:25:32-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:201"},{"text":"%md\n# 1. Connect to data source\n\nFirst you need to run the netcat program, for example via\n\n    spark-training/utils/pynetcat.py -I1 -B10 -P9977 < weather_sample.txt\n\nThen we connect to a simple socket as the datasource. The socket will stream weather data samples in raw format, i.e. one record per line.","dateUpdated":"2017-01-09T04:27:30-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957532207_-855713008","id":"20170109-022532_52613486","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>1. Connect to data source</h1>\n<p>First you need to run the netcat program, for example via</p>\n<pre><code>spark-training/utils/pynetcat.py -I1 -B10 -P9977 &lt; weather_sample.txt\n</code></pre>\n<p>Then we connect to a simple socket as the datasource. The socket will stream weather data samples in raw format, i.e. one record per line.</p>\n"},"dateCreated":"2017-01-09T02:25:32-0800","dateStarted":"2017-01-09T04:27:28-0800","dateFinished":"2017-01-09T04:27:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:202","focus":true},{"text":"val lines = spark.readStream\n  .format(\"socket\")\n  .option(\"host\", \"localhost\")\n  .option(\"port\", 9977)\n  .load()","dateUpdated":"2017-01-09T04:27:44-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957559080_-1943551391","id":"20170109-022559_819187627","result":{"code":"SUCCESS","type":"TEXT","msg":"\nlines: org.apache.spark.sql.DataFrame = [value: string]\n"},"dateCreated":"2017-01-09T02:25:59-0800","dateStarted":"2017-01-09T04:27:46-0800","dateFinished":"2017-01-09T04:27:46-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:203","focus":true},{"text":"%md\n## 2. Extract Weather Data\n\nWe need to extract the weather data from the raw string. This can be done using SparkSQL methods.","dateUpdated":"2017-01-09T02:40:39-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958385283_-2093623719","id":"20170109-023945_1454623182","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>2. Extract Weather Data</h2>\n<p>We need to extract the weather data from the raw string. This can be done using SparkSQL methods.</p>\n"},"dateCreated":"2017-01-09T02:39:45-0800","dateStarted":"2017-01-09T02:40:39-0800","dateFinished":"2017-01-09T02:40:39-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:204"},{"text":"import org.apache.spark.sql.types.IntegerType\nimport org.apache.spark.sql.types.FloatType\n\nval weather = lines\n    .withColumn(\"date\", lines(\"value\").substr(16,8))\n    .withColumn(\"time\", lines(\"value\").substr(24,4))\n    .withColumn(\"usaf\", lines(\"value\").substr(5,6))\n    .withColumn(\"wban\", lines(\"value\").substr(11,5))\n    .withColumn(\"air_temperature_quality\", lines(\"value\").substr(93,1).cast(IntegerType))\n    .withColumn(\"air_temperature\", lines(\"value\").substr(88,5).cast(FloatType)/10.0)\n    .withColumn(\"wind_speed_quality\", lines(\"value\").substr(70,1).cast(IntegerType))\n    .withColumn(\"wind_speed\", lines(\"value\").substr(66,4).cast(FloatType)/10.0)\n","dateUpdated":"2017-01-09T04:27:47-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957584776_720511290","id":"20170109-022624_1297431457","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.types.IntegerType\n\nimport org.apache.spark.sql.types.FloatType\n\nweather: org.apache.spark.sql.DataFrame = [value: string, date: string ... 7 more fields]\n"},"dateCreated":"2017-01-09T02:26:24-0800","dateStarted":"2017-01-09T04:27:47-0800","dateFinished":"2017-01-09T04:27:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:205","focus":true},{"text":"%md\n## 3. Peek inside Stream\n\nOne nice thing about structured streaming is that it is super easy to peek inside a stream.","dateUpdated":"2017-01-09T02:48:09-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958425880_-1966631391","id":"20170109-024025_443642059","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>3. Peek inside Stream</h2>\n<p>One nice thing about structured streaming is that it is super easy to peek inside a stream.</p>\n"},"dateCreated":"2017-01-09T02:40:25-0800","dateStarted":"2017-01-09T02:48:07-0800","dateFinished":"2017-01-09T02:48:07-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"val query = weather.writeStream\n    .outputMode(\"append\")\n    .format(\"console\")\n    .start()","dateUpdated":"2017-01-09T03:17:55-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483957999200_-143668677","id":"20170109-023319_1896648636","result":{"code":"SUCCESS","type":"TEXT","msg":"\nquery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query - query-0 [state = ACTIVE]\n"},"dateCreated":"2017-01-09T02:33:19-0800","dateStarted":"2017-01-09T03:17:55-0800","dateFinished":"2017-01-09T03:17:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"query.stop()","dateUpdated":"2017-01-09T03:18:01-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958087552_2127458108","id":"20170109-023447_927715135","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-09T02:34:47-0800","dateStarted":"2017-01-09T03:18:01-0800","dateFinished":"2017-01-09T03:18:02-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"text":"%md\n## 4. Perform Calculation\n\nAgain we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:\n\n* Minimum air temperature\n* Maximum air temperature\n* Minimum wind speed\n* Maximum wind speed\n\nAgain we need to evaulate the \"quality\" fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.","dateUpdated":"2017-01-09T04:34:47-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958098753_871252949","id":"20170109-023458_107574560","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>4. Perform Calculation</h2>\n<p>Again we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:</p>\n<ul>\n<li>Minimum air temperature</li>\n<li>Maximum air temperature</li>\n<li>Minimum wind speed</li>\n<li>Maximum wind speed</li>\n</ul>\n<p>Again we need to evaulate the &ldquo;quality&rdquo; fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.</p>\n"},"dateCreated":"2017-01-09T02:34:58-0800","dateStarted":"2017-01-09T04:34:40-0800","dateFinished":"2017-01-09T04:34:40-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:209","focus":true},{"text":"val aggregated_weather = weather\n    .join(isd, weather(\"usaf\") === isd(\"usaf\") && weather(\"wban\") === isd(\"wban\"))\n    // 3. Extract year from date column (first four letters), store it in 'year'\n    .withColumn(\"year\", weather(\"date\").substr(0,4))\n    // 4. Group by country (from isd) and year (from above)\n    .groupBy(isd(\"country\"), $\"year\")\n    // 5. Perform aggregations of min/max of temperature and wind speed\n    .agg(\n        min(when(col(\"air_temperature_quality\") === lit(1), col(\"air_temperature\")).otherwise(9999)).as(\"temp_min\"),\n        max(when(col(\"air_temperature_quality\") === lit(1), col(\"air_temperature\")).otherwise(-9999)).as(\"temp_max\"),\n        min(when(col(\"wind_speed_quality\") === lit(1), col(\"wind_speed\")).otherwise(9999)).as(\"wind_min\"),\n        max(when(col(\"wind_speed_quality\") === lit(1), col(\"wind_speed\")).otherwise(-9999)).as(\"wind_max\")\n    )","dateUpdated":"2017-01-09T04:27:52-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958467728_-2096029615","id":"20170109-024107_164598352","result":{"code":"SUCCESS","type":"TEXT","msg":"\naggregated_weather: org.apache.spark.sql.DataFrame = [country: string, year: string ... 4 more fields]\n"},"dateCreated":"2017-01-09T02:41:07-0800","dateStarted":"2017-01-09T04:27:52-0800","dateFinished":"2017-01-09T04:27:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:210","focus":true},{"text":"val consoleQuery = aggregated_weather.writeStream\n    .outputMode(\"complete\")\n    .format(\"console\")\n    .start()","dateUpdated":"2017-01-09T04:32:46-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958511263_-2097491990","id":"20170109-024151_139400986","result":{"code":"SUCCESS","type":"TEXT","msg":"\nquery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query - query-0 [state = ACTIVE]\n"},"dateCreated":"2017-01-09T02:41:51-0800","dateStarted":"2017-01-09T04:27:55-0800","dateFinished":"2017-01-09T04:27:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:211","focus":true},{"text":"consoleQuery.stop()","dateUpdated":"2017-01-09T04:32:46-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958685136_-1689244403","id":"20170109-024445_883855935","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-01-09T02:44:45-0800","dateStarted":"2017-01-09T04:28:26-0800","dateFinished":"2017-01-09T04:28:27-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:212","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483965201133_-1478748186","id":"20170109-043321_2106212152","dateCreated":"2017-01-09T04:33:21-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1851","text":"%md\n## 5. Create live Table\n\nWe can also use a \"memory\" output, which is a queryable live table","dateUpdated":"2017-01-09T04:35:25-0800","dateFinished":"2017-01-09T04:35:22-0800","dateStarted":"2017-01-09T04:35:22-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>5. Create live Table</h2>\n<p>We can also use a &ldquo;memory&rdquo; output, which is a queryable live table</p>\n"}},{"text":"val tableQuery = aggregated_weather.writeStream\n    .outputMode(\"complete\")\n    .format(\"memory\")\n    .queryName(\"aggregated_weather\")\n    .start()","dateUpdated":"2017-01-09T04:38:33-0800","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483958736093_449082715","id":"20170109-024536_1643682762","dateCreated":"2017-01-09T02:45:36-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:213","dateFinished":"2017-01-09T04:38:34-0800","dateStarted":"2017-01-09T04:38:33-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntableQuery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query - aggregated_weather [state = ACTIVE]\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"country","index":0,"aggr":"sum"}],"values":[{"name":"year","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"country","index":0,"aggr":"sum"},"yAxis":{"name":"year","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483965146646_1787724003","id":"20170109-043226_2033527472","dateCreated":"2017-01-09T04:32:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1584","dateUpdated":"2017-01-09T04:38:41-0800","dateFinished":"2017-01-09T04:38:42-0800","dateStarted":"2017-01-09T04:38:41-0800","result":{"code":"SUCCESS","type":"TABLE","msg":"country\tyear\ttemp_min\ttemp_max\twind_min\twind_max\nLU\t2003\t16.1\t21.6\t3.0\t6.0\nBE\t2003\t14.0\t16.0\t4.0\t7.0\nUS\t2003\t9.0\t31.0\t0.0\t8.7\nNO\t2003\t11.0\t16.0\t3.6\t3.6\nCA\t2003\t11.0\t11.0\t2.1\t4.6\nIT\t2003\t18.0\t18.0\t11.8\t11.8\nAU\t2003\t31.7\t31.7\t4.0\t4.0\nUK\t2003\t12.0\t15.2\t1.0\t4.1\nGK\t2003\t14.0\t15.9\t4.6\t7.2\nNL\t2003\t14.0\t17.0\t3.1\t5.0\nGM\t2003\t11.9\t11.9\t4.0\t4.0\nIC\t2003\t12.0\t12.0\t2.1\t2.1\n","comment":"","msgTable":[[{"key":"year","value":"LU"},{"key":"year","value":"2003"},{"key":"year","value":"16.1"},{"key":"year","value":"21.6"},{"key":"year","value":"3.0"},{"key":"year","value":"6.0"}],[{"key":"temp_min","value":"BE"},{"key":"temp_min","value":"2003"},{"key":"temp_min","value":"14.0"},{"key":"temp_min","value":"16.0"},{"key":"temp_min","value":"4.0"},{"key":"temp_min","value":"7.0"}],[{"key":"temp_max","value":"US"},{"key":"temp_max","value":"2003"},{"key":"temp_max","value":"9.0"},{"key":"temp_max","value":"31.0"},{"key":"temp_max","value":"0.0"},{"key":"temp_max","value":"8.7"}],[{"key":"wind_min","value":"NO"},{"key":"wind_min","value":"2003"},{"key":"wind_min","value":"11.0"},{"key":"wind_min","value":"16.0"},{"key":"wind_min","value":"3.6"},{"key":"wind_min","value":"3.6"}],[{"key":"wind_max","value":"CA"},{"key":"wind_max","value":"2003"},{"key":"wind_max","value":"11.0"},{"key":"wind_max","value":"11.0"},{"key":"wind_max","value":"2.1"},{"key":"wind_max","value":"4.6"}],[{"value":"IT"},{"value":"2003"},{"value":"18.0"},{"value":"18.0"},{"value":"11.8"},{"value":"11.8"}],[{"value":"AU"},{"value":"2003"},{"value":"31.7"},{"value":"31.7"},{"value":"4.0"},{"value":"4.0"}],[{"value":"UK"},{"value":"2003"},{"value":"12.0"},{"value":"15.2"},{"value":"1.0"},{"value":"4.1"}],[{"value":"GK"},{"value":"2003"},{"value":"14.0"},{"value":"15.9"},{"value":"4.6"},{"value":"7.2"}],[{"value":"NL"},{"value":"2003"},{"value":"14.0"},{"value":"17.0"},{"value":"3.1"},{"value":"5.0"}],[{"value":"GM"},{"value":"2003"},{"value":"11.9"},{"value":"11.9"},{"value":"4.0"},{"value":"4.0"}],[{"value":"IC"},{"value":"2003"},{"value":"12.0"},{"value":"12.0"},{"value":"2.1"},{"value":"2.1"}]],"columnNames":[{"name":"country","index":0,"aggr":"sum"},{"name":"year","index":1,"aggr":"sum"},{"name":"temp_min","index":2,"aggr":"sum"},{"name":"temp_max","index":3,"aggr":"sum"},{"name":"wind_min","index":4,"aggr":"sum"},{"name":"wind_max","index":5,"aggr":"sum"}],"rows":[["LU","2003","16.1","21.6","3.0","6.0"],["BE","2003","14.0","16.0","4.0","7.0"],["US","2003","9.0","31.0","0.0","8.7"],["NO","2003","11.0","16.0","3.6","3.6"],["CA","2003","11.0","11.0","2.1","4.6"],["IT","2003","18.0","18.0","11.8","11.8"],["AU","2003","31.7","31.7","4.0","4.0"],["UK","2003","12.0","15.2","1.0","4.1"],["GK","2003","14.0","15.9","4.6","7.2"],["NL","2003","14.0","17.0","3.1","5.0"],["GM","2003","11.9","11.9","4.0","4.0"],["IC","2003","12.0","12.0","2.1","2.1"]]},"text":"%sql\nselect * from aggregated_weather"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483965155694_67126922","id":"20170109-043235_704854873","dateCreated":"2017-01-09T04:32:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1660","dateUpdated":"2017-01-09T04:38:48-0800","dateFinished":"2017-01-09T04:38:48-0800","dateStarted":"2017-01-09T04:38:48-0800","result":{"code":"SUCCESS","type":"TEXT","msg":""},"text":"tableQuery.stop()"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483965183084_-503809798","id":"20170109-043303_576621974","dateCreated":"2017-01-09T04:33:03-0800","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1763","dateUpdated":"2017-01-09T04:33:13-0800","text":""}],"name":"Spark Weather Structured Streaming Solution","id":"2C793WDYJ","angularObjects":{"2C6KQ2GNT:shared_process":[],"2C5BQGTGT:shared_process":[],"2C4Y5MV3V:shared_process":[],"2C4JS2HDQ:shared_process":[],"2C7NHPHKH:shared_process":[],"2C44EB781:shared_process":[],"2C6BVC9ES:shared_process":[],"2C7PVCCMW:shared_process":[],"2C66FR28V:shared_process":[],"2C7VFSCFR:shared_process":[],"2C81FGN7P:shared_process":[],"2C68PFPBP:shared_process":[],"2C78K3BRW:shared_process":[],"2C7N8FNUK:shared_process":[],"2C5MXJ5D6:shared_process":[],"2C4ACPMVH:shared_process":[],"2C5JAXWD8:shared_process":[],"2C4ZABBYG:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}