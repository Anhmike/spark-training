{"paragraphs":[{"text":"%md\n# Weather Data Analytics\nThis notebook performs some basic weather data analytics using the PySpark RDD interface.","dateUpdated":"May 29, 2016 4:34:01 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641872_1345725877","id":"20160529-043401_1183042653","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Weather Data Analytics</h1>\n<p>This notebook performs some basic weather data analytics using the PySpark RDD interface.</p>\n"},"dateCreated":"May 29, 2016 4:34:01 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4340"},{"text":"%pyspark\n\ndef _get_float(str):\n    if len(str) == 0:\n        return None\n    try:\n        return float(str)\n    except ValueError:\n        return None\n\n\ndef extract_station(line):\n    raw_columns = line.split(',')\n    columns = [c.replace('\"','') for c in raw_columns]\n\n    usaf = columns[0]\n    wban = columns[1]\n    name = columns[2]\n    country = columns[3]\n    state = columns[4]\n    icao = columns[5]\n    latitude = _get_float(columns[6])\n    longitude = _get_float(columns[7])\n    elevation = _get_float(columns[8])\n    date_begin = columns[9]\n    date_end = columns[10]\n    return {'usaf':usaf, 'wban':wban, 'name':name, 'country':country, 'state':state, 'icao':icao, 'latitude':latitude, 'longitude':longitude, 'elevation':elevation, 'date_begin':date_begin, 'date_end':date_end }\n\n\ndef extract_weather(line):\n    date = line[15:23]\n    time = line[23:27]\n    usaf = line[4:10]\n    wban = line[10:15]\n    airTemperatureQuality = line[92] == '1'\n    airTemperature = float(line[87:92]) / 10\n    windSpeedQuality = line[69] == '1'\n    windSpeed = float(line[65:69]) / 10\n    return {'date':date, 'time':time, 'usaf':usaf, 'wban':wban, 'airTemperatureQuality':airTemperatureQuality, 'airTemperature':airTemperature, 'windSpeedQuality':windSpeedQuality, 'windSpeed':windSpeed }\n","dateUpdated":"May 29, 2016 4:34:01 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641873_1345341128","id":"20160529-043401_1994265045","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 29, 2016 4:34:01 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4341"},{"text":"%pyspark\n\ndef nullsafe_binop(a, b, op):\n    if a is None:\n        return b\n    if b is None:\n        return a\n    return op(a,b)\n    \ndef nullsafe_min(a, b):\n    return nullsafe_binop(a, b, min)\n\ndef nullsafe_max(a, b):\n    return nullsafe_binop(a, b, max)\n\n\ndef reduce_wmm(wmm, data):\n    \"\"\"\n    Used for merging in a new weather data set into an existing WeatherMinMax object. The incoming\n    objects will not be modified, instead a new object will be returned.\n    :param wmm: WeatherMinMax object\n    :param data: WeatherData object\n    :returns: A new WeatherMinMax object\n    \"\"\"\n    if data['airTemperatureQuality']:\n        minTemperature = nullsafe_min(wmm['minTemperature'], data['airTemperature'])\n        maxTemperature = nullsafe_max(wmm['maxTemperature'], data['airTemperature'])\n    else:\n        minTemperature = wmm['minTemperature']\n        maxTemperature = wmm['maxTemperature']\n\n    if data['windSpeedQuality']:\n        minWindSpeed = nullsafe_min(wmm['minWindSpeed'], data['windSpeed'])\n        maxWindSpeed = nullsafe_max(wmm['maxWindSpeed'], data['windSpeed'])\n    else:\n        minWindSpeed = wmm['minWindSpeed']\n        maxWindSpeed = wmm['maxWindSpeed']\n\n    return { 'minTemperature':minTemperature, 'maxTemperature':maxTemperature, 'minWindSpeed':minWindSpeed, 'maxWindSpeed':maxWindSpeed }\n\n\ndef combine_wmm(left, right):\n    \"\"\"\n    Used for combining two WeatherMinMax objects into a new WeatherMinMax object\n    :param self: First WeatherMinMax object\n    :param other: Second WeatherMinMax object\n    :returns: A new WeatherMinMax object\n    \"\"\"\n    minTemperature = nullsafe_min(left['minTemperature'], right['minTemperature'])\n    maxTemperature = nullsafe_max(left['maxTemperature'], right['maxTemperature'])\n    minWindSpeed = nullsafe_min(left['minWindSpeed'], right['minWindSpeed'])\n    maxWindSpeed = nullsafe_max(left['maxWindSpeed'], right['maxWindSpeed'])\n\n    return { 'minTemperature':minTemperature, 'maxTemperature':maxTemperature, 'minWindSpeed':minWindSpeed, 'maxWindSpeed':maxWindSpeed }\n\n","dateUpdated":"May 29, 2016 4:34:01 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641873_1345341128","id":"20160529-043401_1835332586","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 29, 2016 4:34:01 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4342"},{"text":"%pyspark\nstations = sc.textFile('/user/cloudera/data/weather/isd-history.csv').map(lambda line: extract_station(line))\nstation_index = stations.keyBy(lambda data: data['usaf'] + data['wban']).collectAsMap()\nstation_index_bc = sc.broadcast(station_index)\n","dateUpdated":"May 29, 2016 4:38:45 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641873_1345341128","id":"20160529-043401_2127151041","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"May 29, 2016 4:34:01 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4343","dateFinished":"May 29, 2016 4:38:47 AM","dateStarted":"May 29, 2016 4:38:45 AM","focus":true},{"text":"%pyspark\nweather = sc.textFile('/user/cloudera/data/weather/2014').map(lambda line: extract_weather(line))\nprint weather.take(5)","dateUpdated":"May 29, 2016 4:34:01 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641873_1345341128","id":"20160529-043401_1867274478","result":{"code":"SUCCESS","type":"TEXT","msg":"[{'airTemperature': -13.6, 'windSpeedQuality': True, 'usaf': u'010060', 'windSpeed': 3.0, 'wban': u'99999', 'time': u'0100', 'date': u'20140101', 'airTemperatureQuality': True}, {'airTemperature': -14.199999999999999, 'windSpeedQuality': True, 'usaf': u'010060', 'windSpeed': 2.0, 'wban': u'99999', 'time': u'0200', 'date': u'20140101', 'airTemperatureQuality': True}, {'airTemperature': -10.699999999999999, 'windSpeedQuality': True, 'usaf': u'010060', 'windSpeed': 4.0, 'wban': u'99999', 'time': u'0400', 'date': u'20140101', 'airTemperatureQuality': True}, {'airTemperature': -11.199999999999999, 'windSpeedQuality': True, 'usaf': u'010060', 'windSpeed': 3.0, 'wban': u'99999', 'time': u'0500', 'date': u'20140101', 'airTemperatureQuality': True}, {'airTemperature': -10.0, 'windSpeedQuality': True, 'usaf': u'010060', 'windSpeed': 5.0, 'wban': u'99999', 'time': u'0600', 'date': u'20140101', 'airTemperatureQuality': True}]\n"},"dateCreated":"May 29, 2016 4:34:01 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4344"},{"text":"%pyspark\ndef extract_country_year_weather(data):\n    station_id = data['usaf'] + data['wban']\n    station = station_index_bc.value.get(station_id, None)\n    return ((station['country'], data['date'][0:4]), data)\n\nweather_per_country_and_year = weather.map(extract_country_year_weather)\n\n# Aggregate min/max information per year and country\nzero = { 'minTemperature':None, 'maxTemperature':None, 'minWindSpeed':None, 'maxWindSpeed':None }\nweather_minmax = weather_per_country_and_year.aggregateByKey(zero,reduce_wmm, combine_wmm)\n\nprint weather_minmax.take(5)\n","dateUpdated":"May 29, 2016 4:41:30 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641874_1346495374","id":"20160529-043401_1486714384","result":{"code":"SUCCESS","type":"TEXT","msg":"[((u'PO', u'2014'), {'maxWindSpeed': 15.4, 'maxTemperature': 32.0, 'minWindSpeed': 0.0, 'minTemperature': -1.0}), ((u'PL', u'2014'), {'maxWindSpeed': 14.9, 'maxTemperature': 32.0, 'minWindSpeed': 0.0, 'minTemperature': -15.0}), ((u'MY', u'2014'), {'maxWindSpeed': 9.8000000000000007, 'maxTemperature': 36.0, 'minWindSpeed': 0.0, 'minTemperature': 19.0}), ((u'FI', u'2014'), {'maxWindSpeed': 18.0, 'maxTemperature': 30.300000000000001, 'minWindSpeed': 0.0, 'minTemperature': -28.600000000000001}), ((u'GM', u'2014'), {'maxWindSpeed': 13.4, 'maxTemperature': 31.0, 'minWindSpeed': 0.0, 'minTemperature': -9.0})]\n"},"dateCreated":"May 29, 2016 4:34:01 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4346","dateFinished":"May 29, 2016 4:42:15 AM","dateStarted":"May 29, 2016 4:41:30 AM","focus":true},{"text":"%pyspark\ndef format_result(row):\n    (k,v) = row\n    country = k[0]\n    year = k[1]\n    minT = v['minTemperature'] or 0.0\n    maxT = v['maxTemperature'] or 0.0\n    minW = v['minWindSpeed'] or 0.0\n    maxW = v['maxWindSpeed'] or 0.0\n    line = \"%s,%s,%f,%f,%f,%f\" % (country, year, minT, maxT, minW, maxW)\n    return line.encode('utf-8')\n\nresult = weather_minmax.map(format_result).collect()\n\nfor l in result:\n    print l\n","dateUpdated":"May 29, 2016 4:42:21 AM","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641874_1346495374","id":"20160529-043401_1236419043","result":{"code":"SUCCESS","type":"TEXT","msg":"PO,2014,-1.000000,32.000000,0.000000,15.400000\nPL,2014,-15.000000,32.000000,0.000000,14.900000\nMY,2014,19.000000,36.000000,0.000000,9.800000\nFI,2014,-28.600000,30.300000,0.000000,18.000000\nGM,2014,-9.000000,31.000000,0.000000,13.400000\nIT,2014,-6.800000,24.000000,0.000000,20.600000\nDA,2014,-9.000000,30.200000,0.000000,17.000000\nUK,2014,-6.000000,30.400000,0.000000,20.600000\nGK,2014,2.000000,24.000000,0.000000,21.100000\nIC,2014,-7.000000,18.000000,0.000000,29.300000\nUS,2014,-37.200000,41.200000,0.000000,31.000000\nSW,2014,-34.500000,28.900000,1.000000,16.000000\nRS,2014,-28.900000,30.500000,0.000000,11.000000\nBE,2014,-7.000000,33.100000,0.000000,16.000000\nAU,2014,-11.000000,34.000000,0.000000,16.500000\nAS,2014,0.900000,45.600000,0.000000,14.400000\nLU,2014,-10.000000,32.100000,0.000000,13.400000\nNO,2014,-35.700000,32.000000,0.000000,35.500000\nSF,2014,0.900000,37.400000,0.000000,13.400000\nEZ,2014,-15.000000,33.000000,0.000000,16.500000\nJA,2014,-0.500000,33.900000,0.000000,19.600000\nNL,2014,-9.000000,35.000000,0.000000,27.300000\nFR,2014,-9.000000,36.100000,0.000000,16.500000\nCA,2014,-43.600000,35.900000,0.000000,26.800000\nCH,2014,11.000000,34.000000,0.000000,15.000000\nSC,2014,20.000000,32.000000,0.000000,30.400000\nAM,2014,-19.000000,39.000000,0.000000,16.000000\n"},"dateCreated":"May 29, 2016 4:34:01 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4347","dateFinished":"May 29, 2016 4:42:25 AM","dateStarted":"May 29, 2016 4:42:21 AM","focus":true},{"dateUpdated":"May 29, 2016 4:34:01 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1464521641875_1346110626","id":"20160529-043401_1443087329","dateCreated":"May 29, 2016 4:34:01 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4348"}],"name":"PySpark Weather Analysis with Broadcast Variables","id":"2BNKRGV1H","angularObjects":{"2BKGW8Q6E":[],"2BP2JWUVF":[],"2BM4Z6DBF":[],"2BJUEKW1N":[],"2BNG99EDF":[],"2BM6V6VQG":[],"2BKHCUTH5":[],"2BJGUFRFB":[],"2BM4XH3S9":[],"2BKRDB8F5":[],"2BJDKPSX9":[],"2BN3H3JME":[],"2BMJC3KG9":[],"2BM79W2EN":[]},"config":{"looknfeel":"default"},"info":{}}