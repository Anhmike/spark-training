package de.dimajix.training.spark.wordcount

import scala.collection.JavaConversions._

import org.apache.spark.SparkConf
import org.apache.spark.streaming.Seconds
import org.apache.spark.streaming.StreamingContext
import org.kohsuke.args4j.CmdLineException
import org.kohsuke.args4j.CmdLineParser
import org.slf4j.Logger
import org.slf4j.LoggerFactory

/**
  * Created by kaya on 03.12.15.
  */
object NetworkDriver {
  def main(args: Array[String]) : Unit = {
    // First create driver, so can already process arguments
    val driver = new NetworkDriver(args)

    // ... and run!
    driver.run()
  }
}


class NetworkDriver(args: Array[String]) {
  private val logger: Logger = LoggerFactory.getLogger(classOf[NetworkDriver])

  @org.kohsuke.args4j.Option(name = "--hostname", usage = "hostname of stream server", metaVar = "<hostname>")
  private var streamHostname: String = "quickstart"
  @org.kohsuke.args4j.Option(name = "--port", usage = "port of stream server", metaVar = "<port>")
  private var streamPort: Int = 9977
  @org.kohsuke.args4j.Option(name = "--cpdir", usage = "checkpoint directory", metaVar = "<checkpoint_dir>")
  private var checkpointDirectory: String = "spark-wordcount-checkpoint"

  parseArgs(args)

  private def parseArgs(args: Array[String]) {
    val parser: CmdLineParser = new CmdLineParser(this)
    parser.setUsageWidth(80)
    try {
      parser.parseArgument(args.toList)
    }
    catch {
      case e: CmdLineException => {
        System.err.println(e.getMessage)
        parser.printUsage(System.err)
        System.err.println
        System.exit(1)
      }
    }
  }

  def run() = {
    // Now create SparkContext (possibly flooding the console with logging information)
    val conf = new SparkConf()
      .setAppName("Spark Streaming Stateful Word Count")

    // Create Context with given checkpoint directory
    val ssc = new StreamingContext(conf, Seconds(1))
    ssc.checkpoint(checkpointDirectory)

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')
    val input = ssc.socketTextStream(streamHostname, streamPort)
    val words = input.flatMap(_.split(" ")).filter(_ != "").map(x => (x,1))

    // Update function which updates the DStreams state
    val updateFunc = (counts: Seq[Int], runningCount: Option[Int]) => {
      val sum = counts.sum + runningCount.getOrElse(0)
      Some(sum)
    }

    words.updateStateByKey(updateFunc)
      .transform(_.sortBy(_._2, ascending = false))
      .print(20)

    ssc.start()
    ssc.awaitTermination()
  }
}
