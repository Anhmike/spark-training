{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523293740889_-2139504010","id":"20180409-170900_1704762601","dateCreated":"2018-04-09T17:09:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1169","text":"%md\n# No Parameter Lists\nScala supports functions without parameter lists. This makes them almost indistinguishable from values - except that any logic is executed every time the function is invokes, while the value of a `val` is set once for ever.","dateUpdated":"2018-04-09T17:10:01+0000","dateFinished":"2018-04-09T17:10:01+0000","dateStarted":"2018-04-09T17:10:01+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>No Parameter Lists</h1>\n<p>Scala supports functions without parameter lists. This makes them almost indistinguishable from values - except that any logic is executed every time the function is invokes, while the value of a <code>val</code> is set once for ever.</p>\n</div>"}]}},{"text":"def fn : Int = {\n    println(\"fn executed\")\n    3\n}\n\nfn\nfn","user":"anonymous","dateUpdated":"2018-04-09T17:10:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523293713011_-1774792701","id":"20180409-170833_1582717416","dateCreated":"2018-04-09T17:08:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1075","dateFinished":"2018-04-09T17:10:19+0000","dateStarted":"2018-04-09T17:10:19+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fn: Int\nfn executed\nres7: Int = 3\nfn executed\nres8: Int = 3\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523293822003_-1403339802","id":"20180409-171022_644298566","dateCreated":"2018-04-09T17:10:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1262","text":"val x = {\n    println(\"x assigned\")\n    7\n}\n\nx\nx","dateUpdated":"2018-04-09T17:10:35+0000","dateFinished":"2018-04-09T17:10:36+0000","dateStarted":"2018-04-09T17:10:35+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"x assigned\nx: Int = 7\nres10: Int = 7\nres11: Int = 7\n"}]}},{"text":"%md\n## Multiple Parameter Lists\n\nIn contrast to many other programming languages, Scala supports functions with multiple argument lists. This comes in handy for passing implicit values or multiple variable argument lists.","dateUpdated":"2018-04-09T09:59:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Multiple Parameter Lists</h2>\n<p>In contrast to many other programming languages, Scala supports functions with multiple argument lists. This comes in handy for passing implicit values or multiple variable argument lists.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1523267965591_953517286","id":"20180310-073213_9127006","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:101"},{"text":"def fn(multiplier:Double)(value:Double) = multiplier * value\n\nfn(2.0)(3)","dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fn: (multiplier: Double)(value: Double)Double\nres44: Double = 6.0\n"}]},"apps":[],"jobName":"paragraph_1523267965593_951208793","id":"20180310-073322_1697476332","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"text":"def fn(lefts:Double*)(rights:Double*) = {\n    for (l <- lefts; r <- rights)\n        yield l*r\n}\n\nprintln(fn(1,2,3)(3,4,5).mkString(\",\"))","dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fn: (lefts: Double*)(rights: Double*)Seq[Double]\n3.0,4.0,5.0,6.0,8.0,10.0,9.0,12.0,15.0\n"}]},"apps":[],"jobName":"paragraph_1523267965595_951978290","id":"20180310-073334_1507155766","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"%md\n### Using multiple Parameter Lists with Function Parameters\n\nHaving multiple parameter list can be especially useful if the last list is a function. In this case the function can be specified inline in a natural way using curly braces.","user":"anonymous","dateUpdated":"2018-04-09T17:08:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Using multiple Parameter Lists with Function Parameters</h3>\n<p>Having multiple parameter list can be especially useful if the last list is a function. In this case the function can be specified inline in a natural way using curly braces.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1523267984526_-473116311","id":"20180409-095944_1633818158","dateCreated":"2018-04-09T09:59:44+0000","dateStarted":"2018-04-09T17:08:26+0000","dateFinished":"2018-04-09T17:08:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"def repeat(n:Int)(fn: => Unit) = {\n    (1 to n).foreach(_ => fn)\n}\n\nrepeat(3) { println(\"Hello World\") }","user":"anonymous","dateUpdated":"2018-04-09T17:05:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523268009245_1900646485","id":"20180409-100009_1900003922","dateCreated":"2018-04-09T10:00:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:105","dateFinished":"2018-04-09T17:05:35+0000","dateStarted":"2018-04-09T17:05:35+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"repeat: (n: Int)(fn: => Unit)Unit\nHello World\nHello World\nHello World\n"}]}},{"text":"%md\n# Currying\n\nAnother technique which is well-known in the functional world is *Currying*. This binds a subset of function parameters with arguments while leaving other parameters unbound. This creates a new function with less parameters.","dateUpdated":"2018-04-09T09:59:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Currying</h1>\n<p>Another technique which is well-known in the functional world is <em>Currying</em>. This binds a subset of function parameters with arguments while leaving other parameters unbound. This creates a new function with less parameters.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1523267965596_950054546","id":"20180310-073529_675855962","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"text":"def multiply(a:Double)(b:Double) = a*b\nval twice = multiply(2.0)(_)\n\ntwice(3)","dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"multiply: (a: Double)(b: Double)Double\ntwice: Double => Double = <function1>\nres51: Double = 6.0\n"}]},"apps":[],"jobName":"paragraph_1523267965597_949669797","id":"20180310-073811_661052233","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"%md\n# Higher Order Functions\n\nWith Currying we created a new function from an existing one. This concept can be generalized, such that we can actually create a function which transforms other functions. These are called *higher order functions*.","dateUpdated":"2018-04-09T09:59:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Higher Order Functions</h1>\n<p>With Currying we created a new function from an existing one. This concept can be generalized, such that we can actually create a function which transforms other functions. These are called <em>higher order functions</em>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1523267965598_950824044","id":"20180310-073850_1360927367","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"def applyDecorator[X](f: X => Int, decorate:Int => String) = {\n    x:X => decorate(f(x))\n}\n\nval calculator = applyDecorator((n:Int) => 2*n, \"[\" + _ + \"]\")\nprintln(calculator(23))","dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"applyDecorator: [X](f: X => Int, decorate: Int => String)X => String\ncalculator: Int => String = <function1>\n[46]\n"}]},"apps":[],"jobName":"paragraph_1523267965598_950824044","id":"20180310-074155_1152412662","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"text":"val meter = applyDecorator((s:String) => s.length, \"[\" + _ + \"]\")\nprintln(meter(\"Hello World\"))","dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"meter: String => String = <function1>\n[11]\n"}]},"apps":[],"jobName":"paragraph_1523267965599_950439295","id":"20180310-074210_1927633397","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"dateUpdated":"2018-04-09T09:59:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523267965600_936203585","id":"20180310-074228_249256564","dateCreated":"2018-04-09T09:59:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:111"}],"name":"Scala Introduction - Part X3 - Advanced Functions","id":"2DBNRBH86","angularObjects":{"2D8DSN3N4:shared_process":[],"2D7W55G1J:shared_process":[],"2DA3X6UGN:shared_process":[],"2D9HTU14T:shared_process":[],"2DBA6X8JB:shared_process":[],"2DBSCZXK2:shared_process":[],"2D9M853BP:shared_process":[],"2DAXFQ4X2:shared_process":[],"2DB3TEGGU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}