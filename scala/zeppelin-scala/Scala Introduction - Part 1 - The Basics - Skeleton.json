{"paragraphs":[{"text":"%md\n# 1 Values & Variables\nScala has two different types of variables. The preferred and most commonly used actually is not variable, but can only be assigned with a fixed value upon initilization. Therefore these fixed variables are more like values and declared with \"val\". Using fixed values instead of variables is typical for functional programming languages, since this reflects the idea of having no side effects.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339398_-566591327","id":"20160612-122736_730677710","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>1 Values &amp; Variables</h1>\n<p>Scala has two different types of variables. The preferred and most commonly used actually is not variable, but can only be assigned with a fixed value upon initilization. Therefore these fixed variables are more like values and declared with &ldquo;val&rdquo;. Using fixed values instead of variables is typical for functional programming languages, since this reflects the idea of having no side effects.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:237"},{"text":"","dateUpdated":"2018-11-14T19:31:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339399_-566976076","id":"20160618-124858_1299452014","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:238"},{"text":"","dateUpdated":"2018-11-14T19:31:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339399_-566976076","id":"20160618-124911_85072484","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:239"},{"text":"","dateUpdated":"2018-11-14T19:31:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339399_-566976076","id":"20160618-124920_66174982","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:240"},{"text":"%md\nA Scala value cannot be reassigned. This is a design decision found in many functional languages.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339399_-566976076","id":"20181110-171639_214752053","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>A Scala value cannot be reassigned. This is a design decision found in many functional languages.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:241"},{"text":"c = 2.7","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339399_-566976076","id":"20160618-125223_2054574154","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:242"},{"text":"%md\n## 1.1 Variables (instead of Values)\nBut since sometimes you need really variable variables, Scala supports these too. They are defined usign \"var\". Later we will see many techniques from functional programming that avoid using variables - although they are still needed especialy in the context of object-oriented programming, which is also well supported in Scala.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339400_-568899821","id":"20160618-124932_1546950641","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>1.1 Variables (instead of Values)</h2>\n<p>But since sometimes you need really variable variables, Scala supports these too. They are defined usign &ldquo;var&rdquo;. Later we will see many techniques from functional programming that avoid using variables - although they are still needed especialy in the context of object-oriented programming, which is also well supported in Scala.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:243"},{"text":"","dateUpdated":"2018-11-14T19:31:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339400_-568899821","id":"20160618-125208_1545963845","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:244"},{"text":"","dateUpdated":"2018-11-14T19:31:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339400_-568899821","id":"20160618-125217_1606514289","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:245"},{"text":"%md \n# 2 Types\nIn many cases, you do not need to care about the type of a variable, since these are inferred automatically by Scala. But of course, later when declaring functions and classes, we need to specify types. Scala has the following built-in primitive types:\n\n    Byte\n    Short\n    Int\n    Long\n    Float\n    Double\n    Char\n    String\n    Boolean\n    Unit\n    Null\n    Nothing\n    Any\n    AnyRef\n    \nA variable with a specific type can be delcared via\n\n    val x:Double = 12","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339400_-568899821","id":"20160618-125241_2002333105","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>2 Types</h1>\n<p>In many cases, you do not need to care about the type of a variable, since these are inferred automatically by Scala. But of course, later when declaring functions and classes, we need to specify types. Scala has the following built-in primitive types:</p>\n<pre><code>Byte\nShort\nInt\nLong\nFloat\nDouble\nChar\nString\nBoolean\nUnit\nNull\nNothing\nAny\nAnyRef\n</code></pre>\n<p>A variable with a specific type can be delcared via</p>\n<pre><code>val x:Double = 12\n</code></pre>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:246"},{"text":"val x:Double = 12","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339400_-568899821","id":"20160618-125558_266516952","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:247"},{"text":"%md\n## 2.1 Arrays\n\nArrays are a very special type, since they probably do not fit completely within a functional programming environment. But since they are omnipresent in the Java world and therefore also in the JVM, Scala also supports Array types. An array simply is a continous list of objeects with a common type. Individual elements can be accessed via their index (starting at 0).","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339401_-569284570","id":"20160618-132148_2046631532","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>2.1 Arrays</h2>\n<p>Arrays are a very special type, since they probably do not fit completely within a functional programming environment. But since they are omnipresent in the Java world and therefore also in the JVM, Scala also supports Array types. An array simply is a continous list of objeects with a common type. Individual elements can be accessed via their index (starting at 0).</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:248"},{"text":"val array = // YOUR CODE HERE\n\narray(1)","dateUpdated":"2018-11-14T19:31:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339401_-569284570","id":"20160618-132200_921257413","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:249"},{"text":"val array = // YOUR CODE HERE\n","dateUpdated":"2018-11-14T19:31:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339401_-569284570","id":"20160618-132218_1168434681","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:250"},{"text":"%md\nAlthough the array has been declared as a `val`, its elements can be reassigned. This is consistent with the Scala language, since `val` only refers to the array (container) and not to the elements of the container.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339401_-569284570","id":"20180320-062044_917777541","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>Although the array has been declared as a <code>val</code>, its elements can be reassigned. This is consistent with the Scala language, since <code>val</code> only refers to the array (container) and not to the elements of the container.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:251"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:31:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339401_-569284570","id":"20160618-132259_1571800678","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:252"},{"text":"array.size","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339402_-568130323","id":"20160618-133312_1542220282","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:253"},{"text":"%md\n# 3 Literal Values\nWe already saw some literal values. Scala has the following syntax for creating literal values","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339402_-568130323","id":"20160618-125620_171382297","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>3 Literal Values</h1>\n<p>We already saw some literal values. Scala has the following syntax for creating literal values</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:254"},{"text":"%md\n## 3.1 Integer Literals\nScala does not surprise the developer when it comes how integer literals can be specified, although there are multiple ways to do so (as in most programming languages)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339402_-568130323","id":"20160618-125754_1780559654","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>3.1 Integer Literals</h2>\n<p>Scala does not surprise the developer when it comes how integer literals can be specified, although there are multiple ways to do so (as in most programming languages)</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:255"},{"text":"// Integer Literals\n0\n123\n0xFFFF\n77L","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339402_-568130323","id":"20160618-125704_1031381766","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:256"},{"text":"%md\n## 3.2 Floating Point Literals\nScala also supports the most common notations for floating point literals.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339403_-568515072","id":"20160618-125805_658470064","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>3.2 Floating Point Literals</h2>\n<p>Scala also supports the most common notations for floating point literals.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:257"},{"text":".0 \n1e30f \n3.14159f \n1.0e100\n.1","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339403_-568515072","id":"20160618-125816_420424601","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:258"},{"text":"%md\n## 3.3 Boolean Literals\nBoolean data types have only two values: `true` or `false`.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339403_-568515072","id":"20160618-125918_360848180","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>3.3 Boolean Literals</h2>\n<p>Boolean data types have only two values: <code>true</code> or <code>false</code>.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:259"},{"text":"true\nfalse","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339403_-568515072","id":"20160618-125933_256263397","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:260"},{"text":"%md\n## 3.4 String Literals\nIn Scala Strings are always quoted with double quotation marks (`\"`).","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339403_-568515072","id":"20160618-125945_1855165271","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>3.4 String Literals</h2>\n<p>In Scala Strings are always quoted with double quotation marks (<code>&quot;</code>).</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:261"},{"text":"\"Hello\\nWorld\"","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339404_-570438816","id":"20160618-125954_687810284","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:262"},{"text":"%md\nScala also supports multi line strings by using the double quotes at the beginning and at the end (`\"\"\"`):","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339404_-570438816","id":"20181110-172104_1245808118","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>Scala also supports multi line strings by using the double quotes at the beginning and at the end (<code>&quot;&quot;&quot;</code>):</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:263"},{"text":"","dateUpdated":"2018-11-14T19:32:07+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339404_-570438816","id":"20160618-130021_1096822616","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:264"},{"text":"val str = \"This is a string\"","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339404_-570438816","id":"20160618-133507_1931935097","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:265"},{"text":"%md\n### Typical String operations","dateUpdated":"2018-11-14T19:32:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339405_-570823565","id":"20180320-062210_695140117","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Typical String operations</h3>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:266","user":"anonymous","dateFinished":"2018-11-14T19:32:03+0000","dateStarted":"2018-11-14T19:32:01+0000"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339405_-570823565","id":"20160618-133520_702107272","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:267"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339405_-570823565","id":"20160618-133526_1136500708","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:268"},{"text":"%md\n### String Interpolation\n\nScala provides a very convenient way of constructing Strings from multiple objects by so called *String Interpolation*. This allows to access other variables inside a string by prepending the variable name with a dollar sign `$`. \n\nTo turn on string interpolation, the string has to be prefixed with an `s` just before the quotes. Moreover string interpolation not only supports accessing variables, you can also evaluate any Scala expression within curly quotes via `$ {...}`.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{"...":""},"forms":{}},"apps":[],"jobName":"paragraph_1542223339405_-570823565","id":"20160618-144342_700503477","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>String Interpolation</h3>\n<p>Scala provides a very convenient way of constructing Strings from multiple objects by so called <em>String Interpolation</em>. This allows to access other variables inside a string by prepending the variable name with a dollar sign <code>$</code>. </p>\n<p>To turn on string interpolation, the string has to be prefixed with an <code>s</code> just before the quotes. Moreover string interpolation not only supports accessing variables, you can also evaluate any Scala expression within curly quotes via <code>$ {...}</code>.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:269"},{"text":"val i = 12 \n// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339405_-570823565","id":"20160618-144359_1629905597","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:270"},{"text":"%md\n## 3.5 Character Literals\n\nOf course Scala also supports individual characters. These can be specified by using single quotes (`'`).","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339406_-569669319","id":"20160618-130104_1230136134","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>3.5 Character Literals</h2>\n<p>Of course Scala also supports individual characters. These can be specified by using single quotes (<code>&#39;</code>).</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:271"},{"text":"'a'\n'\\n'\n'\\u0041'","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339406_-569669319","id":"20160618-130115_1161566296","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres85: Char = a\n\n\nres86: Char =\n\n\nres87: Char = A\n"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:272"},{"text":"%md\n# 4 Tuples\n\nTuples are very important in Scala and are used in many places. At first glance they might resemble of an array, but are in fact a completely different beast. \n\nA tuple is a small container with a *fixed* number of elements (as opposed to an array contains a *dynamic* number of elements) and each element can have a different type (again as opposed to an array where all elements have to be of the same type). The elements also cannot be accessed by the index operator (like arrays), but have to be accessed via the member variables `_1`, `_2`, and so on. \n\nTuples can be seen as anonymous structs with standardized element names. They arise in many algorithms (key-value pairs) and are also a common way of returning multiple values from a function.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339406_-569669319","id":"20160612-122736_1188778424","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>4 Tuples</h1>\n<p>Tuples are very important in Scala and are used in many places. At first glance they might resemble of an array, but are in fact a completely different beast. </p>\n<p>A tuple is a small container with a <em>fixed</em> number of elements (as opposed to an array contains a <em>dynamic</em> number of elements) and each element can have a different type (again as opposed to an array where all elements have to be of the same type). The elements also cannot be accessed by the index operator (like arrays), but have to be accessed via the member variables <code>_1</code>, <code>_2</code>, and so on. </p>\n<p>Tuples can be seen as anonymous structs with standardized element names. They arise in many algorithms (key-value pairs) and are also a common way of returning multiple values from a function.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:273"},{"text":"val t1 = // YOUR CODE HERE\nval t2 = // YOUR CODE HERE\nval t3 = // YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339406_-569669319","id":"20160612-122749_542655902","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"text":"%md\nFor tuples with exatly two elements (also called *pairs*), Scala provides an additional notation which is quite common for declaring key-value pairs. The syntax looks different, but the result is completely equivalent.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339407_-570054068","id":"20180320-062836_2051215637","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>For tuples with exatly two elements (also called <em>pairs</em>), Scala provides an additional notation which is quite common for declaring key-value pairs. The syntax looks different, but the result is completely equivalent.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"text":"val t2 = // YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339407_-570054068","id":"20160612-122821_1496803414","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:276"},{"text":"%md\n## 4.1 Tuple deconstruction\nScala also supports automatic deconstruction of a tuple into its elements. This is very handy for accessing the elements via named variables which clarify the semantics of the elements.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339407_-570054068","id":"20180320-062947_1024719307","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>4.1 Tuple deconstruction</h2>\n<p>Scala also supports automatic deconstruction of a tuple into its elements. This is very handy for accessing the elements via named variables which clarify the semantics of the elements.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:277"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339407_-570054068","id":"20160612-122837_1626689027","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339407_-570054068","id":"20160618-130339_178165655","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"text":"%md\n# 5 Functions\nOf course every program needs functions. A function encapsulates one or more operations into a logical block. Functions can have parameters and return values.\n\nNote that unlike many other languages, in Scala you do not need to use they keyword `return` to specify the return value. Instead the last expression of the function body is used as the return value. Actually Scala supports a `return` statement, but it is discourages to be used since it does behave as expected in all circumstances.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339408_-559665847","id":"20160618-130403_228160310","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>5 Functions</h1>\n<p>Of course every program needs functions. A function encapsulates one or more operations into a logical block. Functions can have parameters and return values.</p>\n<p>Note that unlike many other languages, in Scala you do not need to use they keyword <code>return</code> to specify the return value. Instead the last expression of the function body is used as the return value. Actually Scala supports a <code>return</code> statement, but it is discourages to be used since it does behave as expected in all circumstances.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:280"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:33:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339408_-559665847","id":"20160618-130555_1312756072","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"text":"%md\n### Return types\nThe return type can be specified explicitly by appending `: ReturnType` after the parameter list. If not return type is specified, Scala tries to infer the type. In some cases this is not possible (recursion) and generally it is good style to specify teh return values, especially for functions that are part of a library which will be used by other people who do not want to look up the implementation to gues the return type.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339408_-559665847","id":"20180320-063237_1804603150","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Return types</h3>\n<p>The return type can be specified explicitly by appending <code>: ReturnType</code> after the parameter list. If not return type is specified, Scala tries to infer the type. In some cases this is not possible (recursion) and generally it is good style to specify teh return values, especially for functions that are part of a library which will be used by other people who do not want to look up the implementation to gues the return type.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"// YOUR CODE HERE\n\nfn(23, 5)","dateUpdated":"2018-11-14T19:33:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339408_-559665847","id":"20160618-130613_558199751","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"text":"def fn(x:Double, y:Double) = {\n    val x2 = 2.0 * x\n    val result = x2 + y\n    result\n}\n\nfn(10,20)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339409_-560050596","id":"20160618-130642_1598799850","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"text":"%md\n### `void` functions\nA function may also return nothing, in this case the type `Unit` is used.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339409_-560050596","id":"20180320-063435_1730635434","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3><code>void</code> functions</h3>\n<p>A function may also return nothing, in this case the type <code>Unit</code> is used.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:285"},{"text":"// YOUR CODE HERE\n\nhello()","dateUpdated":"2018-11-14T19:34:03+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339409_-560050596","id":"20160618-130845_908587785","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"%md\n### Omitting parantheses\n\nIn Scala you can omit parantheses for functions which take zero or one arguments. This provides the basis for creating DSL (domain specific languages) directly inside Scala.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339409_-560050596","id":"20181110-172321_2083907464","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Omitting parantheses</h3>\n<p>In Scala you can omit parantheses for functions which take zero or one arguments. This provides the basis for creating DSL (domain specific languages) directly inside Scala.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:34:03+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339409_-560050596","id":"20160618-130929_1061969523","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:288"},{"text":"%md\n### Parameterless functions\nYou can even define a Scala function which does not have even an empty parameter list:","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339410_-558896349","id":"20181110-172441_1862669836","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Parameterless functions</h3>\n<p>You can even define a Scala function which does not have even an empty parameter list:</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:289"},{"text":"def hello = // YOUR CODE HERE\n\nhello","dateUpdated":"2018-11-14T19:34:03+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339410_-558896349","id":"20160618-130821_730734568","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:290"},{"text":"%md\n## 5.1 Anonymous Functions\n\nIn a functional programming language like Scala, functions are objects like any other items like numbers and strings. This means that a function can be assigned to a variable or passed in as an argument to another function. Moreover Scala allows to define small functions *in place* which then do not have a name. These are called *anonymous functions* or *lambda functions*.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339410_-558896349","id":"20160618-130945_1469706812","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>5.1 Anonymous Functions</h2>\n<p>In a functional programming language like Scala, functions are objects like any other items like numbers and strings. This means that a function can be assigned to a variable or passed in as an argument to another function. Moreover Scala allows to define small functions <em>in place</em> which then do not have a name. These are called <em>anonymous functions</em> or <em>lambda functions</em>.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:291"},{"text":"// YOUR CODE HERE\n\nfn(3)","dateUpdated":"2018-11-14T19:34:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339410_-558896349","id":"20160618-130957_985532439","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:292"},{"text":"%md\nIn the following example, the function `process` takes another function as its second argument.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339411_-559281098","id":"20180320-063835_1209234696","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>In the following example, the function <code>process</code> takes another function as its second argument.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:293"},{"text":"def process(value:Double, preprocess:(Double) => Double) = {\n    val tmp = preprocess(value)\n    2*tmp\n}\n\nprocess(12, (x:Double) => x-1)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339411_-559281098","id":"20160618-131008_995171610","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:294"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:34:28+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339411_-559281098","id":"20160618-134043_47185481","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"%md\n## 5.2 Nested Functions\n\nIn Scala it is possible to nest function definitions. The following object provides a filter function for extracting values from a list of integers that are below a threshold value:","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339411_-559281098","id":"20170129-113453_1644697450","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>5.2 Nested Functions</h2>\n<p>In Scala it is possible to nest function definitions. The following object provides a filter function for extracting values from a list of integers that are below a threshold value:</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"text":"def compute(xs: Int) = {\n  def twice(y: Int) = 2*y\n  def inc(y: Int) = y+1\n  twice(xs) + inc(xs)\n}\n\nprintln(compute(23))","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339412_-561204843","id":"20170129-113535_106276082","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"text":"%md\n# 6 Conditions\n\nScala supports traditional \"if/then/else\" conditions. In contrast to some other programming languages, \"if/then/else\" is an expression not a statement. This fact enables using \"if\" in conditional assignments, thereby helping to stick with \"val\" instead of \"var\"","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339412_-561204843","id":"20160618-131325_1520536003","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>6 Conditions</h1>\n<p>Scala supports traditional &ldquo;if/then/else&rdquo; conditions. In contrast to some other programming languages, &ldquo;if/then/else&rdquo; is an expression not a statement. This fact enables using &ldquo;if&rdquo; in conditional assignments, thereby helping to stick with &ldquo;val&rdquo; instead of &ldquo;var&rdquo;</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:298"},{"text":"def fn(x:Int) = {\n    // YOUR CODE HERE\n}\n\nfn(7)","dateUpdated":"2018-11-14T19:35:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339412_-561204843","id":"20160618-131847_1689839346","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"text":"%md\n### if-then-clases as expressions\n\nAs mentioned above, an if-clause actually is an expression with the value of the branch (of course both branches need to be expressions sharing the same type). This allows a very tight definition of simple functions.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339412_-561204843","id":"20181112-165538_313612794","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>if-then-clases as expressions</h3>\n<p>As mentioned above, an if-clause actually is an expression with the value of the branch (of course both branches need to be expressions sharing the same type). This allows a very tight definition of simple functions.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"text":"def my_abs(x:Int) = // YOUR CODE HERE\n\nmy_abs(3)\nmy_abs(-100)","dateUpdated":"2018-11-14T19:35:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339413_-561589592","id":"20160618-131924_1627091940","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"text":"%md\n### another example\n\nThe following example shows how to use an if-then clause as an expression for initializing a value.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339413_-561589592","id":"20181112-165702_1490669185","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>another example</h3>\n<p>The following example shows how to use an if-then clause as an expression for initializing a value.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:302"},{"text":"val x = -12\nval abs_value = // YOUR CODE HERE","dateUpdated":"2018-11-14T19:35:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339413_-561589592","id":"20160618-132002_1885074716","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:303"},{"text":"%md\n# 7 Pattern Matching\n\nScala offers a mechanism called *Pattern Matching* which is similar to \"switch/case\" statements in other languages. But later we will see that pattern matching is extremly more powerful and can simplify one's life dramatically.\n\nThis example already shows that Scala pattern matches uses specific values, types and/or additional conditions. Matching is performed in the order of the `case` statements with no automatic fall-through (like in other languages like C/C++ which require an explicit `break` statement to exit from the current `case`)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339413_-561589592","id":"20180310-075704_2009561115","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>7 Pattern Matching</h1>\n<p>Scala offers a mechanism called <em>Pattern Matching</em> which is similar to &ldquo;switch/case&rdquo; statements in other languages. But later we will see that pattern matching is extremly more powerful and can simplify one&rsquo;s life dramatically.</p>\n<p>This example already shows that Scala pattern matches uses specific values, types and/or additional conditions. Matching is performed in the order of the <code>case</code> statements with no automatic fall-through (like in other languages like C/C++ which require an explicit <code>break</code> statement to exit from the current <code>case</code>)</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:304"},{"text":"def fn(something:Any) : String = {\n    // YOUR CODE HERE\n}\n","dateUpdated":"2018-11-14T19:35:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339414_-560435345","id":"20180310-075820_809547747","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:305"},{"text":"fn(\"Alice\")","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339414_-560435345","id":"20180310-075848_1945147983","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:306"},{"text":"fn(\"Kaya\")","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339414_-560435345","id":"20180310-075858_1383171692","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:307"},{"text":"fn(\"Kaya Kupferschmidt\")","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339414_-560435345","id":"20180310-075931_1592275809","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:308"},{"text":"fn(2)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339414_-560435345","id":"20181112-165844_316647249","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:309"},{"text":"%md\n# 8 Loops\n\nScala also offers traditional loops like `for` and `while`. Later we will see that many problems can be solved differently without an explicit loop statement.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339415_-560820094","id":"20160618-132032_836004386","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>8 Loops</h1>\n<p>Scala also offers traditional loops like <code>for</code> and <code>while</code>. Later we will see that many problems can be solved differently without an explicit loop statement.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:310"},{"text":"%md\n## 8.1 While Loops\n\n`while` loops are executed as long as some condition is true. This implies that the condition itself has to change at some point in time, and is therefore not a constant value. More realistic examples would probably use a more complex object with some internal state that changes.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339415_-560820094","id":"20160618-132341_1333366716","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>8.1 While Loops</h2>\n<p><code>while</code> loops are executed as long as some condition is true. This implies that the condition itself has to change at some point in time, and is therefore not a constant value. More realistic examples would probably use a more complex object with some internal state that changes.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:311"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:35:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339415_-560820094","id":"20160618-132518_1698806222","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:312"},{"text":"var x = 12\n\ndo {\n    println(\"x = \" + x)\n    x = x +1\n} while (x < 20)","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339415_-560820094","id":"20160618-132514_113179074","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"text":"%md\n## 8.2 For Loops\n\n `for` loops are more prominent that `while` loops in most programming languages. Scala also supports `for` loops, which simply iterate over a collection of items. In the examples below, we use `for` loops to iterate over integers provided by a `Range` object. This `Range` object is constructed by the `1 to 10` syntax.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339416_-562743838","id":"20160618-132626_938651862","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>8.2 For Loops</h2>\n<p><code>for</code> loops are more prominent that <code>while</code> loops in most programming languages. Scala also supports <code>for</code> loops, which simply iterate over a collection of items. In the examples below, we use <code>for</code> loops to iterate over integers provided by a <code>Range</code> object. This <code>Range</code> object is constructed by the <code>1 to 10</code> syntax.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:35:50+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339416_-562743838","id":"20160618-132641_1645574649","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"text":"%md\nBut since `for` loops are very generic, we can also iterate over values in an array:","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339416_-562743838","id":"20180320-065021_760409929","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>But since <code>for</code> loops are very generic, we can also iterate over values in an array:</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:316"},{"text":"val array = Array(1,2,10)\n\n// YOUR CODE HERE","dateUpdated":"2018-11-14T19:36:11+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339416_-562743838","id":"20160618-132638_1481953455","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:317"},{"text":"%md\nIt is also possible to specify additional conditions while iterating by appending an `if` clause right after the range.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339417_-563128587","id":"20180320-065046_1078659706","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>It is also possible to specify additional conditions while iterating by appending an <code>if</code> clause right after the range.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-11-14T19:36:11+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339417_-563128587","id":"20170218-131031_334274214","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"text":"%md\n## 8.3 Break Statement\n\nThere is no such thing built into the core language. But it is available via the Scala Standard Library. The fact that `break` is not part of the core syntax of Scala (i.e. that it is not a keyword) and that it is encapsulated in some utility library is a very strong indicator that Scala discourages using `break` statements. Again we will see later how functional programming offers different techniques which avoids using `break` statements and help to create a clean logical flow.","dateUpdated":"2018-11-14T19:22:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339417_-563128587","id":"20160618-132806_277713634","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>8.3 Break Statement</h2>\n<p>There is no such thing built into the core language. But it is available via the Scala Standard Library. The fact that <code>break</code> is not part of the core syntax of Scala (i.e. that it is not a keyword) and that it is encapsulated in some utility library is a very strong indicator that Scala discourages using <code>break</code> statements. Again we will see later how functional programming offers different techniques which avoids using <code>break</code> statements and help to create a clean logical flow.</p>\n</div>"},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"import scala.util.control.Breaks\n\nval loop = new Breaks;\n\nloop.breakable {\n    for( a <- 1 to 10) {\n        println( \"Value of a: \" + a )\n    \n        if( a >= 4 ) {\n            loop.break\n        }\n    }\n}\n","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339417_-563128587","id":"20160618-132913_1970294413","dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"text":"","dateUpdated":"2018-11-14T19:22:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542223339418_-561974341","id":"20160618-132955_1835759509","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2018-11-14T19:22:19+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:322"}],"name":"Scala Introduction - Part 1 - The Basics - Skeleton","id":"2DV3VVZ64","angularObjects":{"2DXCSQHDQ:shared_process":[],"2DXX8TZBW:shared_process":[],"2DVWRGCNK:shared_process":[],"2DY6KEB79:shared_process":[],"2DV9MSNQX:shared_process":[],"2DV8FQ6HR:shared_process":[],"2DVZNZJ1J:shared_process":[],"2DUF3PAJB:shared_process":[],"2DX5UEWSB:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}