{"paragraphs":[{"text":"%md\n# 1 Immutable Collections\n\nImmutable collections are lists, maps etc that cannot be modified once they are created. All operations which would add or remove elements return a new collection instead. Scala implements all operations very efficiently, so there is no reason to avoid immutable collections. Programmers might require a new way of thinking, but once they internalized the concept, many things get much easier.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>1 Immutable Collections</h1>\n<p>Immutable collections are lists, maps etc that cannot be modified once they are created. All operations which would add or remove elements return a new collection instead. Scala implements all operations very efficiently, so there is no reason to avoid immutable collections. Programmers might require a new way of thinking, but once they internalized the concept, many things get much easier.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713745_448224782","id":"20160618-172534_35131859","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1087"},{"text":"%md\n## 1.1 Ranges\n\nPossibly the simplest collection is  a range which contains some numbers.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1.1 Ranges</h2>\n<p>Possibly the simplest collection is a range which contains some numbers.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713761_429756835","id":"20160619-064134_2071814267","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1088"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713768_427063593","id":"20160619-064144_1839541272","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1089"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713777_435912817","id":"20160619-064153_1827461776","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1090"},{"text":"%md\nA `Range` object can also be created by using the static `apply` method:","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A <code>Range</code> object can also be created by using the static <code>apply</code> method:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713782_435528068","id":"20181112-165940_310175072","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1091"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713785_432834826","id":"20160619-064212_998052812","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1092"},{"text":"%md\nScala also allows to specify the stepsize between the elements in a range","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Scala also allows to specify the stepsize between the elements in a range</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713790_432450077","id":"20181112-170025_1370381650","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1093"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713796_514786342","id":"20160619-064223_1003113605","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1094"},{"text":"%md\n## 1.2 Sequences\n\nSince numbers are not sufficient for anything except simple counting, sequences (`Seq`) offer the ability to store objects. In Scala `Seq` denotes an interface and `List` is one specific implementation, while in Java `java.util.List` denotes the interface and for example `LinkedList` denotes one specific implementation.","dateUpdated":"2019-04-15T12:13:52+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1.2 Sequences</h2>\n<p>Since numbers are not sufficient for anything except simple counting, sequences (<code>Seq</code>) offer the ability to store objects. In Scala <code>Seq</code> denotes an interface and <code>List</code> is one specific implementation, while in Java <code>java.util.List</code> denotes the interface and for example <code>LinkedList</code> denotes one specific implementation.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713803_513632095","id":"20160619-060448_1739451758","dateCreated":"2019-04-15T09:48:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1095","user":"anonymous","dateFinished":"2019-04-15T12:13:52+0000","dateStarted":"2019-04-15T12:13:52+0000"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713812_520942324","id":"20160619-062500_1197938739","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1096"},{"text":"%md\nScala also supports another way of specifying a list using double colons (`::`)) together with a not-in-list element (`Nil`) as end marker.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Scala also supports another way of specifying a list using double colons (<code>::</code>)) together with a not-in-list element (<code>Nil</code>) as end marker.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713820_517864333","id":"20181112-170212_1814567191","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1097"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713826_504782870","id":"20160619-062524_1526632533","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1098"},{"text":"%md\nA new element can be added to then end of a list by using the `:+` operator. This will actually not modify the list itself, but return a new list containing the original elements with the specified element appended.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A new element can be added to then end of a list by using the <code>:+</code> operator. This will actually not modify the list itself, but return a new list containing the original elements with the specified element appended.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713834_501704879","id":"20181112-170100_1162738461","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1099"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713843_510554104","id":"20160619-062513_1813256359","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1100"},{"text":"%md\nScala also supports adding a new element at the beginning of a list using a similar operator.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Scala also supports adding a new element at the beginning of a list using a similar operator.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713848_507091364","id":"20181112-170340_662065578","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1101"},{"text":"val l4123 = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713852_505552368","id":"20181112-170315_1359699972","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1102"},{"text":"%md\n### Accessing Elements\n\nIndividual elements can be accessed via their index (starting at 0). Using the function `ìsDefinedAt` you can also inquire if a value is available for a specific index (or key).","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Accessing Elements</h3>\n<p>Individual elements can be accessed via their index (starting at 0). Using the function <code>ìsDefinedAt</code> you can also inquire if a value is available for a specific index (or key).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713854_506321866","id":"20160619-074106_1687305452","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1103"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713860_490162412","id":"20160619-074034_1204169255","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1104"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713865_488238668","id":"20160619-074052_1834462124","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1105"},{"text":"%md\n## 1.3 Common Sequence Operations\n\nLists and Ranges both are special types of Sequences (`Seq`), which is the abstract concept of an ordered list of items. All types of Scala Sequences have the same methods, although their implementation might differ.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1.3 Common Sequence Operations</h2>\n<p>Lists and Ranges both are special types of Sequences (<code>Seq</code>), which is the abstract concept of an ordered list of items. All types of Scala Sequences have the same methods, although their implementation might differ.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713871_487469170","id":"20160619-063841_724578806","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1106"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713877_495933646","id":"20160619-062607_1082907838","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1107"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713882_495548897","id":"20160619-062642_2030433315","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1108"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713884_493240403","id":"20160619-062647_2144966404","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1109"},{"text":"%md\n### Creating strings\n\nAgain and again you might want to format a sequence of objects into a nice string representation. Where other languages require to write ugly for loops for inserting commas between elements, Scala provides a simple method `mkString` which automatically concetanates all elements with a user supplied separator and optionally with an opening and closing tag.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating strings</h3>\n<p>Again and again you might want to format a sequence of objects into a nice string representation. Where other languages require to write ugly for loops for inserting commas between elements, Scala provides a simple method <code>mkString</code> which automatically concetanates all elements with a user supplied separator and optionally with an opening and closing tag.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713887_493625152","id":"20180320-065653_1800322397","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1110"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713890_480158941","id":"20160619-062654_2133428485","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1111"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713892_477850447","id":"20160619-062819_1631783561","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1112"},{"text":"%md\n### Retrieving Elements\n\nIn addition to element access via the index operator, there are more methods for retrieving the first or last element, for creating sub-sequences and so on. The most famous operation (which can be used in recursive algorithms) is a decomposition of a list into a *head* element and the *tail* containing all other elements. Note that both operations do not work with an empty list.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Retrieving Elements</h3>\n<p>In addition to element access via the index operator, there are more methods for retrieving the first or last element, for creating sub-sequences and so on. The most famous operation (which can be used in recursive algorithms) is a decomposition of a list into a <em>head</em> element and the <em>tail</em> containing all other elements. Note that both operations do not work with an empty list.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713895_478235196","id":"20160619-065047_1842887545","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1113"},{"text":"val l = (0 to 10)\n// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713897_475926703","id":"20160619-065047_1189114673","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1114"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713900_474772456","id":"20160619-071344_1985052292","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1115"},{"text":"%md\nScala also supports various variations of `take`, which returns a subsequence of at most `n` elements.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Scala also supports various variations of <code>take</code>, which returns a subsequence of at most <code>n</code> elements.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713905_485160677","id":"20181112-170517_1217970940","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1116"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713910_484775928","id":"20160619-065047_130803399","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1117"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713916_480928439","id":"20160619-071326_724457429","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1118"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713922_566342695","id":"20160619-071414_1780365131","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1119"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713926_564803699","id":"20160619-071436_1385030795","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1120"},{"text":"%md\n### Example for `head` and `tail`\n\nThe two methods `head` and `tail` often are used in recursive algorithms. Here we present a simple implementation of `foreach` without actually using `foreach`.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Example for <code>head</code> and <code>tail</code></h3>\n<p>The two methods <code>head</code> and <code>tail</code> often are used in recursive algorithms. Here we present a simple implementation of <code>foreach</code> without actually using <code>foreach</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713928_562495206","id":"20170129-114347_721814507","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1121"},{"text":"def foreach(seq: Seq[Int], fn:(Int)=>Unit) : Unit = {\n  // YOUR CODE HERE  \n}\n  \nforeach(List(1, 9, 2, 8, 3, 7, 4), println)","dateUpdated":"2019-04-15T09:52:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713932_560956210","id":"20170129-114406_617805113","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1122"},{"text":"%md\n# 2 Operations on Collections\n\nScala (as most other functional programming languages) offers many powerful operations in conjunction with collections. These operations are available not only for ranges, but for almost all collections like `Seq`, `List`, `Array`, `Map`, `Set` and some more. Using these methods oftern replace classic `for` loops and is the preferred way of iterating over all elements. Depending on your needs different types of methods provide different operations. We'll discuss the most common and important ones in the following paragraphs.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>2 Operations on Collections</h1>\n<p>Scala (as most other functional programming languages) offers many powerful operations in conjunction with collections. These operations are available not only for ranges, but for almost all collections like <code>Seq</code>, <code>List</code>, <code>Array</code>, <code>Map</code>, <code>Set</code> and some more. Using these methods oftern replace classic <code>for</code> loops and is the preferred way of iterating over all elements. Depending on your needs different types of methods provide different operations. We&rsquo;ll discuss the most common and important ones in the following paragraphs.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713938_572498677","id":"20180321-061435_2096659814","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1123"},{"text":"%md\n## 2.1 Executing a Function on all Elements\n\nUsing the `foreach` method of a collection allows the execution of a Scala function on every item in the collection. The result of the function is ignored and `foreach` does also return nothing. This way it is well suited for simple tasks like printing all elements onto the console or mybe for writing elements to a file on disk.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.1 Executing a Function on all Elements</h2>\n<p>Using the <code>foreach</code> method of a collection allows the execution of a Scala function on every item in the collection. The result of the function is ignored and <code>foreach</code> does also return nothing. This way it is well suited for simple tasks like printing all elements onto the console or mybe for writing elements to a file on disk.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713946_569420686","id":"20160619-084112_2079044468","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1124"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713951_567496941","id":"20160619-084158_1539762657","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1125"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713955_553645981","id":"20160619-084140_332095707","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1126"},{"text":"%md\n## 2.2 Simple Transformations\n\nScala (like other functional programming langues) provides very simple means for performing an element-wise transformation of a sequence. Where other non-functional languages require for-loops, Scala uses an approach via the `map` method which is more concise than manually iterating over all elements.","dateUpdated":"2019-04-15T12:12:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.2 Simple Transformations</h2>\n<p>Scala (like other functional programming langues) provides very simple means for performing an element-wise transformation of a sequence. Where other non-functional languages require for-loops, Scala uses an approach via the <code>map</code> method which is more concise than manually iterating over all elements.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713959_552106985","id":"20160619-062831_1040105825","dateCreated":"2019-04-15T09:48:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1127","user":"anonymous","dateFinished":"2019-04-15T12:12:34+0000","dateStarted":"2019-04-15T12:12:34+0000"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713965_548259496","id":"20160619-063917_580038831","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1128"},{"text":"%md\n### Flattening\n\nSometimes a transformation in a `map` operation does not return a single element, but instead a list of elements. Still in many cases the complete end-result should be a simple non-nested list of items. This is where `flatMap` comes into play.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Flattening</h3>\n<p>Sometimes a transformation in a <code>map</code> operation does not return a single element, but instead a list of elements. Still in many cases the complete end-result should be a simple non-nested list of items. This is where <code>flatMap</code> comes into play.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713973_557493470","id":"20180318-175213_695275500","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1129"},{"text":"val text = Seq(\n        \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam \",\n        \"nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam\",\n        \"erat, sed diam voluptua. At vero eos et accusam et justo duo dolores\"\n    )\n","user":"anonymous","dateUpdated":"2019-04-15T10:03:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555322588393_-1055488290","id":"20190415-100308_2014406167","dateCreated":"2019-04-15T10:03:08+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10068"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713978_557108721","id":"20160619-064110_297712757","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1130"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713981_554415479","id":"20160619-064428_235570651","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1131"},{"text":"%md\n## 2.3 List Comprehensions using for loops\n\nActually Scala also supports something like Python list comprehension, i.e. iterating over all elements with a `for` statement, and returning a new collection. In order to transform a collection elementwise into a new collection with a `for` loop instead of the `map` method you only have to use the keyword `yield` for specifying the new element. Internally scala will translate such a `for` loop again into a `map` invocation, so it is only syntactic sugar. In most cases using `map` would be the preferred way, since using `for` loops is not with the original spirit of Scala.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.3 List Comprehensions using for loops</h2>\n<p>Actually Scala also supports something like Python list comprehension, i.e. iterating over all elements with a <code>for</code> statement, and returning a new collection. In order to transform a collection elementwise into a new collection with a <code>for</code> loop instead of the <code>map</code> method you only have to use the keyword <code>yield</code> for specifying the new element. Internally scala will translate such a <code>for</code> loop again into a <code>map</code> invocation, so it is only syntactic sugar. In most cases using <code>map</code> would be the preferred way, since using <code>for</code> loops is not with the original spirit of Scala.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713984_540949267","id":"20170218-131134_232997169","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1132"},{"text":"val result = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713986_541718765","id":"20170218-131115_2047885850","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1133"},{"text":"val result = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713989_539025523","id":"20170218-131110_1306144078","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1134"},{"text":"%md\n## 2.4 Filtering\n\nAnother simple but important function is filtering, which allows to throw away elements of a collection. The `filter` method takes a single function as its argument, which is used as a predicate. The predicate maps every element to `true` or `false` and `filter` will keep only these elements with the predicate being true. Again, since the collection itself is immtable, `filter` actually returns a new collection and the original one stays untouched.","dateUpdated":"2019-04-15T09:48:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.4 Filtering</h2>\n<p>Another simple but important function is filtering, which allows to throw away elements of a collection. The <code>filter</code> method takes a single function as its argument, which is used as a predicate. The predicate maps every element to <code>true</code> or <code>false</code> and <code>filter</code> will keep only these elements with the predicate being true. Again, since the collection itself is immtable, <code>filter</code> actually returns a new collection and the original one stays untouched.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321713993_537486527","id":"20160619-075410_1828989098","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1135"},{"text":"val evens = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321713997_535947531","id":"20160619-075436_1273909358","dateCreated":"2019-04-15T09:48:33+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1136"},{"text":"val numEvens = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714002_547874747","id":"20170218-130630_81275972","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1137"},{"text":"%md\n### Check Condition\n\nThe methods `forall` and `exists` can be used to inspect all elements and test if all/one element fullfills a specific condition.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Check Condition</h3>\n<p>The methods <code>forall</code> and <code>exists</code> can be used to inspect all elements and test if all/one element fullfills a specific condition.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714008_544027258","id":"20180318-172438_301329958","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1138"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714013_542103514","id":"20180318-172510_1756317861","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1139"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714020_527098307","id":"20180321-062026_1122790074","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1140"},{"text":"%md\n## 2.5 Collect & Partial Functions\n\nIn some cases you might want to filter and transform elements in a single step, most commonly in conjunction with matching. A `match` expression does not need to include a `case` for every possible logical case. But what will Scala do with values that cannot be matched? Actually Scala will thow a `MatchError` for any value in a `match` operation with no suitable `case`. But at the same time, Scala also offers the concept of so called *partial functions*, which are Scala functions which are not defined for every possible value for their parameters. From this point of view, an incomplete `match` is just such a partial function.\n\nCollections provide a method `collect` in addition to `map`, which works seamlessly with partial functions. `collect` will transform all values where the partial function is defined at and it will filter out all other values. This is very handy for complex `match` operations where a preceding `filter` opreation would duplicate logic and therefore violate the DRY approach (Don't Repeat Yourself).","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.5 Collect &amp; Partial Functions</h2>\n<p>In some cases you might want to filter and transform elements in a single step, most commonly in conjunction with matching. A <code>match</code> expression does not need to include a <code>case</code> for every possible logical case. But what will Scala do with values that cannot be matched? Actually Scala will thow a <code>MatchError</code> for any value in a <code>match</code> operation with no suitable <code>case</code>. But at the same time, Scala also offers the concept of so called <em>partial functions</em>, which are Scala functions which are not defined for every possible value for their parameters. From this point of view, an incomplete <code>match</code> is just such a partial function.</p>\n<p>Collections provide a method <code>collect</code> in addition to <code>map</code>, which works seamlessly with partial functions. <code>collect</code> will transform all values where the partial function is defined at and it will filter out all other values. This is very handy for complex <code>match</code> operations where a preceding <code>filter</code> opreation would duplicate logic and therefore violate the DRY approach (Don&rsquo;t Repeat Yourself).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714027_525944060","id":"20160619-075155_1355762506","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1141"},{"text":"(1 to 10) map { case i:Int if i%2==0 => i/2 }","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714033_534408536","id":"20160619-075222_1256662395","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1142"},{"text":"(1 to 10) collect { case i:Int if i%2==0 => i/2 }","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714037_532869540","id":"20160619-074637_1204436823","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1143"},{"text":"%md\nExplicitly defining a partial function cannot be done via the `def` keyword - this will always create a normal function. Instead you have to create a value which holds an anonymous partial function.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Explicitly defining a partial function cannot be done via the <code>def</code> keyword - this will always create a normal function. Instead you have to create a value which holds an anonymous partial function.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714038_534023787","id":"20180321-063335_1059111004","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1144"},{"text":"val pfn:PartialFunction[Int,Int]  = { case i:Int if i%2==0 => i/2 }","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714041_531330545","id":"20160619-074809_1703548144","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1145"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714045_529791549","id":"20160619-075327_1830105658","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1146"},{"text":"%md\n## 2.6 Zipping\n\nAnother operation which can be usefuly from time to time is `zip`. This will interleave two collections by creating tuples, each with one element from each collection. Collections need to have the same size in order for `zip` to work.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2.6 Zipping</h2>\n<p>Another operation which can be usefuly from time to time is <code>zip</code>. This will interleave two collections by creating tuples, each with one element from each collection. Collections need to have the same size in order for <code>zip</code> to work.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714048_614821056","id":"20160619-073632_1943757960","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1147"},{"text":"val names = Seq(\"Alice\", \"Bob\", \"Eve\")\nval cities = Seq(\"Frankfurt\", \"Berlin\", \"Hamburg\")\n\n// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714053_612897311","id":"20160619-073647_966259938","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1148"},{"text":"%md\nA special variant of `zip` is `zipWithIndex` which creates tuples from a single collections, where each tuple has the elements index as its second element. This is very useful in cases where you need the index of every element.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A special variant of <code>zip</code> is <code>zipWithIndex</code> which creates tuples from a single collections, where each tuple has the elements index as its second element. This is very useful in cases where you need the index of every element.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714056_611743065","id":"20180321-063714_1961155789","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1149"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714059_612127814","id":"20160619-073801_1100798904","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1150"},{"text":"%md\nAs an example for `zipWithIndex`, we'll create a function which converts every letter of a string to lower case or upper case depending on its index position in the string.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>As an example for <code>zipWithIndex</code>, we&rsquo;ll create a function which converts every letter of a string to lower case or upper case depending on its index position in the string.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714063_610588818","id":"20180321-063811_2065437366","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1151"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714070_620207541","id":"20160619-073817_1526363907","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1152"},{"text":"%md\n# 3 Aggregations\n\nSo far we have used transformations, which work independently on every element. For example `map` is a 1:1 transformation, `flatMap` is a 1:n transformation, `filter` and `collect` are also 1:n transformations (with n being 0 or 1). Scala also offers aggregations, which coalesce all elements of a collection into a single result value. This can be quite useful not only for arithmetic use cases, but also for more complex examples.\n\nFirst let us have a look at simple standard aggregations like `min`, `max` and `sum`. These are available for all collections with appropriate data types (i.e. comparable types will provide `min` and `max` and arithemtic data types will provide `sum`).","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>3 Aggregations</h1>\n<p>So far we have used transformations, which work independently on every element. For example <code>map</code> is a 1:1 transformation, <code>flatMap</code> is a 1:n transformation, <code>filter</code> and <code>collect</code> are also 1:n transformations (with n being 0 or 1). Scala also offers aggregations, which coalesce all elements of a collection into a single result value. This can be quite useful not only for arithmetic use cases, but also for more complex examples.</p>\n<p>First let us have a look at simple standard aggregations like <code>min</code>, <code>max</code> and <code>sum</code>. These are available for all collections with appropriate data types (i.e. comparable types will provide <code>min</code> and <code>max</code> and arithemtic data types will provide <code>sum</code>).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714075_618283796","id":"20160619-081814_1050781522","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1153"},{"text":"val range = 1 to 1000\n\nprintln\nprintln (\"min = \" + range.min)\nprintln (\"max = \" + range.max)\nprintln (\"sum = \" + range.sum)","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714079_616744800","id":"20160619-081841_789914875","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1154"},{"text":"%md\n## 3.1 Reduce and Fold\n\nIn addition to the built in aggregations, Scala also provides methods for ceating custom aggregations. The simplest one is the `reduce` method, which starts with the first element in a collection and incrementally *adds* all elements to the first one.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3.1 Reduce and Fold</h2>\n<p>In addition to the built in aggregations, Scala also provides methods for ceating custom aggregations. The simplest one is the <code>reduce</code> method, which starts with the first element in a collection and incrementally <em>adds</em> all elements to the first one.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714083_602893840","id":"20180321-064307_10162934","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1155"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714087_601354844","id":"20160619-082845_1009631076","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1156"},{"text":"%md\n`fold` is a slight variation of `reduce` which allows to specify a different start value.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><code>fold</code> is a slight variation of <code>reduce</code> which allows to specify a different start value.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714089_599046351","id":"20180321-064416_1113957689","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1157"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714090_600200598","id":"20160619-083929_1234061332","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1158"},{"text":"%md\nOne notable difference between `reduce` and `fold` is that `reduce` does not work on an empty collection (since it requires at least one element as the return value), while `fold` will work nicely on empty collections.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>One notable difference between <code>reduce</code> and <code>fold</code> is that <code>reduce</code> does not work on an empty collection (since it requires at least one element as the return value), while <code>fold</code> will work nicely on empty collections.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714092_597892104","id":"20180321-064745_787401944","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1159"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714094_598661602","id":"20180321-064719_984584047","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1160"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714096_608665074","id":"20180321-064734_1676015405","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1161"},{"text":"%md\n`reduce` can be seen as a special case of `fold` with the start value of `head` folded over `tail`","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><code>reduce</code> can be seen as a special case of <code>fold</code> with the start value of <code>head</code> folded over <code>tail</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714097_608280325","id":"20180321-064631_548930418","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1162"},{"text":"def my_reduce(seq:Seq[Int])(fn:(Int,Int) => Int) = {\n    seq.tail.fold(seq.head)(fn)\n}\n\nmy_reduce(range)(_ + _)","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714099_609049822","id":"20180321-064500_498037097","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1163"},{"text":"%md\n## 3.2 foldLeft\n\nA more powerful and flexible variant of aggregation is `foldLeft`. Both `reduce` and `fold` actually require that the aggragted value has the same type as the elements in a collection. Often this is a severe limitation. In these situations `foldLeft` comes to the resuce which offers a more flexible interface.\n\nFor example if we wanted to calculate the average value of some sequence of numbers, we need to aggregate both the sum of all elements and the count. This is done in the next example, where we use a tuple as the aggregation state with the first entry being the sum and the second entry being the count.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3.2 foldLeft</h2>\n<p>A more powerful and flexible variant of aggregation is <code>foldLeft</code>. Both <code>reduce</code> and <code>fold</code> actually require that the aggragted value has the same type as the elements in a collection. Often this is a severe limitation. In these situations <code>foldLeft</code> comes to the resuce which offers a more flexible interface.</p>\n<p>For example if we wanted to calculate the average value of some sequence of numbers, we need to aggregate both the sum of all elements and the count. This is done in the next example, where we use a tuple as the aggregation state with the first entry being the sum and the second entry being the count.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714101_606741329","id":"20180321-064905_1449105546","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1164"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714102_607895576","id":"20160619-083947_980207953","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1165"},{"text":"val agg = range.foldLeft((0,0)) { (agg,value) => (agg._1 + value, agg._2 + 1) }\nval avg = agg._1.toFloat / agg._2.toFloat","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714104_605587082","id":"20160619-084024_1949885029","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1166"},{"text":"%md\n## 3.3 aggregate\n\nIn addition to `foldLeft` there is also the even more tweakable method `aggregate` which is tweaked for possibly parallel implementation. In this scenario we have to imagine that the whole range of elements is split up into multiple subranges. Each subrange will be worked on in parallel and will return a partial result. In order to combine all partial results we need to specify an additional function.\n\nIn our example, we need to specify a function which takes two tuples (the partial results of the parallel aggregations) and combines them into a new (possibly still partial) result.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3.3 aggregate</h2>\n<p>In addition to <code>foldLeft</code> there is also the even more tweakable method <code>aggregate</code> which is tweaked for possibly parallel implementation. In this scenario we have to imagine that the whole range of elements is split up into multiple subranges. Each subrange will be worked on in parallel and will return a partial result. In order to combine all partial results we need to specify an additional function.</p>\n<p>In our example, we need to specify a function which takes two tuples (the partial results of the parallel aggregations) and combines them into a new (possibly still partial) result.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714106_606356580","id":"20180321-064928_1066868182","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1167"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714108_604048087","id":"20160619-082901_1678080773","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1168"},{"text":"val agg = range.aggregate((0,0))(\n    { (agg,value) => (agg._1 + value, agg._2 + 1) },\n    { (left,right) => (left._1 + right._1 , left._2 + right._2)}\n)\nval avg = agg._1.toFloat / agg._2.toFloat","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714110_604817585","id":"20160619-083615_1052040522","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1169"},{"text":"%md\n# Intermission - Approximating Pi Exercise","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Intermission - Approximating Pi Exercise</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714112_590197126","id":"20170218-130709_806755551","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1170"},{"text":"%md\n# 4 Grouped Transformations\n\nSimilar to data processing frameworks (SQL, or of course also Spark), Scala also offers a `groupBy` method. In contrast to classical SQL, a `groupBy` does not require an aggregation. Instead it will create a Scala `Map` with the grouping expression being the key and all values for a specific key are provided as a value list for each key.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>4 Grouped Transformations</h1>\n<p>Similar to data processing frameworks (SQL, or of course also Spark), Scala also offers a <code>groupBy</code> method. In contrast to classical SQL, a <code>groupBy</code> does not require an aggregation. Instead it will create a Scala <code>Map</code> with the grouping expression being the key and all values for a specific key are provided as a value list for each key.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714114_590966624","id":"20170218-130746_802683154","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1171"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714116_588658131","id":"20160619-084507_1873835415","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1172"},{"text":"%md\nWhen we now want to perform an aggregation on the values, we can use a `map` or in this case a `mapValues` which allows us to transform the list of values to an aggregate. For example if we can sum up all values for each key: ","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>When we now want to perform an aggregation on the values, we can use a <code>map</code> or in this case a <code>mapValues</code> which allows us to transform the list of values to an aggregate. For example if we can sum up all values for each key:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714118_589427629","id":"20180321-070942_979523573","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1173"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714120_587119135","id":"20160619-084612_1149096691","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1174"},{"text":"%md\n# 5 Maps\n\nUsing `groupBy` implicitly brought us directly to Scala `Map`s. These work like C++ maps or Python dictionaries, i.e. they provide key-value pairs with access to elements via the key.\n\nA Map can be created from key-value pairs represented by tuples. Since most pairs are used as key-value pairs, Scala also offers an alternative syntax for defining pairs with an arrow `->`.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>5 Maps</h1>\n<p>Using <code>groupBy</code> implicitly brought us directly to Scala <code>Map</code>s. These work like C++ maps or Python dictionaries, i.e. they provide key-value pairs with access to elements via the key.</p>\n<p>A Map can be created from key-value pairs represented by tuples. Since most pairs are used as key-value pairs, Scala also offers an alternative syntax for defining pairs with an arrow <code>-&gt;</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714122_587888633","id":"20160619-084713_296513565","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1175"},{"text":"val personToAge = Map((\"Alice\", 23), (\"Bob\", 21))","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714123_587503884","id":"20160619-084811_1943201975","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1176"},{"text":"val personToAge = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714125_585195391","id":"20160619-084728_1585437619","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1177"},{"text":"%md\nIt is also possible to convert a sequence of pairs to a `Map` with the method `toMap`.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>It is also possible to convert a sequence of pairs to a <code>Map</code> with the method <code>toMap</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714127_585964888","id":"20180321-071308_1622644156","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1178"},{"text":"val personToAge = Seq(\"Alice\" -> 23, \"Bob\" -> 21).toMap","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714129_595968360","id":"20160619-084928_188432658","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1179"},{"text":"%md\n## 5.1 Modifying Maps\nAlthough a Scala `Map` is immutable, you can still add and remove elemebts, but these operations will return new maps. But be assured that internally Scala is optimized for this kind of usage, so there is no need to use mutable collections in most cases.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>5.1 Modifying Maps</h2>\n<p>Although a Scala <code>Map</code> is immutable, you can still add and remove elemebts, but these operations will return new maps. But be assured that internally Scala is optimized for this kind of usage, so there is no need to use mutable collections in most cases.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714132_594814113","id":"20181110-173442_176278429","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1180"},{"text":"%md\nMaps can be modified by using `+` for adding new elements and `-` for removing elements. Again each operation will actually return a new `Map`, since we are still working with immutable collections.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Maps can be modified by using <code>+</code> for adding new elements and <code>-</code> for removing elements. Again each operation will actually return a new <code>Map</code>, since we are still working with immutable collections.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714134_595583611","id":"20180321-071356_334556597","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1181"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714136_593275118","id":"20160619-085529_1923037455","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1182"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714138_594044615","id":"20160619-085716_356838640","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1183"},{"text":"%md\n## 5.2 Accessing Map Elements\n\nNot surprsingly all elements of a `Map` can be accessed via their keys. This is done again directly as if it was a function call on the map itself.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>5.2 Accessing Map Elements</h2>\n<p>Not surprsingly all elements of a <code>Map</code> can be accessed via their keys. This is done again directly as if it was a function call on the map itself.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714139_593659866","id":"20160619-084910_1993407888","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1184"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714142_592505620","id":"20160619-084845_749470716","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1185"},{"text":"%md\nIf a key is used which is not present in the `Map`, Scala will throw a `NoSuchElementException`.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If a key is used which is not present in the <code>Map</code>, Scala will throw a <code>NoSuchElementException</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714143_592120871","id":"20180321-071625_524598217","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1186"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714145_577500413","id":"20160619-084853_1948397321","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1187"},{"text":"%md\nIn order to avoid handling exceptions, you can use the method `getOrElse` which allows you to specify a default value for unknown keys.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In order to avoid handling exceptions, you can use the method <code>getOrElse</code> which allows you to specify a default value for unknown keys.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714147_578269910","id":"20180321-071803_523076664","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1188"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714149_575961417","id":"20180321-071820_1563934335","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1189"},{"text":"%md\nA different alternative is that you first check if a specific key exists. This can be done by using either the `contains` method or `isDefinedAt`. The later indicates that a `Map` actually can be seen as a partially defined function.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A different alternative is that you first check if a specific key exists. This can be done by using either the <code>contains</code> method or <code>isDefinedAt</code>. The later indicates that a <code>Map</code> actually can be seen as a partially defined function.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714150_577115664","id":"20180321-071909_839116483","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1190"},{"text":"personToAge.isDefinedAt(\"Fred\")\npersonToAge.isDefinedAt(\"Alice\")","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714152_574807170","id":"20180321-071932_1437871070","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1191"},{"text":"personToAge.contains(\"Fred\")\npersonToAge.contains(\"Alice\")","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714154_575576668","id":"20180321-071956_1695134652","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1192"},{"text":"%md\nYou can also directly access the list of all keys and values of a `Map` as a set or sequence.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>You can also directly access the list of all keys and values of a <code>Map</code> as a set or sequence.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714156_573268175","id":"20180321-071719_1996856968","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1193"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714158_574037673","id":"20160619-085416_2065383526","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1194"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714159_573652924","id":"20160619-085430_875058458","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1195"},{"text":"%md\n# 6 Sets\n\nA `Set` is a collection of items without duplicates. That is if you insert the same item twice or multiple equivalent items, only a single instance is stored in a set. Like Scala `List` or `Seq` collections, a `Set` also preserves the order of insertion.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>6 Sets</h1>\n<p>A <code>Set</code> is a collection of items without duplicates. That is if you insert the same item twice or multiple equivalent items, only a single instance is stored in a set. Like Scala <code>List</code> or <code>Seq</code> collections, a <code>Set</code> also preserves the order of insertion.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714161_583656395","id":"20160619-085758_670259118","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1196"},{"text":"val persons = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714163_584425893","id":"20160619-085810_1615137296","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1197"},{"text":"%md\nItems can be added to or removed from sets by using arithmetic operators `+` and `-`.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Items can be added to or removed from sets by using arithmetic operators <code>+</code> and <code>-</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714165_582117399","id":"20180321-174102_92713607","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1198"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714167_582886897","id":"20160619-085841_590194714","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1199"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714168_580963153","id":"20160619-085856_1165872605","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1200"},{"text":"%md\nWhen used as a function, a `Set` simply returns `true` if an item is contained or otherwise `false`.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>When used as a function, a <code>Set</code> simply returns <code>true</code> if an item is contained or otherwise <code>false</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714170_581732651","id":"20180321-174022_1276577555","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1201"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714172_579424157","id":"20160619-085908_2017447609","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1202"},{"text":"%md\n# 7 Special Collection: Option\n\nA Scala `Option` is a special class which is a container for one or no element. It can be used for optional values and also implements collection-like methods like `map`, `flatMap`, `filter` and some more. Although stricly speaking an `Option` is not a collection (since it does not implement corresponding traits) it can very well be used as one in many cases.\n\nThe class `Option` itself is only an abstract base class with the two specialisations `Some` and `Ǹone`. These can be used as in the following examples:","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>7 Special Collection: Option</h1>\n<p>A Scala <code>Option</code> is a special class which is a container for one or no element. It can be used for optional values and also implements collection-like methods like <code>map</code>, <code>flatMap</code>, <code>filter</code> and some more. Although stricly speaking an <code>Option</code> is not a collection (since it does not implement corresponding traits) it can very well be used as one in many cases.</p>\n<p>The class <code>Option</code> itself is only an abstract base class with the two specialisations <code>Some</code> and <code>Ǹone</code>. These can be used as in the following examples:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714173_579039408","id":"20160619-082436_770221513","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1203"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714175_579808906","id":"20160619-090315_642879708","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1204"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714177_269701293","id":"20160619-090328_151955080","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1205"},{"text":"%md\n## 7.1 Use Case: Maps\nOptions naturally arise whenever operations might not return a valid value. For example a Scala `Map` cannot return a value for an unknown key. In this sitaution an `Option` is used with the `get` method to encapsulate the information if the desired key was found or not.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>7.1 Use Case: Maps</h2>\n<p>Options naturally arise whenever operations might not return a valid value. For example a Scala <code>Map</code> cannot return a value for an unknown key. In this sitaution an <code>Option</code> is used with the <code>get</code> method to encapsulate the information if the desired key was found or not.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714179_270470790","id":"20160619-090212_1678245223","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1206"},{"text":"val personToAge = Map((\"Alice\", 23), (\"Bob\", 21))\n\n// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714180_268547046","id":"20160619-090021_1681308095","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1207"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714182_269316544","id":"20160619-090116_1093437267","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1208"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres166: Int = 23\n"}]},"apps":[],"jobName":"paragraph_1555321714184_267008050","id":"20160619-090123_45683133","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1209"},{"text":"personToAge.get(\"Eve\").getOrElse(-1)","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714186_267777548","id":"20160619-090146_1418376021","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1210"},{"text":"%md\n## 7.2 Using Collection methods wih Options\nAlthough technically speaking, `Option`s are not Scala collections, they provide lots of similar functionality. By making clever use of these methods, complicated chains of if/then clauses can be replaced by a flow of transformations.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>7.2 Using Collection methods wih Options</h2>\n<p>Although technically speaking, <code>Option</code>s are not Scala collections, they provide lots of similar functionality. By making clever use of these methods, complicated chains of if/then clauses can be replaced by a flow of transformations.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714188_265469055","id":"20181112-170901_63455272","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1211"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555321714190_266238552","id":"20170130-092138_495384102","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1212"},{"text":"personToAge.get(\"Bob\").foreach(age => println(s\"$age\"))","dateUpdated":"2019-04-15T09:48:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714192_276242024","id":"20181112-170728_65304967","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1213"},{"text":"%md\n#### Using map methods\n\nAs noted above, `Option` classes also implement `map` and `flatMap` methods, which also support elegant chaining of multiple operations without explicitly checking if the `Option` contains a value or not.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Using map methods</h4>\n<p>As noted above, <code>Option</code> classes also implement <code>map</code> and <code>flatMap</code> methods, which also support elegant chaining of multiple operations without explicitly checking if the <code>Option</code> contains a value or not.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714194_277011522","id":"20160619-091243_2127254258","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1214"},{"text":"def half(i:Int) = i match { \n    case i:Int if i%2 == 0 => Some(i/2) \n    case _ => None \n}","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nhalf: (i: Int)Option[Int]\n"}]},"apps":[],"jobName":"paragraph_1555321714196_274703028","id":"20160619-090358_2042231414","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1215"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714198_275472526","id":"20160619-091303_2058151772","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1216"},{"text":"half(2).map(_*3).filter(_ % 2 == 0).map(_ / 2)","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714200_273164033","id":"20160619-091317_1239401787","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1217"},{"text":"%md\n#### Using flatMap with Options\n\nWhen Options are created inside sequence transformations, using `flatMap` will automatically unpack all options which contain some values. Let us look at the following example where a method returns an option and is used for transforming elements of a number range. ","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Using flatMap with Options</h4>\n<p>When Options are created inside sequence transformations, using <code>flatMap</code> will automatically unpack all options which contain some values. Let us look at the following example where a method returns an option and is used for transforming elements of a number range.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714202_273933530","id":"20160619-090336_141233239","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1218"},{"text":"(1 to 10).flatMap(half)","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714203_273548782","id":"20160619-090932_847593596","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1219"},{"text":"%md\n### Convert to Sequence\nNaturally an `Option` can also be converted to a Scala sequence - either a one-element sequence or an empty sequence.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Convert to Sequence</h3>\n<p>Naturally an <code>Option</code> can also be converted to a Scala sequence - either a one-element sequence or an empty sequence.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714205_271240288","id":"20180321-180011_1879158698","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1220"},{"text":"half(2).toSeq","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714206_272394535","id":"20160619-091349_1520570793","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1221"},{"text":"%md\n## 7.3 Using pattern matching with `Option`s\n\nA Scala `Option` is a perfect candidate to use in pattern matching, like in the following example.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>7.3 Using pattern matching with <code>Option</code>s</h2>\n<p>A Scala <code>Option</code> is a perfect candidate to use in pattern matching, like in the following example.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714207_272009786","id":"20180321-175302_1744265196","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1222"},{"text":"def printAge(name:String) = {\n    personToAge.get(name) match {\n        // YOUR CODE HERE\n    }\n}\n\nprintAge(\"Alice\")\nprintAge(\"Eve\")","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714209_257389328","id":"20170130-092108_1927839560","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1223"},{"text":"%md\n# 8 Mutable Collections\n\nSo far we have been using immutable collections, i.e. collections where each modification would return a new collection. But sometimes we want to work with mutable collections. This is particularily useful when building new collections.","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>8 Mutable Collections</h1>\n<p>So far we have been using immutable collections, i.e. collections where each modification would return a new collection. But sometimes we want to work with mutable collections. This is particularily useful when building new collections.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714210_258543574","id":"20160619-065047_1358513749","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1224"},{"text":"%md\n## 8.1 Arrays, Lists and Sequences","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>8.1 Arrays, Lists and Sequences</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714212_256235081","id":"20160619-092316_141616051","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1225"},{"text":"import scala.collection.mutable\n\n// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714214_257004579","id":"20160619-091948_526877963","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1226"},{"text":"// YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714215_256619830","id":"20160619-092036_1336595769","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1227"},{"text":"list += 5","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714217_254311337","id":"20160619-092107_1912931938","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1228"},{"text":"list -= 3","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714219_255080834","id":"20160619-092127_1888393889","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1229"},{"text":"list.toList","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714221_252772341","id":"20160619-092718_488020296","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1230"},{"text":"%md\n## 8.2 Maps","dateUpdated":"2019-04-15T09:48:34+0000","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>8.2 Maps</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1555321714223_253541839","id":"20160619-092337_562470896","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1231"},{"text":"val map = // YOUR CODE HERE","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714225_263545310","id":"20160619-092158_1004036203","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1232"},{"text":"map(\"Alice\") = 24\nmap","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714226_264699557","id":"20160619-092230_1816095361","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1233"},{"text":"map(\"Eve\") = 32\nmap","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714228_262391063","id":"20160619-092249_1407841305","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1234"},{"text":"map.toMap","dateUpdated":"2019-04-15T09:48:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1555321714230_263160561","id":"20160619-092353_510007708","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1235"},{"text":"","dateUpdated":"2019-04-15T09:48:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1555321714235_261236817","id":"20160619-072503_1507655032","dateCreated":"2019-04-15T09:48:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1236"}],"name":"Scala Introduction - Part 2 - Collections - Skeleton","id":"2E8EE36G4","angularObjects":{"2D8DSN3N4:shared_process":[],"2D7W55G1J:shared_process":[],"2DA3X6UGN:shared_process":[],"2D9HTU14T:shared_process":[],"2DBA6X8JB:shared_process":[],"2DBSCZXK2:shared_process":[],"2D9M853BP:shared_process":[],"2DAXFQ4X2:shared_process":[],"2DB3TEGGU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}