{"paragraphs":[{"text":"%md\n# Basic Classes\n\nClasses are the fundamental element of object-oriented programming (OOP). Normally this is in contrast to functional programming, but Scala supports and integrates both approaches (functional and object oriented programming) very well.\n\nThe basic idea of a class is to provide a template for constructing similar object which encapsulate some state and provide operations to modify the state. Commonly *operations* are called *methods* and these are only available for instances of the specific class. Formally *modifying* state is strongly against functional idioms, but modern approaches follow a middle way, where instances of classes are immutable and any modification actually creates a new instance. We already saw this concept with immutable collection classes.\n\nThe following example creates a simple class representing some point in a two-dimensional space. It contains two so called methods `move` and `toString`.","dateUpdated":"2018-03-24T17:07:51+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Basic Classes</h1>\n<p>Classes are the fundamental element of object-oriented programming (OOP). Normally this is in contrast to functional programming, but Scala supports and integrates both approaches (functional and object oriented programming) very well.</p>\n<p>The basic idea of a class is to provide a template for constructing similar object which encapsulate some state and provide operations to modify the state. Commonly <em>operations</em> are called <em>methods</em> and these are only available for instances of the specific class. Formally <em>modifying</em> state is strongly against functional idioms, but modern approaches follow a middle way, where instances of classes are immutable and any modification actually creates a new instance. We already saw this concept with immutable collection classes.</p>\n<p>The following example creates a simple class representing some point in a two-dimensional space. It contains two so called methods <code>move</code> and <code>toString</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271897_-654830928","id":"20160618-134255_1167354932","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11241"},{"text":"// Declare a class called \"Point\" with a constructor with two arguments\nclass Point(x: Int, y:Int) {\n    // Define a move method which creates a new Point\n    def move(dx:Int, dy:Int) = {\n        new Point(x + dx, y + dy)\n    }\n    \n    // Define a toString methods which provides a nice representation of a Point. Since toString is\n    // already present in all classes (this is a JVM feature), we need to explicitly override the\n    // existing method.\n    override def toString = {\n        \"[x=\" + x + \",y=\" + y + \"]\"\n    }\n}\n\n// Create an instance of a point at location 3,4.\nval p1 = new Point(3,4)\n\n// Use the move method to create a new Point that is at a slightly different coordinate\nval p2 = p1.move(2,1)","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Point\np1: Point = [x=3,y=4]\np2: Point = [x=5,y=5]\n"}]},"apps":[],"jobName":"paragraph_1521911271898_-653676682","id":"20160618-134341_740746202","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11242"},{"text":"p1.x","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:72: error: type mismatch;\n found   : p1.type (with underlying type Point)\n required: ?{def x: ?}\nNote that implicit conversions are not applicable because they are ambiguous:\n both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]\n and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]\n are possible conversion functions from p1.type to ?{def x: ?}\n              p1.x\n              ^\n<console>:72: error: value x is not a member of Point\n              p1.x\n                 ^\n"}]},"apps":[],"jobName":"paragraph_1521911271899_-654061431","id":"20160618-134515_547225282","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11243"},{"text":"class Point(val x: Int, val y:Int) {\n    def move(dx:Int, dy:Int) = {\n        new Point(x + dx, y + dy)\n    }\n    \n    override def toString = {\n        \"[x=\" + x + \",y=\" + y + \"]\"\n    }\n}\n\nval p1 = new Point(3,4)\np1.x","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Point\np1: Point = [x=3,y=4]\nres1: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1521911271899_-654061431","id":"20160618-134740_1423829207","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11244"},{"text":"%md\n## Deriving Classes\n\nNew functionality can be added to a class by *subclassing*. This will create a *derived* class which inherits all methods and fields from the *base class*, but can add or change functionality. The base class is specified using the `extends` keyword. Note that it also has to receive all required arguments for its constructor. Most of the time the derived class simply will have the same parameters or some additional ones, so the parameters can simply be passed to the base class.","dateUpdated":"2018-03-24T17:16:25+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Deriving Classes</h2>\n<p>New functionality can be added to a class by <em>subclassing</em>. This will create a <em>derived</em> class which inherits all methods and fields from the <em>base class</em>, but can add or change functionality. The base class is specified using the <code>extends</code> keyword. Note that it also has to receive all required arguments for its constructor. Most of the time the derived class simply will have the same parameters or some additional ones, so the parameters can simply be passed to the base class.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271900_-655985175","id":"20160618-135443_1713638172","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11245","user":"anonymous","dateFinished":"2018-03-24T17:16:15+0000","dateStarted":"2018-03-24T17:16:15+0000"},{"text":"class Location(override val x:Int, override val y:Int, val name:String) extends Point(x,y) {\n    override def move(dx:Int, dy:Int) = {\n        new Location(x + dx, y + dy, name)\n    }\n    \n    override def toString = {\n        \"[x=\" + x + \",y=\" + y + \",name=\" + name + \"]\"\n    }\n}\n\nval l1 = new Location(3,4,\"Home\")\nval l2 = l1.move(5,9)","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Location\nwarning: previously defined object Location is not a companion to class Location.\nCompanions must be defined together; you may wish to use :paste mode for this.\nl1: Location = [x=3,y=4,name=Home]\nl2: Location = [x=8,y=13,name=Home]\n"}]},"apps":[],"jobName":"paragraph_1521911271900_-655985175","id":"20160618-134809_1508558516","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11246"},{"text":"l1.x","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res519: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1521911271900_-655985175","id":"20160618-135117_293772711","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11247"},{"text":"%md\n## Traits (similar to Interfaces)\n\nEach class can have only a single base class - this is an intended limitation of the JVM. Nevertheless a class can also inherit from so called *traits* (which are equivalent to *interfaces* in Java or other OOP programming languages.). A trait is very similar to a class, but cannot be instantiated. Instead soem class has to extend the trait and implement all methods and fields.","dateUpdated":"2018-03-24T17:18:00+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Traits (similar to Interfaces)</h2>\n<p>Each class can have only a single base class - this is an intended limitation of the JVM. Nevertheless a class can also inherit from so called <em>traits</em> (which are equivalent to <em>interfaces</em> in Java or other OOP programming languages.). A trait is very similar to a class, but cannot be instantiated. Instead soem class has to extend the trait and implement all methods and fields.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271901_-656369924","id":"20160618-142010_1334907947","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11248","user":"anonymous","dateFinished":"2018-03-24T17:18:00+0000","dateStarted":"2018-03-24T17:18:00+0000"},{"text":"trait Addressable {\n    var city:String\n    var street:String\n    \n    def getAddress = street + \"\\n\" + city\n}","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined trait Addressable\n"}]},"apps":[],"jobName":"paragraph_1521911271901_-656369924","id":"20160618-142028_1166147582","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11249"},{"text":"class Person(val name:String, val age:Int) extends Object with Addressable {\n    override var city:String = \"\"\n    override var street:String = \"\"\n}\n\nval p1 = new Person(\"Alice\", 23)\np1.city = \"Frankfurt\"\np1.street = \"Mainzer Landstraße 21\"\np1.getAddress","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Person\nwarning: previously defined object Person is not a companion to class Person.\nCompanions must be defined together; you may wish to use :paste mode for this.\np1: Person = $iwC$$iwC$Person@455963a8\np1.city: String = Frankfurt\np1.street: String = Mainzer Landstraße 21\nres49: String = \nMainzer Landstraße 21\nFrankfurt\n"}]},"apps":[],"jobName":"paragraph_1521911271902_-655215677","id":"20160618-142332_1751359293","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11250"},{"text":"%md\n## Companion Object\n\nScala does not directly provide *static methds*, i.e. methods of a class which can be invoked without an instance of the class. Instead Scala provides obejcts and specifically *companion objects* which have the same name as a class. Companion objects and classes have some intimid relation (which does not work completely in Zeppelin or other Scala REPLs).","dateUpdated":"2018-03-24T17:19:38+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Companion Object</h2>\n<p>Scala does not directly provide <em>static methds</em>, i.e. methods of a class which can be invoked without an instance of the class. Instead Scala provides obejcts and specifically <em>companion objects</em> which have the same name as a class. Companion objects and classes have some intimid relation (which does not work completely in Zeppelin or other Scala REPLs).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271902_-655215677","id":"20160618-135129_939063638","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11251","user":"anonymous","dateFinished":"2018-03-24T17:19:38+0000","dateStarted":"2018-03-24T17:19:38+0000"},{"text":"object Location {\n    def create(x:Int, y:Int, name:String) = new Location(x,y,name)\n\n    def apply(x:Int, y:Int, name:String) = create(x,y,name)\n}","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined module Location\nwarning: previously defined class Location is not a companion to object Location.\nCompanions must be defined together; you may wish to use :paste mode for this.\n"}]},"apps":[],"jobName":"paragraph_1521911271903_-655600426","id":"20160618-135144_1086212432","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11252"},{"text":"// A method can be called from Location without having an instance\nval loc = Location.create(12,13,\"Home\")","dateUpdated":"2018-03-24T17:19:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"loc: Location = [x=12,y=13,name=Home]\n"}]},"apps":[],"jobName":"paragraph_1521911271903_-655600426","id":"20160618-135557_861646677","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11253"},{"text":"// Using the Location object as a function will invoke the \"apply\" method of the object. This is often used as an alternative way for constructing class instances without the \"new\" keyword\nval loc = Location(12,13,\"Home\")","dateUpdated":"2018-03-24T17:20:46+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"loc: Location = [x=12,y=13,name=Home]\n"}]},"apps":[],"jobName":"paragraph_1521911271904_-669836135","id":"20160618-135646_1582856805","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11254"},{"text":"%md\n# Case Classes\n\nIn addition to classes and (companion) objects, Scala also provides so called *case classes*. These are special *value* classes which automatically provide lots of functionality. They are very useful for passing along values, since they cannot be modified and equality always refers to equal values and not to equal identity. Let us have a look of how case classes can be declared and used.","dateUpdated":"2018-03-24T17:22:39+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Case Classes</h1>\n<p>In addition to classes and (companion) objects, Scala also provides so called <em>case classes</em>. These are special <em>value</em> classes which automatically provide lots of functionality. They are very useful for passing along values, since they cannot be modified and equality always refers to equal values and not to equal identity. Let us have a look of how case classes can be declared and used.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271904_-669836135","id":"20160618-140022_1635919006","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11255","user":"anonymous","dateFinished":"2018-03-24T17:22:39+0000","dateStarted":"2018-03-24T17:22:39+0000"},{"text":"// A case class always has a parameter list. The (in this case empty) class body is optional\ncase class Person(name:String, age:Int) { }\n\nval person = Person(\"Alice\", 23)","dateUpdated":"2018-03-24T17:23:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Person\nperson: Person = Person(Alice,23)\n"}]},"apps":[],"jobName":"paragraph_1521911271904_-669836135","id":"20160618-140204_2650542","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11256","user":"anonymous","dateFinished":"2018-03-24T17:23:15+0000","dateStarted":"2018-03-24T17:23:15+0000"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521912199304_-1764068291","id":"20180324-172319_1041112521","dateCreated":"2018-03-24T17:23:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14084","text":"// Case classes allow accessing the constructor parameters - they are provided as values\nperson.name","dateUpdated":"2018-03-24T17:23:42+0000","dateFinished":"2018-03-24T17:23:43+0000","dateStarted":"2018-03-24T17:23:42+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res91: String = Alice\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521912226074_500625032","id":"20180324-172346_646128901","dateCreated":"2018-03-24T17:23:46+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14165","text":"// But you cannot change a value - case classes are constant\nperson.name = \"Bob\"","dateUpdated":"2018-03-24T17:24:11+0000","dateFinished":"2018-03-24T17:24:05+0000","dateStarted":"2018-03-24T17:24:05+0000","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:78: error: reassignment to val\n       person.name = \"Bobn\"\n                   ^\n"}]}},{"text":"%md\n### Case Classes implement `copy` method\nWhen you want to change a value of a case class, you actually have to make a copy. Fortunately this can be done very easily, since Scala provides a `copy` method which allows you to specify new values for zero, one or even multiple fields.","dateUpdated":"2018-03-24T17:25:32+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Case Classes implement <code>copy</code> method</h3>\n<p>When you want to change a value of a case class, you actually have to make a copy. Fortunately this can be done very easily, since Scala provides a <code>copy</code> method which allows you to specify new values for zero, one or even multiple fields.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271908_-671375131","id":"20160618-140743_1604814731","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11263","focus":true,"user":"anonymous","dateFinished":"2018-03-24T17:25:32+0000","dateStarted":"2018-03-24T17:25:32+0000"},{"text":"val p_1 = person.copy()\nval p_2 = person.copy(age = 33)\nval p_3 = person.copy(name=\"Bob\", age = 33)","dateUpdated":"2018-03-24T17:26:07+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"p_1: Person = Person(Alice,23)\np_2: Person = Person(Alice,33)\np_3: Person = Person(Bob,33)\n"}]},"apps":[],"jobName":"paragraph_1521911271908_-671375131","id":"20160618-140750_582110760","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11264","focus":true,"user":"anonymous","dateFinished":"2018-03-24T17:26:07+0000","dateStarted":"2018-03-24T17:26:07+0000"},{"text":"%md\n### Case Classes override `equals` and `hashCode`\n\nAs already stated in the introduction of case classes, equality is not defined by identity, but really as identical values. This is provided by the automatic implementation of the `equals` and `hashCode` methods (which is available in every class).","dateUpdated":"2018-03-24T17:27:18+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Case Classes override <code>equals</code> and <code>hashCode</code></h3>\n<p>As already stated in the introduction of case classes, equality is not defined by identity, but really as identical values. This is provided by the automatic implementation of the <code>equals</code> and <code>hashCode</code> methods (which is available in every class).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271905_-670220884","id":"20160618-141430_499981270","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11257","user":"anonymous","dateFinished":"2018-03-24T17:27:18+0000","dateStarted":"2018-03-24T17:27:18+0000"},{"text":"// Instances of case classes are equal when their values are equal\nperson == Person(\"Alice\", 23)","dateUpdated":"2018-03-24T17:27:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res25: Boolean = true\n"}]},"apps":[],"jobName":"paragraph_1521911271905_-670220884","id":"20160618-140555_1632822887","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11258"},{"text":"// Normally equality is defined as object identity. Therefore two distinct object instances are considered to be unequal, even if their values are all equal\nval loc = Location(12,13,\"Home\")\nloc == Location(12,13,\"Home\")","dateUpdated":"2018-03-24T17:28:29+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"loc: Location = [x=12,y=13,name=Home]\nres31: Boolean = false\n"}]},"apps":[],"jobName":"paragraph_1521911271906_-669066638","id":"20160618-141543_1773966140","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11259"},{"text":"%md\n### Case classes contain the `unapply` method\n\nCase classes also implement the `unapply` method, which is used by Scala for deconstructing objects. This allows you to create magical code, that is easy to understand but at first glance a small miracle how it works.","dateUpdated":"2018-03-24T17:29:41+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Case classes contain the <code>unapply</code> method</h3>\n<p>Case classes also implement the <code>unapply</code> method, which is used by Scala for deconstructing objects. This allows you to create magical code, that is easy to understand but at first glance a small miracle how it works.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271907_-669451387","id":"20160618-141357_329661884","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11260","user":"anonymous","dateFinished":"2018-03-24T17:29:41+0000","dateStarted":"2018-03-24T17:29:41+0000"},{"text":"// An existing Person instance can be deconstructed into its constructur arguments\nval Person(name, age) = person","dateUpdated":"2018-03-24T17:30:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"name: String = Alice\nage: Int = 23\n"}]},"apps":[],"jobName":"paragraph_1521911271907_-669451387","id":"20160618-140430_125204944","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11261"},{"text":"// This does not work with normal classes, if the unapply method is not implemented\nval Location(x,y,name) = loc","dateUpdated":"2018-03-24T17:30:38+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:35: error: object Location is not a case class constructor, nor does it have an unapply/unapplySeq method\n         val Location(x,y,name) = loc\n             ^\n<console>:35: error: recursive value x$1 needs type\n         val Location(x,y,name) = loc\n                      ^\n"}]},"apps":[],"jobName":"paragraph_1521911271907_-669451387","id":"20160618-140511_893223268","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11262"},{"text":"%md\n# Pattern Matching\n\nWe already saw pattern matching in conjunction with simple flow control. But the real power of pattern matching is revealed with case classes.","dateUpdated":"2018-03-24T17:07:51+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Pattern Matching</h1>\n<p>We already saw pattern matching in conjunction with simple flow control. But the real power of pattern matching is revealed with case classes.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1521911271909_-671759880","id":"20160618-141753_1396250193","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11265"},{"text":"def fn(name:String) = {\n    name match {\n        case \"Alice\" => println(\"Hello Alice\")\n        case \"Bob\" => println(\"Hi Bob\")\n        case x:String => println(\"Someone else (\" + x + \")\")\n    }\n}","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fn: (name: String)Unit\n"}]},"apps":[],"jobName":"paragraph_1521911271909_-671759880","id":"20160618-143128_1561236462","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11266"},{"text":"fn(\"Alice\")","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hello Alice\n"}]},"apps":[],"jobName":"paragraph_1521911271910_-670605633","id":"20160618-143337_251763343","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11267"},{"text":"fn(\"Bob\")","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hi Bob\n"}]},"apps":[],"jobName":"paragraph_1521911271910_-670605633","id":"20160618-143354_1568326611","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11268"},{"text":"fn(\"Eve\")","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Someone else (Eve)\n"}]},"apps":[],"jobName":"paragraph_1521911271911_-670990382","id":"20160618-143359_493729815","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11269"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521912654106_1133345981","id":"20180324-173054_54592730","dateCreated":"2018-03-24T17:30:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14369","text":"%md\nNow let us use case classes for pattern matching including deconstruction.","dateUpdated":"2018-03-24T17:31:09+0000","dateFinished":"2018-03-24T17:31:09+0000","dateStarted":"2018-03-24T17:31:09+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let us use case classes for pattern matching including deconstruction.</p>\n</div>"}]}},{"text":"case class Person(name:String, age:Int)\ncase class Point(x:Int, y:Int)\n\ndef fn(value:AnyRef) = {\n    value match {\n        case Person(\"Alice\", age) => println(\"It's Alice (age \" + age + \")\")\n        case Person(name,age) => println(\"We have a Person called \" + name + \" of age \" + age)\n        case Point(x,y) => println(\"We have a point at (\" + x + \",\" + y + \")\")\n    }\n}","dateUpdated":"2018-03-24T17:31:22+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Person\ndefined class Point\nfn: (value: AnyRef)Unit\n"}]},"apps":[],"jobName":"paragraph_1521911271911_-670990382","id":"20160618-142753_1698919540","dateCreated":"2018-03-24T17:07:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:11270","user":"anonymous","dateFinished":"2018-03-24T17:31:23+0000","dateStarted":"2018-03-24T17:31:22+0000"},{"text":"fn(Person(\"Alice\", 23))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"It's Alice (age 23)\n"}]},"apps":[],"jobName":"paragraph_1521911271911_-670990382","id":"20160618-143014_406914850","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11271"},{"text":"fn(Person(\"Bob\", 41))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"We have a Person called Bob of age 41\n"}]},"apps":[],"jobName":"paragraph_1521911271912_-672914127","id":"20160618-143657_98134149","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11272"},{"text":"fn(Point(12,13))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"We have a point at (12,13)\n"}]},"apps":[],"jobName":"paragraph_1521911271912_-672914127","id":"20160618-143036_1858956581","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11273"},{"text":"fn(\"Hello World\")","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"scala.MatchError: Hello World (of class java.lang.String)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.fn(<console>:37)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:38)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:43)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:45)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:47)\n\tat $iwC$$iwC$$iwC$$iwC.<init>(<console>:49)\n\tat $iwC$$iwC$$iwC.<init>(<console>:51)\n\tat $iwC$$iwC.<init>(<console>:53)\n\tat $iwC.<init>(<console>:55)\n\tat <init>(<console>:57)\n\tat .<init>(<console>:61)\n\tat .<clinit>(<console>)\n\tat .<init>(<console>:7)\n\tat .<clinit>(<console>)\n\tat $print(<console>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1346)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpretInput(SparkInterpreter.java:709)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:674)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:667)\n\tat org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java:57)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:300)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:169)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:134)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"}]},"apps":[],"jobName":"paragraph_1521911271912_-672914127","id":"20160618-143044_810620068","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11274"},{"text":"def fn(value:AnyRef) = {\n    value match {\n        case Person(\"Alice\", age) if age < 10 => println(\"It's little Alice (age \" + age + \")\")\n        case Person(\"Alice\", age) if age > 50 => println(\"It's old Alice (age \" + age + \")\")\n        case Person(name,age) => println(\"We have a Person called \" + name + \" of age \" + age)\n        case Point(x,y) => println(\"We have a point at (\" + x + \",\" + y + \")\")\n    }\n}","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fn: (value: AnyRef)Unit\n"}]},"apps":[],"jobName":"paragraph_1521911271913_-673298876","id":"20160619-074345_1939639991","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11275"},{"text":"fn(Person(\"Alice\",9))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"It's little Alice (age 9)\n"}]},"apps":[],"jobName":"paragraph_1521911271913_-673298876","id":"20160619-074440_394496084","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11276"},{"text":"fn(Person(\"Alice\",20))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"We have a Person called Alice of age 20\n"}]},"apps":[],"jobName":"paragraph_1521911271913_-673298876","id":"20160619-074453_568414527","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11277"},{"text":"fn(Person(\"Alice\",63))","dateUpdated":"2018-03-24T17:07:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"It's old Alice (age 63)\n"}]},"apps":[],"jobName":"paragraph_1521911271914_-672144629","id":"20160619-074513_356929102","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11278"},{"text":"","dateUpdated":"2018-03-24T17:07:51+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521911271914_-672144629","id":"20160618-171621_1621284227","dateCreated":"2018-03-24T17:07:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11279"}],"name":"Scala Introduction - Part 4 - Classes","id":"2DAEV7PQ4","angularObjects":{"2D98FMAH1:shared_process":[],"2D7JMBHMW:shared_process":[],"2D97KQQMQ:shared_process":[],"2D75J9G8A:shared_process":[],"2D7EN88U2:shared_process":[],"2D9JW72F7:shared_process":[],"2D833H41P:shared_process":[],"2D9GNB6ZN:shared_process":[],"2D6C3QSGG:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}