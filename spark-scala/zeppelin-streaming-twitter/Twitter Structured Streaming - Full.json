{"paragraphs":[{"text":"%md\n# 1. Connect to data source\n\nFirst you need to run the netcat program, for example via\n\n    s3netcat.py -I1 -B10 -P9977 s3://dimajix-training/data/twitter-sample/\n\nThen we connect to the raw data socket as the datasource by using the `DataStreamReader` API via `spark.readStream`. We need to specify the options `host`, `port` and we need to use the format `socket` for connecting to the data source. The socket will stream Twitter data samples in raw JSON format, i.e. one JSON document per line.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>1. Connect to data source</h1>\n<p>First you need to run the netcat program, for example via</p>\n<pre><code>s3netcat.py -I1 -B10 -P9977 s3://dimajix-training/data/twitter-sample/\n</code></pre>\n<p>Then we connect to the raw data socket as the datasource by using the <code>DataStreamReader</code> API via <code>spark.readStream</code>. We need to specify the options <code>host</code>, <code>port</code> and we need to use the format <code>socket</code> for connecting to the data source. The socket will stream Twitter data samples in raw JSON format, i.e. one JSON document per line.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776842_-1088168109","id":"20170218-160028_195174762","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4116"},{"text":"// Fill in the correct AWS VPC address of your master host\nval master = \"kku.training.dimajix-aws.net\"\n\n// Connect to raw text stream socket using the DataStreamReader API via spark.readStream. You need to specify the options `host`, `port` and you need to use the format `socket`\nval lines = spark.readStream\n  .format(\"socket\")\n  .option(\"host\", master)\n  .option(\"port\", 9977)\n  .load()","dateUpdated":"2018-04-09T18:58:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"master: String = kku.training.dimajix-aws.net\nlines: org.apache.spark.sql.DataFrame = [value: string]\n"}]},"apps":[],"jobName":"paragraph_1523298776843_-1088552858","id":"20170218-160002_129671727","dateCreated":"2018-04-09T18:32:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4117","user":"anonymous","dateFinished":"2018-04-09T18:59:30+0000","dateStarted":"2018-04-09T18:58:53+0000"},{"text":"%md\n## 1.1 Inspect Schema\n\nThe result of the load method is a `DataFrame` again, but a streaming one. This `DataFrame` again has a schema, which we can inspect with the usual method:","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>1.1 Inspect Schema</h2>\n<p>The result of the load method is a <code>DataFrame</code> again, but a streaming one. This <code>DataFrame</code> again has a schema, which we can inspect with the usual method:</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776843_-1088552858","id":"20170218-161504_128762750","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4118"},{"text":"lines.printSchema()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- value: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1523298776843_-1088552858","id":"20170218-160206_920542952","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4119"},{"text":"%md\n# 2. Inspect Data\n\nOf course we also want to inspect the data inside the DataFrame. But this time, we cannot simply invoke `show`, because normal actions do not (directly) work on streaming DataFrames. Instead we need to create a continiuous query. Later, we will see a neat trick how a streaming query can be transformed into a volatile table.\n\nIn order to create a continuous query, we need to perform the following steps\n\n1. Create a `DataStreamWriter` by using the `writeStream` method of a DataFrame\n2. Specify the output format. We use `console` in our case\n3. Specify a checkpoint location on HDFS. This is required for restarting\n4. Optionally specify a processing period\n5. Start the query\n6. For Zeppelin only: Sleep a little bit, or we miss the output","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>2. Inspect Data</h1>\n<p>Of course we also want to inspect the data inside the DataFrame. But this time, we cannot simply invoke <code>show</code>, because normal actions do not (directly) work on streaming DataFrames. Instead we need to create a continiuous query. Later, we will see a neat trick how a streaming query can be transformed into a volatile table.</p>\n<p>In order to create a continuous query, we need to perform the following steps</p>\n<ol>\n<li>Create a <code>DataStreamWriter</code> by using the <code>writeStream</code> method of a DataFrame</li>\n<li>Specify the output format. We use <code>console</code> in our case</li>\n<li>Specify a checkpoint location on HDFS. This is required for restarting</li>\n<li>Optionally specify a processing period</li>\n<li>Start the query</li>\n<li>For Zeppelin only: Sleep a little bit, or we miss the output</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523298776844_-1090476603","id":"20170218-161603_528321172","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4120"},{"text":"import org.apache.spark.sql.streaming.ProcessingTime\n\nval query = lines.writeStream\n    .format(\"console\")\n    .outputMode(\"append\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-twitter-print\")\n    .start()\n    \nThread.sleep(30000)    ","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.streaming.ProcessingTime\nquery: org.apache.spark.sql.streaming.StreamingQuery = org.apache.spark.sql.execution.streaming.StreamingQueryWrapper@4fc8e420\n-------------------------------------------\nBatch: 0\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 1\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n+--------------------+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 2\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 3\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 4\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 5\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 6\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 7\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 8\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 9\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 10\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 11\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 12\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 13\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 14\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 15\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 16\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 17\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 18\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n+--------------------+\n\n-------------------------------------------\nBatch: 19\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 20\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n-------------------------------------------\nBatch: 21\n-------------------------------------------\n+--------------------+\n|               value|\n+--------------------+\n|{\"delete\":{\"statu...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"delete\":{\"statu...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n|{\"created_at\":\"Fr...|\n+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1523298776844_-1090476603","id":"20170218-160132_1015574950","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4121"},{"text":"%md\n## 2.1 Stop Query\n\nIn contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the `stop` method on the query object. This makes working with streams much easier.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2.1 Stop Query</h2>\n<p>In contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the <code>stop</code> method on the query object. This makes working with streams much easier.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776845_-1090861352","id":"20170218-161746_736484246","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4122"},{"text":"query.stop","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523298776845_-1090861352","id":"20170218-160155_661067655","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4123"},{"text":"%md\n# 3. Counting Hash-Tags\n\nSo we now want to create a streaming hashtag count. First we need to extract the Tweet itself from the JSON document, then we need to extract the hashtags in a similar way to the batch word traditional DataFrame word count example, i.e. we split every line into words, keep only hash-tags, group the words and count the sizes of the groups.\n\nEach query looks as follows\n\n```\n{ \"contributors\" : null,\n  \"coordinates\" : null,\n  \"created_at\" : \"Fri Jul 29 12:46:00 +0000 2016\",\n  \"entities\" : { \"hashtags\" : [  ],\n      \"symbols\" : [  ],\n      \"urls\" : [ { \"display_url\" : \"fb.me/ItnwZEhy\",\n            \"expanded_url\" : \"http://fb.me/ItnwZEhy\",\n            \"indices\" : [ 33,\n                56\n              ],\n            \"url\" : \"https://t.co/mM0if95F1K\"\n          } ],\n      \"user_mentions\" : [  ]\n    },\n  \"favorite_count\" : 0,\n  \"favorited\" : false,\n  \"filter_level\" : \"low\",\n  \"geo\" : null,\n  \"id\" : 759007065155117058,\n  \"id_str\" : \"759007065155117058\",\n  \"in_reply_to_screen_name\" : null,\n  \"in_reply_to_status_id\" : null,\n  \"in_reply_to_status_id_str\" : null,\n  \"in_reply_to_user_id\" : null,\n  \"in_reply_to_user_id_str\" : null,\n  \"is_quote_status\" : false,\n  \"lang\" : \"en\",\n  \"place\" : null,\n  \"possibly_sensitive\" : false,\n  \"retweet_count\" : 0,\n  \"retweeted\" : false,\n  \"source\" : \"<a href=\\\"http://www.facebook.com/twitter\\\" rel=\\\"nofollow\\\">Facebook</a>\",\n  \"text\" : \"I posted a new video to Facebook https://t.co/mM0if95F1K\",\n  \"timestamp_ms\" : \"1469796360659\",\n  \"truncated\" : false,\n  \"user\" : { \"contributors_enabled\" : false,\n      \"created_at\" : \"Sat Sep 08 08:28:55 +0000 2012\",\n      \"default_profile\" : false,\n      \"default_profile_image\" : false,\n      \"description\" : null,\n      \"favourites_count\" : 0,\n      \"follow_request_sent\" : null,\n      \"followers_count\" : 0,\n      \"following\" : null,\n      \"friends_count\" : 0,\n      \"geo_enabled\" : false,\n      \"id\" : 810489374,\n      \"id_str\" : \"810489374\",\n      \"is_translator\" : false,\n      \"lang\" : \"zh-tw\",\n      \"listed_count\" : 0,\n      \"location\" : null,\n      \"name\" : \"張冥閻\",\n      \"notifications\" : null,\n      \"profile_background_color\" : \"FFF04D\",\n      \"profile_background_image_url\" : \"http://abs.twimg.com/images/themes/theme19/bg.gif\",\n      \"profile_background_image_url_https\" : \"https://abs.twimg.com/images/themes/theme19/bg.gif\",\n      \"profile_background_tile\" : false,\n      \"profile_image_url\" : \"http://pbs.twimg.com/profile_images/378800000157469481/0a267258c8ccd1bf53d01c115677dbd7_normal.jpeg\",\n      \"profile_image_url_https\" : \"https://pbs.twimg.com/profile_images/378800000157469481/0a267258c8ccd1bf53d01c115677dbd7_normal.jpeg\",\n      \"profile_link_color\" : \"0099CC\",\n      \"profile_sidebar_border_color\" : \"FFF8AD\",\n      \"profile_sidebar_fill_color\" : \"F6FFD1\",\n      \"profile_text_color\" : \"333333\",\n      \"profile_use_background_image\" : true,\n      \"protected\" : false,\n      \"screen_name\" : \"nineemperor1\",\n      \"statuses_count\" : 9652,\n      \"time_zone\" : null,\n      \"url\" : null,\n      \"utc_offset\" : null,\n      \"verified\" : false\n    }\n}\n```\n\nIn order to extract a field from a JSON document, we can use the `get_json_object` function.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>3. Counting Hash-Tags</h1>\n<p>So we now want to create a streaming hashtag count. First we need to extract the Tweet itself from the JSON document, then we need to extract the hashtags in a similar way to the batch word traditional DataFrame word count example, i.e. we split every line into words, keep only hash-tags, group the words and count the sizes of the groups.</p>\n<p>Each query looks as follows</p>\n<pre><code>{ \"contributors\" : null,\n  \"coordinates\" : null,\n  \"created_at\" : \"Fri Jul 29 12:46:00 +0000 2016\",\n  \"entities\" : { \"hashtags\" : [  ],\n      \"symbols\" : [  ],\n      \"urls\" : [ { \"display_url\" : \"fb.me/ItnwZEhy\",\n            \"expanded_url\" : \"http://fb.me/ItnwZEhy\",\n            \"indices\" : [ 33,\n                56\n              ],\n            \"url\" : \"https://t.co/mM0if95F1K\"\n          } ],\n      \"user_mentions\" : [  ]\n    },\n  \"favorite_count\" : 0,\n  \"favorited\" : false,\n  \"filter_level\" : \"low\",\n  \"geo\" : null,\n  \"id\" : 759007065155117058,\n  \"id_str\" : \"759007065155117058\",\n  \"in_reply_to_screen_name\" : null,\n  \"in_reply_to_status_id\" : null,\n  \"in_reply_to_status_id_str\" : null,\n  \"in_reply_to_user_id\" : null,\n  \"in_reply_to_user_id_str\" : null,\n  \"is_quote_status\" : false,\n  \"lang\" : \"en\",\n  \"place\" : null,\n  \"possibly_sensitive\" : false,\n  \"retweet_count\" : 0,\n  \"retweeted\" : false,\n  \"source\" : \"&lt;a href=\\\"http://www.facebook.com/twitter\\\" rel=\\\"nofollow\\\"&gt;Facebook&lt;/a&gt;\",\n  \"text\" : \"I posted a new video to Facebook https://t.co/mM0if95F1K\",\n  \"timestamp_ms\" : \"1469796360659\",\n  \"truncated\" : false,\n  \"user\" : { \"contributors_enabled\" : false,\n      \"created_at\" : \"Sat Sep 08 08:28:55 +0000 2012\",\n      \"default_profile\" : false,\n      \"default_profile_image\" : false,\n      \"description\" : null,\n      \"favourites_count\" : 0,\n      \"follow_request_sent\" : null,\n      \"followers_count\" : 0,\n      \"following\" : null,\n      \"friends_count\" : 0,\n      \"geo_enabled\" : false,\n      \"id\" : 810489374,\n      \"id_str\" : \"810489374\",\n      \"is_translator\" : false,\n      \"lang\" : \"zh-tw\",\n      \"listed_count\" : 0,\n      \"location\" : null,\n      \"name\" : \"張冥閻\",\n      \"notifications\" : null,\n      \"profile_background_color\" : \"FFF04D\",\n      \"profile_background_image_url\" : \"http://abs.twimg.com/images/themes/theme19/bg.gif\",\n      \"profile_background_image_url_https\" : \"https://abs.twimg.com/images/themes/theme19/bg.gif\",\n      \"profile_background_tile\" : false,\n      \"profile_image_url\" : \"http://pbs.twimg.com/profile_images/378800000157469481/0a267258c8ccd1bf53d01c115677dbd7_normal.jpeg\",\n      \"profile_image_url_https\" : \"https://pbs.twimg.com/profile_images/378800000157469481/0a267258c8ccd1bf53d01c115677dbd7_normal.jpeg\",\n      \"profile_link_color\" : \"0099CC\",\n      \"profile_sidebar_border_color\" : \"FFF8AD\",\n      \"profile_sidebar_fill_color\" : \"F6FFD1\",\n      \"profile_text_color\" : \"333333\",\n      \"profile_use_background_image\" : true,\n      \"protected\" : false,\n      \"screen_name\" : \"nineemperor1\",\n      \"statuses_count\" : 9652,\n      \"time_zone\" : null,\n      \"url\" : null,\n      \"utc_offset\" : null,\n      \"verified\" : false\n    }\n}\n</code></pre>\n<p>In order to extract a field from a JSON document, we can use the <code>get_json_object</code> function.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776846_-1089707105","id":"20170218-161837_1521722724","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4124"},{"text":"%md\n## 3.1 Extract Tweet\n\nFirst we need to extract the tweet text itself via the `get_json_object` function and store it into a new column.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3.1 Extract Tweet</h2>\n<p>First we need to extract the tweet text itself via the <code>get_json_object</code> function and store it into a new column.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776846_-1089707105","id":"20170220-182415_1872492795","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4125"},{"text":"import org.apache.spark.sql.types._\n\nval ts_text = lines.select(\n        (get_json_object($\"value\", \"$.timestamp_ms\").cast(LongType) / lit(1000)).cast(TimestampType).as(\"ts\"),\n        get_json_object($\"value\", \"$.text\").as(\"text\")\n    )","dateUpdated":"2018-04-09T19:00:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types._\nts_text: org.apache.spark.sql.DataFrame = [ts: timestamp, text: string]\n"}]},"apps":[],"jobName":"paragraph_1523298776846_-1089707105","id":"20170218-160238_1475524112","dateCreated":"2018-04-09T18:32:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4126","user":"anonymous","dateFinished":"2018-04-09T19:00:16+0000","dateStarted":"2018-04-09T19:00:14+0000"},{"text":"%md\n## 3.2 Extract Topics\n\nNow that we have the Tweet text itself, we split it along spaces and extract all hash-tags.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3.2 Extract Topics</h2>\n<p>Now that we have the Tweet text itself, we split it along spaces and extract all hash-tags.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776846_-1089707105","id":"20170220-182404_1394954195","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4127"},{"text":"val topics = ts_text.select(ts_text(\"ts\"), explode(split(ts_text(\"text\"),\" \")).as(\"topic\"))\n    .filter($\"topic\".startsWith(\"#\"))\n    .filter($\"topic\" =!= \"#\")","dateUpdated":"2018-04-09T19:00:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topics: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ts: timestamp, topic: string]\n"}]},"apps":[],"jobName":"paragraph_1523298776847_-1090091854","id":"20170220-180159_930749179","dateCreated":"2018-04-09T18:32:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4128","user":"anonymous","dateFinished":"2018-04-09T19:00:18+0000","dateStarted":"2018-04-09T19:00:18+0000"},{"text":"%md\n## 3.3 Count Topics\n\nNow that we have the hash tags (topics), we perform a simple aggregation as usual.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3.3 Count Topics</h2>\n<p>Now that we have the hash tags (topics), we perform a simple aggregation as usual.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776847_-1090091854","id":"20170220-182554_1623876741","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4129"},{"text":"val counts = topics\n    .groupBy(\"topic\")\n    .agg(sum(lit(1)).as(\"count\"))","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"counts: org.apache.spark.sql.DataFrame = [topic: string, count: bigint]\n"}]},"apps":[],"jobName":"paragraph_1523298776847_-1090091854","id":"20170218-160526_2008806660","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4130"},{"text":"counts.printSchema","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- topic: string (nullable = true)\n |-- count: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1523298776847_-1090091854","id":"20170218-162308_1835168589","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4131"},{"text":"%md\n## 3.4 Print Results onto Console\n\nAgain we want to print the results onto the console.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3.4 Print Results onto Console</h2>\n<p>Again we want to print the results onto the console.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776848_-1079703633","id":"20170218-161041_735302634","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4132"},{"text":"val query = counts.writeStream\n    .format(\"console\")\n    .outputMode(\"complete\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-twitter-count\")\n    .start()\n    \nThread.sleep(20000)","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"query: org.apache.spark.sql.streaming.StreamingQuery = org.apache.spark.sql.execution.streaming.StreamingQueryWrapper@56325294\n-------------------------------------------\nBatch: 0\n-------------------------------------------\n"}]},"apps":[],"jobName":"paragraph_1523298776848_-1079703633","id":"20170218-160613_988660270","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4133"},{"text":"query.stop()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523298776848_-1079703633","id":"20170218-160716_194527039","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4134"},{"text":"%md\n# 4. Time-Windowed Aggregation\n\nAnother interesting (and probably more realistic) application is to perform time windowed aggregations. This means that we define a sliding time window used in the `groupBy` clause. In addition we also define a so called *watermark* which tells Spark how long to wait for late arrivels of individual data points (we don't have them in our simple example).","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>4. Time-Windowed Aggregation</h1>\n<p>Another interesting (and probably more realistic) application is to perform time windowed aggregations. This means that we define a sliding time window used in the <code>groupBy</code> clause. In addition we also define a so called <em>watermark</em> which tells Spark how long to wait for late arrivels of individual data points (we don't have them in our simple example).</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776848_-1079703633","id":"20170218-164639_1471935006","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4135"},{"text":"val windowedCounts = topics\n    .withWatermark(\"ts\", \"10 seconds\")\n    .groupBy(window($\"ts\", \"5 seconds\", \"1 seconds\"), $\"topic\")\n    .agg(sum(lit(1)).as(\"count\"))","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"windowedCounts: org.apache.spark.sql.DataFrame = [window: struct<start: timestamp, end: timestamp>, topic: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1523298776849_-1080088382","id":"20170218-164703_2039341008","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4136"},{"text":"windowedCounts.printSchema()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- window: struct (nullable = true)\n |    |-- start: timestamp (nullable = true)\n |    |-- end: timestamp (nullable = true)\n |-- topic: string (nullable = true)\n |-- count: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1523298776849_-1080088382","id":"20170218-165357_1483843188","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4137"},{"text":"%md\n## 4.1 Output Data\n\nLet's again output the data. This time, we also like to investigate the different output modes `append`, `complete` and `update`.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>4.1 Output Data</h2>\n<p>Let's again output the data. This time, we also like to investigate the different output modes <code>append</code>, <code>complete</code> and <code>update</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776849_-1080088382","id":"20180405-191004_1783341391","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4138"},{"text":"val query = windowedCounts.writeStream\n    .outputMode(\"update\")\n    .format(\"console\")\n    .trigger(ProcessingTime(\"1 seconds\"))\n    .queryName(\"topic_counts\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-twitter-console-2\")\n    .start()    \n    \nThread.sleep(60000)\n\nquery.stop()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nquery: org.apache.spark.sql.streaming.StreamingQuery = org.apache.spark.sql.execution.streaming.StreamingQueryWrapper@6130fe10\n-------------------------------------------\nBatch: 0\n-------------------------------------------\n+--------------------+-----------+-----+\n|              window|      topic|count|\n+--------------------+-----------+-----+\n|[2016-07-29 08:01...|      #AWTU|    1|\n|[2016-07-29 08:01...|     #AOMG…|    1|\n|[2016-07-29 08:01...|      #AWTU|    1|\n|[2016-07-29 08:01...|     #AOMG…|    1|\n|[2016-07-29 08:01...|      #free|    1|\n|[2016-07-29 08:01...|#NowPlaying|    1|\n|[2016-07-29 08:01...|     #AOMG…|    1|\n|[2016-07-29 08:01...|      #free|    1|\n|[2016-07-29 08:01...|#NowPlaying|    1|\n|[2016-07-29 08:01...|      #free|    1|\n|[2016-07-29 08:01...|      #free|    1|\n|[2016-07-29 08:01...|#NowPlaying|    1|\n|[2016-07-29 08:01...|     #AOMG…|    1|\n|[2016-07-29 08:01...|      #free|    1|\n|[2016-07-29 08:01...|      #AWTU|    1|\n|[2016-07-29 08:01...|     #AOMG…|    1|\n|[2016-07-29 08:01...|      #AWTU|    1|\n|[2016-07-29 08:01...|#NowPlaying|    1|\n|[2016-07-29 08:01...|      #AWTU|    1|\n|[2016-07-29 08:01...|#NowPlaying|    1|\n+--------------------+-----------+-----+\n\n-------------------------------------------\nBatch: 1\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...|             #rakday|    1|\n|[2016-07-29 08:01...|#hiltonalhamrabea...|    1|\n|[2016-07-29 08:01...|        #OnlineStore|    1|\n|[2016-07-29 08:01...|            #sexting|    1|\n|[2016-07-29 08:01...|               #slag|    1|\n|[2016-07-29 08:01...|             #rakday|    1|\n|[2016-07-29 08:01...|#hiltonalhamrabea...|    1|\n|[2016-07-29 08:01...|            #sexting|    1|\n|[2016-07-29 08:01...|       #Baseball.FAQ|    1|\n|[2016-07-29 08:01...|                  #W|    1|\n|[2016-07-29 08:01...|#DolceAmoreSabota...|    2|\n|[2016-07-29 08:01...|            #Shopify|    1|\n|[2016-07-29 08:01...|                #cam|    1|\n|[2016-07-29 08:01...|#hiltonalhamrabea...|    1|\n|[2016-07-29 08:01...|               #slag|    1|\n|[2016-07-29 08:01...|   #CPEC_GameChanger|    1|\n|[2016-07-29 08:01...|              #Quran|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|    5|\n|[2016-07-29 08:01...|                  #W|    1|\n|[2016-07-29 08:01...|           #ForGlory|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 2\n-------------------------------------------\n+--------------------+-------------------+-----+\n|              window|              topic|count|\n+--------------------+-------------------+-----+\n|[2016-07-29 08:01...|        #Quote\nWhen|    1|\n|[2016-07-29 08:01...|               #art|    1|\n|[2016-07-29 08:01...|              #MUFC|    1|\n|[2016-07-29 08:01...|           #Destiny|    1|\n|[2016-07-29 08:01...|          #painting|    2|\n|[2016-07-29 08:01...|                 #B|    1|\n|[2016-07-29 08:01...|  #KolkataHospitals|    1|\n|[2016-07-29 08:01...|           #Destiny|    1|\n|[2016-07-29 08:01...|        #Quote\nWhen|    1|\n|[2016-07-29 08:01...|  #KolkataHospitals|    1|\n|[2016-07-29 08:01...|#PushAwardsLizQuens|    8|\n|[2016-07-29 08:01...| #MicrosoftDynamics|    1|\n|[2016-07-29 08:01...| #BlackWomenDidThat|    1|\n|[2016-07-29 08:01...|#Behind_the_scenes\n|    1|\n|[2016-07-29 08:01...| #BlackWomenDidThat|    1|\n|[2016-07-29 08:01...| #رابطه_عشاق_القهوه|    1|\n|[2016-07-29 08:01...|               #art|    1|\n|[2016-07-29 08:01...|               #몬채널|    1|\n|[2016-07-29 08:01...|#PushAwardsLizQuens|   14|\n|[2016-07-29 08:01...|#PushAwardsLizQuens|   14|\n+--------------------+-------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 3\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...|         #Derbyshire|    1|\n|[2016-07-29 08:01...|            #Samples|    1|\n|[2016-07-29 08:01...|              #プレゼント|    1|\n|[2016-07-29 08:01...|  #NationalParksWeek|    1|\n|[2016-07-29 08:01...|        #conceptdraw|    1|\n|[2016-07-29 08:01...|            #Science|    1|\n|[2016-07-29 08:01...|            #Samples|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|    9|\n|[2016-07-29 08:01...|        #conceptdraw|    1|\n|[2016-07-29 08:01...|        #gidinigeria|    1|\n|[2016-07-29 08:01...|#VendrediLecture\n\nEn|    1|\n|[2016-07-29 08:01...|          #Education|    1|\n|[2016-07-29 08:01...|           #bakewell|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   15|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    1|\n|[2016-07-29 08:01...|                 #ギア|    1|\n|[2016-07-29 08:01...|               #sale|    1|\n|[2016-07-29 08:01...|               #sale|    1|\n|[2016-07-29 08:01...|            #Science|    1|\n|[2016-07-29 08:01...|  #NationalParksWeek|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 4\n-------------------------------------------\n+--------------------+-------------------+-----+\n|              window|              topic|count|\n+--------------------+-------------------+-----+\n|[2016-07-29 08:01...|           #Samples|    2|\n|[2016-07-29 08:01...|              #Obra|    1|\n|[2016-07-29 08:01...|         #lockherup|    1|\n|[2016-07-29 08:01...|        #balenciaga|    1|\n|[2016-07-29 08:01...| #electricalservice|    1|\n|[2016-07-29 08:01...|           #Science|    2|\n|[2016-07-29 08:01...|           #Samples|    2|\n|[2016-07-29 08:01...|          #Shillary|    1|\n|[2016-07-29 08:01...|#PushAwardsLizQuens|    6|\n|[2016-07-29 08:01...|           #Reforma|    1|\n|[2016-07-29 08:01...|       #ทรงพระเจริญ|    1|\n|[2016-07-29 08:01...|#PushAwardsLizQuens|   15|\n|[2016-07-29 08:01...|    #knights_60mins|    1|\n|[2016-07-29 08:01...|         #lockherup|    1|\n|[2016-07-29 08:01...|           #auction|    1|\n|[2016-07-29 08:01...|           #Reforma|    1|\n|[2016-07-29 08:01...|           #Reforma|    1|\n|[2016-07-29 08:01...|         #Education|    2|\n|[2016-07-29 08:01...|     #ALDUBSafeZone|    1|\n|[2016-07-29 08:00...|       #ทรงพระเจริญ|    1|\n+--------------------+-------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 5\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...|             #الجمعه|    1|\n|[2016-07-29 08:01...|             #الجمعه|    1|\n|[2016-07-29 08:01...|         #يوم_الجمعة|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|    7|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   16|\n|[2016-07-29 08:01...|             #الجمعه|    1|\n|[2016-07-29 08:01...|#SientoMuchoMiedo...|    1|\n|[2016-07-29 08:01...|        #BTSinMANILA|    1|\n|[2016-07-29 08:01...|         #يوم_الجمعه|    1|\n|[2016-07-29 08:01...|#SientoMuchoMiedo...|    1|\n|[2016-07-29 08:01...|         #يوم_الجمعه|    1|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    8|\n|[2016-07-29 08:01...|           #SevereWX|    1|\n|[2016-07-29 08:01...|           #SevereWX|    1|\n|[2016-07-29 08:01...|        #BTSinMANILA|    1|\n|[2016-07-29 08:01...|          #เสียงสู๊ง|    1|\n|[2016-07-29 08:01...|#SientoMuchoMiedo...|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|    7|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    7|\n|[2016-07-29 08:01...|          #เสียงสู๊ง|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 6\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   10|\n|[2016-07-29 08:01...|            #المهاجر|    1|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    3|\n|[2016-07-29 08:01...|            #Virtual|    1|\n|[2016-07-29 08:01...|            #Virtual|    1|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|   11|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   10|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|   10|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    3|\n|[2016-07-29 08:01...|            #shopper|    1|\n|[2016-07-29 08:01...|            #shopper|    1|\n|[2016-07-29 08:01...|            #shopper|    1|\n|[2016-07-29 08:01...|            #shopper|    1|\n|[2016-07-29 08:01...|#DolceAmoreSabota...|    1|\n|[2016-07-29 08:01...|#DolceAmoreSabota...|    1|\n|[2016-07-29 08:01...|#DolceAmoreSabota...|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   11|\n|[2016-07-29 08:01...|            #المهاجر|    1|\n|[2016-07-29 08:01...|            #المهاجر|    1|\n|[2016-07-29 08:01...|            #Virtual|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 7\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...|  #메이저놀이터\n#네임드사다리사이트|    1|\n|[2016-07-29 08:01...|                #win|    1|\n|[2016-07-29 08:01...|#أذكار_الصباح_وال...|    1|\n|[2016-07-29 08:01...|             #follow|    1|\n|[2016-07-29 08:01...|      #curacao\n\nNice|    1|\n|[2016-07-29 08:01...|               #comp|    1|\n|[2016-07-29 08:01...|            #ニューオープン|    1|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   19|\n|[2016-07-29 08:01...|           #loveweek|    1|\n|[2016-07-29 08:01...|           #loveweek|    1|\n|[2016-07-29 08:01...|               #free|    1|\n|[2016-07-29 08:01...|             #winner|    1|\n|[2016-07-29 08:01...|                 #rt|    1|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    3|\n|[2016-07-29 08:01...|        #competition|    1|\n|[2016-07-29 08:01...|             #winner|    1|\n|[2016-07-29 08:01...|                 #rt|    1|\n|[2016-07-29 08:01...|           #loveweek|    1|\n|[2016-07-29 08:01...|      #curacao\n\nNice|    1|\n|[2016-07-29 08:01...|              #美容師求人|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 8\n-------------------------------------------\n+--------------------+--------------------+-----+\n|              window|               topic|count|\n+--------------------+--------------------+-----+\n|[2016-07-29 08:01...|               #エルフ耳|    1|\n|[2016-07-29 08:01...|         #MTVHottest|    1|\n|[2016-07-29 08:01...|                 #ポー|    1|\n|[2016-07-29 08:01...|       #haveagoodday|    1|\n|[2016-07-29 08:01...|              #Women|    1|\n|[2016-07-29 08:01...|             #こだまちゃん|    1|\n|[2016-07-29 08:01...|#アイドル\n\nhttps://t....|    1|\n|[2016-07-29 08:01...|                #居酒屋|    1|\n|[2016-07-29 08:01...|       #Crowdfunding|    1|\n|[2016-07-29 08:01...|      #itstheweekend|    1|\n|[2016-07-29 08:01...|         #POWのポストカード|    1|\n|[2016-07-29 08:01...|       #WhatIsMorgan|    1|\n|[2016-07-29 08:01...|#アイドル\n\nhttps://t....|    1|\n|[2016-07-29 08:01...|#アイドル\n\nhttps://t....|    1|\n|[2016-07-29 08:01...|               #フガフガ|    1|\n|[2016-07-29 08:01...| #DolceAmoreSabotage|    4|\n|[2016-07-29 08:01...| #PushAwardsLizQuens|   17|\n|[2016-07-29 08:01...|                #居酒屋|    1|\n|[2016-07-29 08:01...|         #MTVHottest|    1|\n|[2016-07-29 08:01...|              #balls|    1|\n+--------------------+--------------------+-----+\nonly showing top 20 rows\n\n-------------------------------------------\nBatch: 9\n-------------------------------------------\n"}]},"apps":[],"jobName":"paragraph_1523298776850_-1078934136","id":"20170218-162247_324928954","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4139"},{"text":"%md\n## 5 Create Dynamic Table\n\nWe can also use a \"memory\" output, which is a queryable live table. In order to do so, we again create a new table, but this time with format `memory` and an explicit query name `topic_counts`. Using a `memory` output will create a dynamic table in memory (only `complete` output supported right now), which can be queried using SQL.\n\n1. Create a DataStreamWriter object using the writeStream method of your DataFrame `windowedCounts`.\n2. Set the format to `memory`\n3. Set the output mode to `append` (this is supported for time windowed aggregations)\n4. Set the query name to `topic_counts`\n5. Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)\n6. Start the continuous query via `start`","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5 Create Dynamic Table</h2>\n<p>We can also use a &ldquo;memory&rdquo; output, which is a queryable live table. In order to do so, we again create a new table, but this time with format <code>memory</code> and an explicit query name <code>topic_counts</code>. Using a <code>memory</code> output will create a dynamic table in memory (only <code>complete</code> output supported right now), which can be queried using SQL.</p>\n<ol>\n<li>Create a DataStreamWriter object using the writeStream method of your DataFrame <code>windowedCounts</code>.</li>\n<li>Set the format to <code>memory</code></li>\n<li>Set the output mode to <code>append</code> (this is supported for time windowed aggregations)</li>\n<li>Set the query name to <code>topic_counts</code></li>\n<li>Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1523298776851_-1079318885","id":"20170218-160934_1425298948","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4140"},{"text":"val tableQuery = windowedCounts.writeStream\n    .outputMode(\"append\")\n    .format(\"memory\")\n    .trigger(ProcessingTime(\"1 seconds\"))\n    .queryName(\"topic_counts\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-twitter-table\")\n    .start()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tableQuery: org.apache.spark.sql.streaming.StreamingQuery = org.apache.spark.sql.execution.streaming.StreamingQueryWrapper@62be4d17\n"}]},"apps":[],"jobName":"paragraph_1523298776851_-1079318885","id":"20170218-161145_208429016","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4141"},{"text":"%md\n## 5.1 Perform Query\n\nNow that we have a dynamic table, we can perform SQL queries against this table as if it was a normal static table.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5.1 Perform Query</h2>\n<p>Now that we have a dynamic table, we can perform SQL queries against this table as if it was a normal static table.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776851_-1079318885","id":"20170218-162010_1110788275","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4142"},{"text":"%sql\nselect \n    * \nfrom topic_counts\norder by count desc\nlimit 10","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"window","index":0,"aggr":"sum"}],"values":[{"name":"topic","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"window","index":0,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"window\ttopic\tcount\n[2018-04-05 19:01:17.0,2018-04-05 19:01:22.0]\t#DolceAmoreSabotage\t5\n[2018-04-05 19:01:18.0,2018-04-05 19:01:23.0]\t#DolceAmoreSabotage\t5\n[2018-04-05 19:01:16.0,2018-04-05 19:01:21.0]\t#DolceAmoreSabotage\t4\n[2018-04-05 19:01:15.0,2018-04-05 19:01:20.0]\t#DolceAmoreSabotage\t3\n[2018-04-05 19:01:16.0,2018-04-05 19:01:21.0]\t#PushAwardsLizQuens\t3\n[2018-04-05 19:01:15.0,2018-04-05 19:01:20.0]\t#PushAwardsLizQuens\t3\n[2018-04-05 19:01:18.0,2018-04-05 19:01:23.0]\t#PushAwardsLizQuens\t3\n[2018-04-05 19:01:17.0,2018-04-05 19:01:22.0]\t#PushAwardsLizQuens\t3\n[2018-04-05 19:01:19.0,2018-04-05 19:01:24.0]\t#DolceAmoreSabotage\t3\n[2018-04-05 19:01:14.0,2018-04-05 19:01:19.0]\t#DolceAmoreSabotage\t2\n"}]},"apps":[],"jobName":"paragraph_1523298776852_-1081242629","id":"20170218-161337_1103351127","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4143"},{"text":"%md\n## 5.2 Stop Query\n\nIn order to clean everything up, we stop the query again.","dateUpdated":"2018-04-09T18:32:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5.2 Stop Query</h2>\n<p>In order to clean everything up, we stop the query again.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776852_-1081242629","id":"20170218-162048_842521010","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4144"},{"text":"tableQuery.stop()","dateUpdated":"2018-04-09T18:32:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1523298776853_-1081627378","id":"20170218-161329_1844676678","dateCreated":"2018-04-09T18:32:56+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4145"},{"text":"%md\n# 6. SQL Output\n\nA more meaningful example will store the results in a MySQL database. This allows us better experiments with different output modes and does not require the `Thread.sleep` hack. In order to be able to access the MySQL driver, we need to add the following dependency manually to Zeppelin:\n\n    mysql:mysql-connector-java:6.0.6 \n\nThen we are ready to implement a special `ForeachSink` which allows to output streaming results to arbitrary sinks.","user":"anonymous","dateUpdated":"2018-04-09T18:48:52+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>SQL Output</h1>\n<p>A more meaningful example will store the results in a MySQL database. This allows us better experiments with different output modes and does not require the <code>Thread.sleep</code> hack. In order to be able to access the MySQL driver, we need to add the following dependency manually to Zeppelin:</p>\n<pre><code>mysql:mysql-connector-java:6.0.6 \n</code></pre>\n<p>Then we are ready to implement a special <code>ForeachSink</code> which allows to output streaming results to arbitrary sinks.</p>\n"}]},"apps":[],"jobName":"paragraph_1523298776853_-1081627378","id":"20180405-190358_1697918875","dateCreated":"2018-04-09T18:32:56+0000","dateStarted":"2018-04-09T18:37:38+0000","dateFinished":"2018-04-09T18:37:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4146"},{"text":"%md\n## 6.1 Create JDBCSink\n\nBy extending the class `ForeachWriter` we implement a JDBC sink which writes into a MySQL database. We use UPSERTs in order to be able to process updated data, when we set the output mode to `update`.","user":"anonymous","dateUpdated":"2018-04-09T18:49:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299720873_-1515879715","id":"20180409-184840_694173197","dateCreated":"2018-04-09T18:48:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6500","dateFinished":"2018-04-09T18:49:51+0000","dateStarted":"2018-04-09T18:49:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6.1 Create JDBCSink</h2>\n<p>By extending the class <code>ForeachWriter</code> we implement a JDBC sink which writes into a MySQL database. We use UPSERTs in order to be able to process updated data, when we set the output mode to <code>update</code>.</p>\n"}]}},{"text":"class JDBCSink(url: String, user:String, pwd:String) extends org.apache.spark.sql.ForeachWriter[org.apache.spark.sql.Row] {\n    val driver = \"com.mysql.cj.jdbc.Driver\"\n\n    @transient var connection:java.sql.Connection = _\n    @transient var statement:java.sql.Statement = _\n\n    def open(partitionId: Long, version: Long):Boolean = {\n        Class.forName(driver)\n        connection = java.sql.DriverManager.getConnection(url, user, pwd)\n        statement = connection.createStatement\n        true\n    }\n\n    def process(value: org.apache.spark.sql.Row): Unit = { \n        try {\n            statement.executeUpdate(s\"INSERT INTO twitter_topics(ts, topic, frequency) VALUES ('${value(0)}','${value(1)}',${value(2)}) ON DUPLICATE KEY UPDATE frequency=${value(2)};\")\n        }\n        catch {\n            case t:Throwable =>\n        }\n    }\n\n    def close(errorOrNull:Throwable):Unit = {\n        connection.close\n        connection = null\n        statement = null\n    }\n}\n","user":"anonymous","dateUpdated":"2018-04-09T19:18:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class JDBCSink\n"}]},"apps":[],"jobName":"paragraph_1523299058776_1377345002","id":"20180409-183738_1503870515","dateCreated":"2018-04-09T18:37:38+0000","dateStarted":"2018-04-09T19:18:50+0000","dateFinished":"2018-04-09T19:18:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4147"},{"text":"val url = \"jdbc:mysql://kku.training.dimajix-aws.net/training\"\nval user = \"user\"\nval pwd = \"user\"\n\nval sink = new JDBCSink(url, user, pwd)","user":"anonymous","dateUpdated":"2018-04-09T19:18:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"url: String = jdbc:mysql://kku.training.dimajix-aws.net/training\nuser: String = user\npwd: String = user\nsink: JDBCSink = JDBCSink@242775a6\n"}]},"apps":[],"jobName":"paragraph_1523299257249_998426988","id":"20180409-184057_55953501","dateCreated":"2018-04-09T18:40:57+0000","dateStarted":"2018-04-09T19:18:54+0000","dateFinished":"2018-04-09T19:18:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4148","focus":true},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299801626_578632001","id":"20180409-185001_2128857477","dateCreated":"2018-04-09T18:50:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6588","text":"%md\n## 6.2 Create Target Table\n\nIn order to store the results in MySQL, we need to create an appropriate table in MySQL. We use shell commands for that.","dateUpdated":"2018-04-09T18:50:49+0000","dateFinished":"2018-04-09T18:50:49+0000","dateStarted":"2018-04-09T18:50:49+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6.2 Create Target Table</h2>\n<p>In order to store the results in MySQL, we need to create an appropriate table in MySQL. We use shell commands for that.</p>\n"}]}},{"text":"%sh\nmysql --user=user --password=user -e \"CREATE TABLE IF NOT EXISTS training.twitter_topics (ts TIMESTAMP NOT NULL DEFAULT 0, topic VARCHAR(128) NOT NULL, frequency INT NULL, PRIMARY KEY (ts, topic))\"","user":"anonymous","dateUpdated":"2018-04-09T19:39:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299915254_1326138340","id":"20180409-185155_1814796043","dateCreated":"2018-04-09T18:51:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6776","dateFinished":"2018-04-09T18:57:10+0000","dateStarted":"2018-04-09T18:57:10+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%md\n## 6.3 Perform Aggregation\n\nNow we generate the streaming aggregation again as usual.","user":"anonymous","dateUpdated":"2018-04-09T18:58:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299871506_-307521337","id":"20180409-185111_1502227523","dateCreated":"2018-04-09T18:51:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6664","dateFinished":"2018-04-09T18:58:33+0000","dateStarted":"2018-04-09T18:58:33+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6.3 Perform Aggregation</h2>\n<p>Now we generate the streaming aggregation again as usual.</p>\n"}]}},{"text":"import org.apache.spark.sql.types._\n\nval windowedCounts = topics\n    .withWatermark(\"ts\", \"90 seconds\")\n    .groupBy(window($\"ts\", \"30 seconds\"), $\"topic\")\n    .agg(sum(lit(1)).as(\"count\"))\n    .coalesce(10)\n    .select(col(\"window.end\"), col(\"topic\"), col(\"count\"))","user":"anonymous","dateUpdated":"2018-04-09T19:26:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299455019_312864100","id":"20180409-184415_1712878112","dateCreated":"2018-04-09T18:44:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4149","dateFinished":"2018-04-09T19:26:13+0000","dateStarted":"2018-04-09T19:26:12+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.types._\nwindowedCounts: org.apache.spark.sql.DataFrame = [end: timestamp, topic: string ... 1 more field]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299891414_-618767873","id":"20180409-185131_1741905905","dateCreated":"2018-04-09T18:51:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6720","text":"%md\n## 6.4 Execute Streaming Query\n\nFinally we start the query","dateUpdated":"2018-04-09T18:58:42+0000","dateFinished":"2018-04-09T18:58:42+0000","dateStarted":"2018-04-09T18:58:42+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6.4 Execute Streaming Query</h2>\n<p>Finally we start the query</p>\n"}]}},{"text":"import org.apache.spark.sql.streaming.ProcessingTime\n\nval query = windowedCounts.writeStream\n    .foreach(sink)\n    .outputMode(\"update\")\n    .trigger(ProcessingTime(\"5 seconds\"))\n    .queryName(\"topic_counts\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-twitter-mysql3242\")\n    .start()","user":"anonymous","dateUpdated":"2018-04-09T19:39:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523299311928_-226536889","id":"20180409-184151_1626285404","dateCreated":"2018-04-09T18:41:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4150","dateFinished":"2018-04-09T19:39:08+0000","dateStarted":"2018-04-09T19:39:08+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.streaming.ProcessingTime\nwarning: there was one deprecation warning; re-run with -deprecation for details\nquery: org.apache.spark.sql.streaming.StreamingQuery = org.apache.spark.sql.execution.streaming.StreamingQueryWrapper@445d5b49\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523300428988_427148727","id":"20180409-190028_1292220214","dateCreated":"2018-04-09T19:00:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7036","text":"query.stop()","dateUpdated":"2018-04-09T19:43:22+0000","dateFinished":"2018-04-09T19:43:23+0000","dateStarted":"2018-04-09T19:43:22+0000","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523300701047_-457639115","id":"20180409-190501_2093504126","dateCreated":"2018-04-09T19:05:01+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7296"}],"name":"Twitter Structured Streaming - Full","id":"2DAVMUUW5","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}