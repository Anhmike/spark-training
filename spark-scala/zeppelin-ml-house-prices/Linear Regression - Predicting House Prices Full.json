{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520687181725_89053945","id":"20180310-130621_1390836629","dateCreated":"2018-03-10T13:06:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5163","text":"%md\n## Load Additional Libraries\nFirst we need to load some more Java/Scala libraries for creating good looking images. Either you can execute the following pararaph, or you need to manually add the following dependencies to the Zeppelin Spark Interpreter:\n* org.vegas-viz:vegas_2.11:0.3.11\n* org.vegas-viz:vegas-spark_2.11:0.3.11\n","dateUpdated":"2018-03-10T13:07:30+0000","dateFinished":"2018-03-10T13:07:30+0000","dateStarted":"2018-03-10T13:07:30+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Load Additional Libraries</h2>\n<p>First we need to load some more Java/Scala libraries for creating good looking images. Either you can execute the following pararaph, or you need to manually add the following dependencies to the Zeppelin Spark Interpreter:</p>\n<ul>\n<li>org.vegas-viz:vegas_2.11:0.3.11</li>\n<li>org.vegas-viz:vegas-spark_2.11:0.3.11</li>\n</ul>\n"}]}},{"text":"%spark.dep\nz.reset()\nz.load(\"org.vegas-viz:vegas_2.11:0.3.11\")\nz.load(\"org.vegas-viz:vegas-spark_2.11:0.3.11\")\n","user":"anonymous","dateUpdated":"2018-03-10T13:06:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:28: error: value reset is not a member of org.apache.zeppelin.spark.ZeppelinContext\n       z.reset()\n         ^\n"}]},"apps":[],"jobName":"paragraph_1520684776085_257447328","id":"20180224-155112_1250996378","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:26:53+0000","dateFinished":"2018-03-10T12:27:30+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1412"},{"text":"%md\n# Load Data\nFirst we load the data from S3. We use the built-in \"csv\" method, which can use the first line has column names and which also supports infering the schema automatically. We use both and save some code for specifying the schema explictly.\n\nWe also peek inside the data by retrieving the first five records.","dateUpdated":"2018-03-10T13:07:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load Data</h1>\n<p>First we load the data from S3. We use the built-in &ldquo;csv&rdquo; method, which can use the first line has column names and which also supports infering the schema automatically. We use both and save some code for specifying the schema explictly.</p>\n<p>We also peek inside the data by retrieving the first five records.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776093_254369337","id":"20180224-150345_1979378836","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1413"},{"text":"val rawData = spark.read\n    .option(\"header\",\"true\")\n    .option(\"inferSchema\",\"true\")\n    .csv(\"s3://dimajix-training/data/kc-house-data/\")\n\nz.show(rawData.limit(10))","user":"anonymous","dateUpdated":"2018-03-10T12:30:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rawData: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 19 more fields]\n"},{"type":"TABLE","data":"id\tdate\tprice\tbedrooms\tbathrooms\tsqft_living\tsqft_lot\tfloors\twaterfront\tview\tcondition\tgrade\tsqft_above\tsqft_basement\tyr_built\tyr_renovated\tzipcode\tlat\tlong\tsqft_living15\tsqft_lot15\n7129300520\t20141013T000000\t221900\t3\t1.0\t1180\t5650\t1.0\t0\t0\t3\t7\t1180\t0\t1955\t0\t98178\t47.5112\t-122.257\t1340\t5650\n6414100192\t20141209T000000\t538000\t3\t2.25\t2570\t7242\t2.0\t0\t0\t3\t7\t2170\t400\t1951\t1991\t98125\t47.721\t-122.319\t1690\t7639\n5631500400\t20150225T000000\t180000\t2\t1.0\t770\t10000\t1.0\t0\t0\t3\t6\t770\t0\t1933\t0\t98028\t47.7379\t-122.233\t2720\t8062\n2487200875\t20141209T000000\t604000\t4\t3.0\t1960\t5000\t1.0\t0\t0\t5\t7\t1050\t910\t1965\t0\t98136\t47.5208\t-122.393\t1360\t5000\n1954400510\t20150218T000000\t510000\t3\t2.0\t1680\t8080\t1.0\t0\t0\t3\t8\t1680\t0\t1987\t0\t98074\t47.6168\t-122.045\t1800\t7503\n7237550310\t20140512T000000\t1225000\t4\t4.5\t5420\t101930\t1.0\t0\t0\t3\t11\t3890\t1530\t2001\t0\t98053\t47.6561\t-122.005\t4760\t101930\n1321400060\t20140627T000000\t257500\t3\t2.25\t1715\t6819\t2.0\t0\t0\t3\t7\t1715\t0\t1995\t0\t98003\t47.3097\t-122.327\t2238\t6819\n2008000270\t20150115T000000\t291850\t3\t1.5\t1060\t9711\t1.0\t0\t0\t3\t7\t1060\t0\t1963\t0\t98198\t47.4095\t-122.315\t1650\t9711\n2414600126\t20150415T000000\t229500\t3\t1.0\t1780\t7470\t1.0\t0\t0\t3\t7\t1050\t730\t1960\t0\t98146\t47.5123\t-122.337\t1780\t8113\n3793500160\t20150312T000000\t323000\t3\t2.5\t1890\t6560\t2.0\t0\t0\t3\t7\t1890\t0\t2003\t0\t98038\t47.3684\t-122.031\t2390\t7570\n"}]},"apps":[],"jobName":"paragraph_1520684776094_255523584","id":"20180224-145450_1588429371","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:30:56+0000","dateFinished":"2018-03-10T12:30:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1414"},{"text":"rawData.printSchema()","user":"anonymous","dateUpdated":"2018-03-10T12:31:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: long (nullable = true)\n |-- date: string (nullable = true)\n |-- price: decimal(7,0) (nullable = true)\n |-- bedrooms: integer (nullable = true)\n |-- bathrooms: double (nullable = true)\n |-- sqft_living: integer (nullable = true)\n |-- sqft_lot: integer (nullable = true)\n |-- floors: double (nullable = true)\n |-- waterfront: integer (nullable = true)\n |-- view: integer (nullable = true)\n |-- condition: integer (nullable = true)\n |-- grade: integer (nullable = true)\n |-- sqft_above: integer (nullable = true)\n |-- sqft_basement: integer (nullable = true)\n |-- yr_built: integer (nullable = true)\n |-- yr_renovated: integer (nullable = true)\n |-- zipcode: integer (nullable = true)\n |-- lat: double (nullable = true)\n |-- long: double (nullable = true)\n |-- sqft_living15: integer (nullable = true)\n |-- sqft_lot15: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1520684776094_255523584","id":"20180224-145537_1151799048","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:02+0000","dateFinished":"2018-03-10T12:31:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1415"},{"text":"%md\n# Initial Investigations\n\nAs a first step to get an idea of our data, we create some simple visualizations. We use the visualization capabilities built in with Zeppelin\n\n## House Price in Relation to size\n\nProbably one of the most important attributes is the size of the house. This is provided in the data in the column \"sqft_living\". Other interesting attributes include \"sqft_lot\", which is the size of the lot. We also have a look at the dependency between the number of bedrooms and the house price.\n\nWe extract the price column and the size column and create simple scatter plots.\n","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Initial Investigations</h1>\n<p>As a first step to get an idea of our data, we create some simple visualizations. We use the visualization capabilities built in with Zeppelin</p>\n<h2>House Price in Relation to size</h2>\n<p>Probably one of the most important attributes is the size of the house. This is provided in the data in the column &ldquo;sqft_living&rdquo;. Other interesting attributes include &ldquo;sqft_lot&rdquo;, which is the size of the lot. We also have a look at the dependency between the number of bedrooms and the house price.</p>\n<p>We extract the price column and the size column and create simple scatter plots.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776094_255523584","id":"20180224-150558_1355146135","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1416"},{"text":"val sample = rawData\n    .sample(false, 0.2)\n    .limit(500)\n    .select(\"sqft_living\",\"price\")\nz.show(sample)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"colWidth":4,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}},"1":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520684776095_255138835","id":"20180224-150631_1916593617","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1417"},{"text":"val sample = rawData\n    .sample(false, 0.2)\n    .limit(500)\n    .select(\"sqft_lot\",\"price\")\nz.show(sample)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"colWidth":4,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}},"1":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520684776095_255138835","id":"20180224-150725_1870524254","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1418"},{"text":"val sample = rawData\n    .sample(false, 0.2)\n    .limit(500)\n    .select(\"bedrooms\",\"price\")\nz.show(sample)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"colWidth":4,"editorMode":"ace/mode/scala","results":{"1":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520684776096_240903126","id":"20180224-151033_1318683923","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1419"},{"text":"%md\n# Linear Regression\n\nSince there are some obvious correlations between some input variables and the house price, let us perform a simple linear regression. We will perform the following steps:\n\n* Extract so called features from the raw data. The features have to be stored in a new column of type \"Vector\"\n* Train a linear regression model\n","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Linear Regression</h1>\n<p>Since there are some obvious correlations between some input variables and the house price, let us perform a simple linear regression. We will perform the following steps:</p>\n<ul>\n  <li>Extract so called features from the raw data. The features have to be stored in a new column of type &ldquo;Vector&rdquo;</li>\n  <li>Train a linear regression model</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776096_240903126","id":"20180224-151441_1763457730","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1420"},{"text":"import org.apache.spark.ml.feature._\n\n// Extract features using VectorAssembler\nval vectorAssembler = new VectorAssembler()\nvectorAssembler.setInputCols(Array(\"sqft_living\"))\nvectorAssembler.setOutputCol(\"features\")\nval features = vectorAssembler.transform(rawData)\n\nfeatures.printSchema()","user":"anonymous","dateUpdated":"2018-03-10T12:31:10+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature._\nvectorAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_e87fca22a359\nres7: vectorAssembler.type = vecAssembler_e87fca22a359\nres8: vectorAssembler.type = vecAssembler_e87fca22a359\nfeatures: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 20 more fields]\nroot\n |-- id: long (nullable = true)\n |-- date: string (nullable = true)\n |-- price: decimal(7,0) (nullable = true)\n |-- bedrooms: integer (nullable = true)\n |-- bathrooms: double (nullable = true)\n |-- sqft_living: integer (nullable = true)\n |-- sqft_lot: integer (nullable = true)\n |-- floors: double (nullable = true)\n |-- waterfront: integer (nullable = true)\n |-- view: integer (nullable = true)\n |-- condition: integer (nullable = true)\n |-- grade: integer (nullable = true)\n |-- sqft_above: integer (nullable = true)\n |-- sqft_basement: integer (nullable = true)\n |-- yr_built: integer (nullable = true)\n |-- yr_renovated: integer (nullable = true)\n |-- zipcode: integer (nullable = true)\n |-- lat: double (nullable = true)\n |-- long: double (nullable = true)\n |-- sqft_living15: integer (nullable = true)\n |-- sqft_lot15: integer (nullable = true)\n |-- features: vector (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1520684776097_240518377","id":"20180224-151736_1330959401","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:10+0000","dateFinished":"2018-03-10T12:31:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1421"},{"text":"// Train linear regression model\nimport org.apache.spark.ml.regression._\n\nval regression = new LinearRegression()\nregression.setFeaturesCol(\"features\")\nregression.setLabelCol(\"price\")\nval model = regression.fit(features)","user":"anonymous","dateUpdated":"2018-03-10T12:31:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.regression._\nregression: org.apache.spark.ml.regression.LinearRegression = linReg_8f827f985500\nres13: org.apache.spark.ml.regression.LinearRegression = linReg_8f827f985500\nres14: org.apache.spark.ml.regression.LinearRegression = linReg_8f827f985500\nmodel: org.apache.spark.ml.regression.LinearRegressionModel = linReg_8f827f985500\n"}]},"apps":[],"jobName":"paragraph_1520684776098_241672623","id":"20180224-152010_755847156","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:15+0000","dateFinished":"2018-03-10T12:31:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1422"},{"text":"%md\n## Inspect Model\n\nLet's inspect the generated linear model. It has two fields, \"intercept\" and \"coefficients\" which completely describe the model.\n\nThe basic formular of the model is\n\n    y = SUM(coeff[i]*x[i]) + intercept\n\nwhere y is the prediction variable, and x[i] are the input feature.","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Inspect Model</h2>\n<p>Let&rsquo;s inspect the generated linear model. It has two fields, &ldquo;intercept&rdquo; and &ldquo;coefficients&rdquo; which completely describe the model.</p>\n<p>The basic formular of the model is</p>\n<pre><code>y = SUM(coeff[i]*x[i]) + intercept\n</code></pre>\n<p>where y is the prediction variable, and x[i] are the input feature.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776098_241672623","id":"20180224-152453_286429597","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1423"},{"text":"println(\"Intercept: \" + model.intercept)\nprintln(\"Coefficients: \" + model.coefficients)\n","user":"anonymous","dateUpdated":"2018-03-10T12:31:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Intercept: -43580.743094473895\nCoefficients: [280.62356789744814]\n"}]},"apps":[],"jobName":"paragraph_1520684776098_241672623","id":"20180224-152517_448107232","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:23+0000","dateFinished":"2018-03-10T12:31:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1424"},{"text":"%md\n\n## Plotting the Model\n\nLet's create a simple graph displaying the house price in relation to its size. Let us also draw the predicted price.","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Plotting the Model</h2>\n<p>Let&rsquo;s create a simple graph displaying the house price in relation to its size. Let us also draw the predicted price.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776099_241287875","id":"20180224-152602_1749516558","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1425"},{"text":"val originalData = rawData.select(col(\"sqft_living\"), col(\"price\"), lit(true).as(\"real\"))\nval modelData = rawData.select(col(\"sqft_living\"),(lit(model.intercept) + col(\"sqft_living\") * model.coefficients(0)).as(\"price\"), lit(false).as(\"real\"))\nval allData = originalData.union(modelData)\nz.show(allData.sample(false, 0.01).limit(300))","user":"anonymous","dateUpdated":"2018-03-10T12:31:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{"1":{"graph":{"mode":"scatterChart","height":300,"optionOpen":true,"setting":{"scatterChart":{"xAxis":{"name":"sqft_living","index":0,"aggr":"sum"},"yAxis":{"name":"price","index":1,"aggr":"sum"},"group":{"name":"real","index":2,"aggr":"sum"}}}},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"originalData: org.apache.spark.sql.DataFrame = [sqft_living: int, price: decimal(7,0) ... 1 more field]\nmodelData: org.apache.spark.sql.DataFrame = [sqft_living: int, price: double ... 1 more field]\nallData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [sqft_living: int, price: double ... 1 more field]\n"},{"type":"TABLE","data":"sqft_living\tprice\treal\n1480\t516500.0\ttrue\n1510\t791500.0\ttrue\n2570\t348000.0\ttrue\n6050\t1600000.0\ttrue\n2390\t565000.0\ttrue\n2000\t380000.0\ttrue\n1560\t303000.0\ttrue\n1810\t465000.0\ttrue\n2360\t577000.0\ttrue\n2110\t285000.0\ttrue\n1810\t550000.0\ttrue\n1782\t326000.0\ttrue\n2380\t340000.0\ttrue\n1040\t234000.0\ttrue\n2180\t612000.0\ttrue\n2340\t210000.0\ttrue\n2400\t403500.0\ttrue\n940\t370000.0\ttrue\n1700\t335000.0\ttrue\n2310\t785000.0\ttrue\n1210\t450000.0\ttrue\n3770\t872000.0\ttrue\n1410\t399500.0\ttrue\n2240\t649000.0\ttrue\n1090\t190000.0\ttrue\n670\t157500.0\ttrue\n2170\t550000.0\ttrue\n2830\t999000.0\ttrue\n1470\t638000.0\ttrue\n2100\t600000.0\ttrue\n1050\t210000.0\ttrue\n5370\t884900.0\ttrue\n1360\t222000.0\ttrue\n2620\t672000.0\ttrue\n2250\t645000.0\ttrue\n3770\t1495000.0\ttrue\n2070\t535000.0\ttrue\n2150\t530000.0\ttrue\n1100\t178000.0\ttrue\n1990\t715000.0\ttrue\n1250\t318000.0\ttrue\n1250\t294000.0\ttrue\n1650\t390000.0\ttrue\n1180\t425000.0\ttrue\n1600\t690000.0\ttrue\n2240\t610000.0\ttrue\n1540\t624000.0\ttrue\n1910\t650000.0\ttrue\n1670\t235000.0\ttrue\n1740\t560000.0\ttrue\n3030\t766950.0\ttrue\n3010\t419000.0\ttrue\n1790\t583000.0\ttrue\n910\t219900.0\ttrue\n1330\t235000.0\ttrue\n2310\t600000.0\ttrue\n3160\t555000.0\ttrue\n880\t280000.0\ttrue\n1180\t400000.0\ttrue\n1840\t490000.0\ttrue\n1680\t377000.0\ttrue\n1920\t475000.0\ttrue\n3440\t554000.0\ttrue\n770\t217000.0\ttrue\n1480\t243000.0\ttrue\n2870\t465000.0\ttrue\n2420\t649950.0\ttrue\n1620\t275000.0\ttrue\n1330\t443500.0\ttrue\n2170\t565000.0\ttrue\n2680\t830200.0\ttrue\n2300\t738500.0\ttrue\n1940\t565000.0\ttrue\n1210\t345000.0\ttrue\n2010\t570000.0\ttrue\n1520\t369950.0\ttrue\n2440\t499000.0\ttrue\n3840\t970000.0\ttrue\n1730\t258000.0\ttrue\n1590\t249000.0\ttrue\n2760\t375000.0\ttrue\n1510\t250000.0\ttrue\n1590\t720000.0\ttrue\n1300\t431000.0\ttrue\n2510\t860000.0\ttrue\n980\t499950.0\ttrue\n950\t305000.0\ttrue\n1850\t245000.0\ttrue\n1570\t447450.0\ttrue\n1570\t550000.0\ttrue\n1980\t272000.0\ttrue\n1380\t240000.0\ttrue\n2880\t1100000.0\ttrue\n2330\t689000.0\ttrue\n1463\t390000.0\ttrue\n2560\t552625.0\ttrue\n1560\t254000.0\ttrue\n1390\t354000.0\ttrue\n1690\t462500.0\ttrue\n3440\t740000.0\ttrue\n1640\t170500.0\ttrue\n2370\t535950.0\ttrue\n2360\t445000.0\ttrue\n2220\t392000.0\ttrue\n1920\t417000.0\ttrue\n1360\t238000.0\ttrue\n1510\t265000.0\ttrue\n2060\t558000.0\ttrue\n2350\t598850.0\ttrue\n2400\t280000.0\ttrue\n1990\t256750.0\ttrue\n1940\t700000.0\ttrue\n1790\t790000.0\ttrue\n1250\t259875.0\ttrue\n1440\t232000.0\ttrue\n1250\t275000.0\ttrue\n1380\t380000.0\ttrue\n1180\t215000.0\ttrue\n2220\t785000.0\ttrue\n3650\t1195000.0\ttrue\n3840\t1462500.0\ttrue\n1440\t490000.0\ttrue\n2440\t312000.0\ttrue\n910\t305000.0\ttrue\n1770\t606150.0\ttrue\n2040\t575000.0\ttrue\n1500\t436000.0\ttrue\n2750\t550000.0\ttrue\n1460\t245000.0\ttrue\n3370\t2300000.0\ttrue\n2840\t739000.0\ttrue\n1480\t310000.0\ttrue\n2140\t340000.0\ttrue\n1960\t575000.0\ttrue\n1460\t444000.0\ttrue\n1940\t635000.0\ttrue\n1600\t502000.0\ttrue\n2110\t1031000.0\ttrue\n1700\t384000.0\ttrue\n1250\t575000.0\ttrue\n3080\t300000.0\ttrue\n3230\t714000.0\ttrue\n1140\t476000.0\ttrue\n2150\t490000.0\ttrue\n1930\t435000.0\ttrue\n2090\t352000.0\ttrue\n2010\t500000.0\ttrue\n1930\t345000.0\ttrue\n1350\t310000.0\ttrue\n2000\t267000.0\ttrue\n2870\t570000.0\ttrue\n1330\t239000.0\ttrue\n2056\t289000.0\ttrue\n1480\t235000.0\ttrue\n2440\t699000.0\ttrue\n1340\t239000.0\ttrue\n1500\t244000.0\ttrue\n2650\t325000.0\ttrue\n1750\t329950.0\ttrue\n1430\t375000.0\ttrue\n2090\t355900.0\ttrue\n4400\t1120000.0\ttrue\n1160\t336000.0\ttrue\n3300\t510000.0\ttrue\n1250\t500000.0\ttrue\n1820\t345000.0\ttrue\n1800\t285000.0\ttrue\n1880\t300000.0\ttrue\n2510\t1950000.0\ttrue\n2780\t815000.0\ttrue\n1430\t279000.0\ttrue\n3180\t439000.0\ttrue\n2230\t736500.0\ttrue\n1440\t550000.0\ttrue\n1760\t500000.0\ttrue\n2320\t525000.0\ttrue\n1500\t480000.0\ttrue\n1380\t209950.0\ttrue\n2600\t540000.0\ttrue\n1640\t226500.0\ttrue\n1990\t776000.0\ttrue\n1670\t418000.0\ttrue\n930\t306000.0\ttrue\n1200\t400000.0\ttrue\n1900\t343500.0\ttrue\n4820\t1063000.0\ttrue\n2430\t372000.0\ttrue\n1560\t465000.0\ttrue\n3085\t359000.0\ttrue\n1740\t350000.0\ttrue\n2060\t607000.0\ttrue\n2120\t612000.0\ttrue\n2240\t497000.0\ttrue\n1610\t313500.0\ttrue\n2620\t394250.0\ttrue\n1080\t395000.0\ttrue\n2100\t580000.0\ttrue\n1590\t399950.0\ttrue\n3640\t932990.0\ttrue\n2170\t695000.0\ttrue\n2310\t739000.0\ttrue\n5635\t950000.0\ttrue\n2432\t427000.0\ttrue\n2242\t310000.0\ttrue\n3500\t998000.0\ttrue\n3350\t844000.0\ttrue\n1070\t256950.0\ttrue\n2450\t660000.0\ttrue\n1130\t411000.0\ttrue\n4590\t1720000.0\ttrue\n2520\t610685.0\ttrue\n1280\t315617.4238142597\tfalse\n1050\t251074.00319784664\tfalse\n2440\t641140.7625752996\tfalse\n3500\t938601.7445465947\tfalse\n1670\t425060.6152942645\tfalse\n1800\t461541.67912093276\tfalse\n800\t180918.11122348462\tfalse\n2180\t568178.6349219631\tfalse\n1940\t500828.9786265755\tfalse\n1130\t273523.8886296425\tfalse\n3450\t924570.5661517222\tfalse\n2550\t672009.355044019\tfalse\n1150\t279136.35998759145\tfalse\n2620\t691653.0047968403\tfalse\n2740\t725327.832944534\tfalse\n3830\t1031207.5219527525\tfalse\n1646\t418325.64966472576\tfalse\n1590\t402610.72986246867\tfalse\n1240\t304392.4810983618\tfalse\n3300\t882477.0309671051\tfalse\n2680\t708490.4188706871\tfalse\n3530\t947020.4515835181\tfalse\n1130\t273523.8886296425\tfalse\n4350\t1177131.7772594255\tfalse\n1250\t307198.71677733626\tfalse\n1300\t321229.89517220866\tfalse\n1740\t444704.2650470859\tfalse\n1580\t399804.4941834942\tfalse\n2620\t691653.0047968403\tfalse\n1400\t349292.2519619535\tfalse\n1620\t411029.4368993921\tfalse\n1240\t304392.4810983618\tfalse\n3940\t1062076.1144214717\tfalse\n2550\t672009.355044019\tfalse\n3670\t986307.7510891608\tfalse\n1770\t453122.9720840093\tfalse\n1240\t304392.4810983618\tfalse\n1110\t267911.4172716935\tfalse\n1200\t293167.53838246386\tfalse\n4220\t1140650.7134327574\tfalse\n1950\t503635.2143055499\tfalse\n1640\t416641.90825734107\tfalse\n2990\t795483.7249188961\tfalse\n1490\t374548.3730727238\tfalse\n1230\t301586.2454193873\tfalse\n2290\t599047.2273906824\tfalse\n2890\t767421.3681291513\tfalse\n2260\t590628.5203537589\tfalse\n1640\t416641.90825734107\tfalse\n1726\t440775.5350965216\tfalse\n1900\t489604.0359106776\tfalse\n1490\t374548.3730727238\tfalse\n850\t194949.28961835703\tfalse\n2580\t680428.0620809423\tfalse\n3260\t871252.0882512071\tfalse\n1630\t413835.6725783666\tfalse\n2980\t792677.4892399216\tfalse\n1740\t444704.2650470859\tfalse\n2210\t576597.3419588866\tfalse\n670\t144437.04739681634\tfalse\n1940\t500828.9786265755\tfalse\n2620\t691653.0047968403\tfalse\n1500\t377354.6087516983\tfalse\n1340\t332454.8378881066\tfalse\n750\t166886.9328286122\tfalse\n1940\t500828.9786265755\tfalse\n1290\t318423.6594932342\tfalse\n2430\t638334.5268963252\tfalse\n1010\t239849.06048194872\tfalse\n1090\t262298.94591374457\tfalse\n1810\t464347.91479990724\tfalse\n2080\t540116.2781322183\tfalse\n700\t152855.75443373978\tfalse\n1894\t487920.2945032928\tfalse\n1580\t399804.4941834942\tfalse\n940\t220205.41072912735\tfalse\n2250\t587822.2846747845\tfalse\n3920\t1056463.6430635229\tfalse\n2240\t585016.04899581\tfalse\n1510\t380160.84443067276\tfalse\n1750\t447510.50072606036\tfalse\n1900\t489604.0359106776\tfalse\n810\t183724.3469024591\tfalse\n1500\t377354.6087516983\tfalse\n2430\t638334.5268963252\tfalse\n1100\t265105.18159271905\tfalse\n2640\t697265.4761547892\tfalse\n1110\t267911.4172716935\tfalse\n2340\t613078.4057855548\tfalse\n"}]},"apps":[],"jobName":"paragraph_1520684776099_241287875","id":"20180224-152743_1740182201","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:27+0000","dateFinished":"2018-03-10T12:31:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1426"},{"text":"%md\n## Plot the Model using Vega\n\nAs it turns out, this simple requirement is already too much for Zeppelins built in visualization capabilities. But there is another Scala visualization library called Vega which is much more powerful (and faster)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Plot the Model using Vega</h2>\n<p>As it turns out, this simple requirement is already too much for Zeppelins built in visualization capabilities. But there is another Scala visualization library called Vega which is much more powerful (and faster)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776102_240133628","id":"20180303-133538_458099168","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1427"},{"text":"import vegas._\nimport vegas.sparkExt._\n\nimplicit val render = vegas.render.ShowHTML(s => print(\"%html \" + s))","user":"anonymous","dateUpdated":"2018-03-10T12:31:35+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import vegas._\nimport vegas.sparkExt._\nrender: vegas.render.ShowHTML = <function1>\n"}]},"apps":[],"jobName":"paragraph_1520684776102_240133628","id":"20180225-152400_1302673573","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:35+0000","dateFinished":"2018-03-10T12:31:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1428"},{"text":"val combinedData = rawData.withColumn(\"model\", (lit(model.intercept) + col(\"sqft_living\") * model.coefficients(0)))\n\nVegas.layered(\"Plots both real data and model data\").\n  withDataFrame(combinedData).\n  withLayers(\n    Layer().\n      mark(Point).\n      encodeX(\"sqft_living\", Quantitative).\n      encodeY(\"price\", Quantitative),\n    Layer().\n      mark(Line).\n      configMark(color=\"red\").\n      encodeX(\"sqft_living\", Quantitative).\n      encodeY(\"model\", Quantitative)\n  ).\n  show","user":"anonymous","dateUpdated":"2018-03-10T12:31:39+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520684776102_240133628","id":"20180225-145858_1971198211","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:39+0000","dateFinished":"2018-03-10T12:31:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1429"},{"text":"%md\n## Use Prediction Method of Model\n\nSince it is cumbersome to perform the calculation of the model ourselves, and since this clearly violates the principles of information hiding, the trained model also provides a method called `transform` which performs any calculation required to predict the house prices. It assumes that the input again has the field called `features` where we collected the houses size.\n\nThe `transform` method will create a new DataFrame containing all incoming columns plus a `prediction` column (the name of the column can also be changed when the model is trained)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Use Prediction Method of Model</h2>\n<p>Since it is cumbersome to perform the calculation of the model ourselves, and since this clearly violates the principles of information hiding, the trained model also provides a method called <code>transform</code> which performs any calculation required to predict the house prices. It assumes that the input again has the field called <code>features</code> where we collected the houses size.</p>\n<p>The <code>transform</code> method will create a new DataFrame containing all incoming columns plus a <code>prediction</code> column (the name of the column can also be changed when the model is trained)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776103_239748879","id":"20180225-171133_1519901114","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1430"},{"text":"val pred = model.transform(features)\npred.printSchema","user":"anonymous","dateUpdated":"2018-03-10T12:31:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pred: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 21 more fields]\nroot\n |-- id: long (nullable = true)\n |-- date: string (nullable = true)\n |-- price: decimal(7,0) (nullable = true)\n |-- bedrooms: integer (nullable = true)\n |-- bathrooms: double (nullable = true)\n |-- sqft_living: integer (nullable = true)\n |-- sqft_lot: integer (nullable = true)\n |-- floors: double (nullable = true)\n |-- waterfront: integer (nullable = true)\n |-- view: integer (nullable = true)\n |-- condition: integer (nullable = true)\n |-- grade: integer (nullable = true)\n |-- sqft_above: integer (nullable = true)\n |-- sqft_basement: integer (nullable = true)\n |-- yr_built: integer (nullable = true)\n |-- yr_renovated: integer (nullable = true)\n |-- zipcode: integer (nullable = true)\n |-- lat: double (nullable = true)\n |-- long: double (nullable = true)\n |-- sqft_living15: integer (nullable = true)\n |-- sqft_lot15: integer (nullable = true)\n |-- features: vector (nullable = true)\n |-- prediction: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1520684776103_239748879","id":"20180303-133326_1963650391","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:31:58+0000","dateFinished":"2018-03-10T12:31:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1431"},{"text":"z.show(pred.limit(50))","user":"anonymous","dateUpdated":"2018-03-10T12:32:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"id\tdate\tprice\tbedrooms\tbathrooms\tsqft_living\tsqft_lot\tfloors\twaterfront\tview\tcondition\tgrade\tsqft_above\tsqft_basement\tyr_built\tyr_renovated\tzipcode\tlat\tlong\tsqft_living15\tsqft_lot15\tfeatures\tprediction\n7129300520\t20141013T000000\t221900\t3\t1.0\t1180\t5650\t1.0\t0\t0\t3\t7\t1180\t0\t1955\t0\t98178\t47.5112\t-122.257\t1340\t5650\t[1180.0]\t287555.0670245149\n6414100192\t20141209T000000\t538000\t3\t2.25\t2570\t7242\t2.0\t0\t0\t3\t7\t2170\t400\t1951\t1991\t98125\t47.721\t-122.319\t1690\t7639\t[2570.0]\t677621.8264019679\n5631500400\t20150225T000000\t180000\t2\t1.0\t770\t10000\t1.0\t0\t0\t3\t6\t770\t0\t1933\t0\t98028\t47.7379\t-122.233\t2720\t8062\t[770.0]\t172499.40418656118\n2487200875\t20141209T000000\t604000\t4\t3.0\t1960\t5000\t1.0\t0\t0\t5\t7\t1050\t910\t1965\t0\t98136\t47.5208\t-122.393\t1360\t5000\t[1960.0]\t506441.44998452446\n1954400510\t20150218T000000\t510000\t3\t2.0\t1680\t8080\t1.0\t0\t0\t3\t8\t1680\t0\t1987\t0\t98074\t47.6168\t-122.045\t1800\t7503\t[1680.0]\t427866.850973239\n7237550310\t20140512T000000\t1225000\t4\t4.5\t5420\t101930\t1.0\t0\t0\t3\t11\t3890\t1530\t2001\t0\t98053\t47.6561\t-122.005\t4760\t101930\t[5420.0]\t1477398.9949096951\n1321400060\t20140627T000000\t257500\t3\t2.25\t1715\t6819\t2.0\t0\t0\t3\t7\t1715\t0\t1995\t0\t98003\t47.3097\t-122.327\t2238\t6819\t[1715.0]\t437688.67584964965\n2008000270\t20150115T000000\t291850\t3\t1.5\t1060\t9711\t1.0\t0\t0\t3\t7\t1060\t0\t1963\t0\t98198\t47.4095\t-122.315\t1650\t9711\t[1060.0]\t253880.23887682112\n2414600126\t20150415T000000\t229500\t3\t1.0\t1780\t7470\t1.0\t0\t0\t3\t7\t1050\t730\t1960\t0\t98146\t47.5123\t-122.337\t1780\t8113\t[1780.0]\t455929.2077629838\n3793500160\t20150312T000000\t323000\t3\t2.5\t1890\t6560\t2.0\t0\t0\t3\t7\t1890\t0\t2003\t0\t98038\t47.3684\t-122.031\t2390\t7570\t[1890.0]\t486797.80023170303\n1736800520\t20150403T000000\t662500\t3\t2.5\t3560\t9796\t1.0\t0\t0\t3\t8\t1860\t1700\t1965\t0\t98007\t47.6007\t-122.145\t2210\t8925\t[3560.0]\t955439.1586204416\n9212900260\t20140527T000000\t468000\t2\t1.0\t1160\t6000\t1.0\t0\t0\t4\t7\t860\t300\t1942\t0\t98115\t47.69\t-122.292\t1330\t6000\t[1160.0]\t281942.59566656593\n114101516\t20140528T000000\t310000\t3\t1.0\t1430\t19901\t1.5\t0\t0\t4\t7\t1430\t0\t1927\t0\t98028\t47.7558\t-122.229\t1780\t12697\t[1430.0]\t357710.9589988769\n6054650070\t20141007T000000\t400000\t3\t1.75\t1370\t9680\t1.0\t0\t0\t4\t7\t1370\t0\t1977\t0\t98074\t47.6127\t-122.045\t1370\t10208\t[1370.0]\t340873.54492503003\n1175000570\t20150312T000000\t530000\t5\t2.0\t1810\t4850\t1.5\t0\t0\t3\t7\t1810\t0\t1900\t0\t98107\t47.67\t-122.394\t1360\t4850\t[1810.0]\t464347.91479990724\n9297300055\t20150124T000000\t650000\t4\t3.0\t2950\t5000\t2.0\t0\t3\t3\t9\t1980\t970\t1979\t0\t98126\t47.5714\t-122.375\t2140\t4000\t[2950.0]\t784258.7822029982\n1875500060\t20140731T000000\t395000\t3\t2.0\t1890\t14040\t2.0\t0\t0\t3\t7\t1890\t0\t1994\t0\t98019\t47.7277\t-121.962\t1890\t14018\t[1890.0]\t486797.80023170303\n6865200140\t20140529T000000\t485000\t4\t1.0\t1600\t4300\t1.5\t0\t0\t4\t7\t1600\t0\t1916\t0\t98103\t47.6648\t-122.343\t1610\t4300\t[1600.0]\t405416.96554144315\n16000397\t20141205T000000\t189000\t2\t1.0\t1200\t9850\t1.0\t0\t0\t4\t7\t1200\t0\t1921\t0\t98002\t47.3089\t-122.21\t1060\t5095\t[1200.0]\t293167.53838246386\n7983200060\t20150424T000000\t230000\t3\t1.0\t1250\t9774\t1.0\t0\t0\t4\t7\t1250\t0\t1969\t0\t98003\t47.3343\t-122.306\t1280\t8850\t[1250.0]\t307198.71677733626\n6300500875\t20140514T000000\t385000\t4\t1.75\t1620\t4980\t1.0\t0\t0\t4\t7\t860\t760\t1947\t0\t98133\t47.7025\t-122.341\t1400\t4980\t[1620.0]\t411029.4368993921\n2524049179\t20140826T000000\t2000000\t3\t2.75\t3050\t44867\t1.0\t0\t4\t3\t9\t2330\t720\t1968\t0\t98040\t47.5316\t-122.233\t4110\t20336\t[3050.0]\t812321.138992743\n7137970340\t20140703T000000\t285000\t5\t2.5\t2270\t6300\t2.0\t0\t0\t3\t8\t2270\t0\t1995\t0\t98092\t47.3266\t-122.169\t2240\t7005\t[2270.0]\t593434.7560327335\n8091400200\t20140516T000000\t252700\t2\t1.5\t1070\t9643\t1.0\t0\t0\t3\t7\t1070\t0\t1985\t0\t98030\t47.3533\t-122.166\t1220\t8386\t[1070.0]\t256686.4745557956\n3814700200\t20141120T000000\t329000\t3\t2.25\t2450\t6500\t2.0\t0\t0\t4\t8\t2450\t0\t1985\t0\t98030\t47.3739\t-122.172\t2200\t6865\t[2450.0]\t643946.9982542741\n1202000200\t20141103T000000\t233000\t3\t2.0\t1710\t4697\t1.5\t0\t0\t5\t6\t1710\t0\t1941\t0\t98002\t47.3048\t-122.218\t1030\t4705\t[1710.0]\t436285.55801016244\n1794500383\t20140626T000000\t937000\t3\t1.75\t2450\t2691\t2.0\t0\t0\t3\t8\t1750\t700\t1915\t0\t98119\t47.6386\t-122.36\t1760\t3573\t[2450.0]\t643946.9982542741\n3303700376\t20141201T000000\t667000\t3\t1.0\t1400\t1581\t1.5\t0\t0\t5\t8\t1400\t0\t1909\t0\t98112\t47.6221\t-122.314\t1860\t3861\t[1400.0]\t349292.2519619535\n5101402488\t20140624T000000\t438000\t3\t1.75\t1520\t6380\t1.0\t0\t0\t3\t7\t790\t730\t1948\t0\t98115\t47.695\t-122.304\t1520\t6235\t[1520.0]\t382967.08010964724\n1873100390\t20150302T000000\t719000\t4\t2.5\t2570\t7173\t2.0\t0\t0\t3\t8\t2570\t0\t2005\t0\t98052\t47.7073\t-122.11\t2630\t6026\t[2570.0]\t677621.8264019679\n8562750320\t20141110T000000\t580500\t3\t2.5\t2320\t3980\t2.0\t0\t0\t3\t8\t2320\t0\t2003\t0\t98027\t47.5391\t-122.07\t2580\t3980\t[2320.0]\t607465.9344276058\n2426039314\t20141201T000000\t280000\t2\t1.5\t1190\t1265\t3.0\t0\t0\t3\t7\t1190\t0\t2005\t0\t98133\t47.7274\t-122.357\t1390\t1756\t[1190.0]\t290361.3027034894\n461000390\t20140624T000000\t687500\t4\t1.75\t2330\t5000\t1.5\t0\t0\t4\t7\t1510\t820\t1929\t0\t98117\t47.6823\t-122.368\t1460\t5000\t[2330.0]\t610272.1701065804\n7589200193\t20141110T000000\t535000\t3\t1.0\t1090\t3000\t1.5\t0\t0\t4\t8\t1090\t0\t1929\t0\t98117\t47.6889\t-122.375\t1570\t5080\t[1090.0]\t262298.94591374457\n7955080270\t20141203T000000\t322500\t4\t2.75\t2060\t6659\t1.0\t0\t0\t3\t7\t1280\t780\t1981\t0\t98058\t47.4276\t-122.157\t2020\t8720\t[2060.0]\t534503.8067742693\n9547205180\t20140613T000000\t696000\t3\t2.5\t2300\t3060\t1.5\t0\t0\t3\t8\t1510\t790\t1930\t2002\t98115\t47.6827\t-122.31\t1590\t3264\t[2300.0]\t601853.4630696569\n9435300030\t20140528T000000\t550000\t4\t1.0\t1660\t34848\t1.0\t0\t0\t1\t5\t930\t730\t1933\t0\t98052\t47.6621\t-122.132\t2160\t11467\t[1660.0]\t422254.37961529003\n2768000400\t20141230T000000\t640000\t4\t2.0\t2360\t6000\t2.0\t0\t0\t4\t8\t2360\t0\t1904\t0\t98107\t47.6702\t-122.362\t1730\t4700\t[2360.0]\t618690.8771435037\n7895500070\t20150213T000000\t240000\t4\t1.0\t1220\t8075\t1.0\t0\t0\t2\t7\t890\t330\t1969\t0\t98001\t47.3341\t-122.282\t1290\t7800\t[1220.0]\t298780.0097404128\n2078500320\t20140620T000000\t605000\t4\t2.5\t2620\t7553\t2.0\t0\t0\t3\t8\t2620\t0\t1996\t0\t98056\t47.5301\t-122.18\t2620\t11884\t[2620.0]\t691653.0047968403\n5547700270\t20140715T000000\t625000\t4\t2.5\t2570\t5520\t2.0\t0\t0\t3\t9\t2570\t0\t2000\t0\t98074\t47.6145\t-122.027\t2470\t5669\t[2570.0]\t677621.8264019679\n7766200013\t20140811T000000\t775000\t4\t2.25\t4220\t24186\t1.0\t0\t0\t3\t8\t2600\t1620\t1984\t0\t98166\t47.445\t-122.347\t2410\t30617\t[4220.0]\t1140650.7134327574\n7203220400\t20140707T000000\t861990\t5\t2.75\t3595\t5639\t2.0\t0\t0\t3\t9\t3595\t0\t2014\t0\t98053\t47.6848\t-122.016\t3625\t5639\t[3595.0]\t965260.9834968522\n9270200160\t20141028T000000\t685000\t3\t1.0\t1570\t2280\t2.0\t0\t0\t3\t7\t1570\t0\t1922\t0\t98119\t47.6413\t-122.364\t1580\t2640\t[1570.0]\t396998.2585045197\n1432701230\t20140729T000000\t309000\t3\t1.0\t1280\t9656\t1.0\t0\t0\t4\t6\t920\t360\t1959\t0\t98058\t47.4485\t-122.175\t1340\t8808\t[1280.0]\t315617.4238142597\n8035350320\t20140718T000000\t488000\t3\t2.5\t3160\t13603\t2.0\t0\t0\t3\t8\t3160\t0\t2003\t0\t98019\t47.7443\t-121.977\t3050\t9232\t[3160.0]\t843189.7314614623\n8945200830\t20150325T000000\t210490\t3\t1.0\t990\t8528\t1.0\t0\t0\t3\t6\t990\t0\t1966\t0\t98023\t47.3066\t-122.371\t1228\t8840\t[990.0]\t234236.58912399976\n4178300310\t20140716T000000\t785000\t4\t2.5\t2290\t13416\t2.0\t0\t0\t4\t9\t2290\t0\t1981\t0\t98007\t47.6194\t-122.151\t2680\t13685\t[2290.0]\t599047.2273906824\n9215400105\t20150428T000000\t450000\t3\t1.75\t1250\t5963\t1.0\t0\t0\t4\t7\t1250\t0\t1953\t0\t98115\t47.6796\t-122.301\t970\t5100\t[1250.0]\t307198.71677733626\n822039084\t20150311T000000\t1350000\t3\t2.5\t2753\t65005\t1.0\t1\t2\t5\t9\t2165\t588\t1953\t0\t98070\t47.4041\t-122.451\t2680\t72513\t[2753.0]\t728975.9393272009\n"}]},"apps":[],"jobName":"paragraph_1520684776104_237825134","id":"20180303-134209_2131363639","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:04+0000","dateFinished":"2018-03-10T12:32:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1432"},{"text":"%md\n## Plot the Result\nAgain we make a plot of the predicted data. It should precisely match the manually calculated prediction.","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Plot the Result</h2>\n<p>Again we make a plot of the predicted data. It should precisely match the manually calculated prediction.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776104_237825134","id":"20180303-134152_1401803215","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1433"},{"text":"Vegas.layered(\"Plots both real data and model data\").\n  withDataFrame(pred).\n  withLayers(\n    Layer().\n      mark(Point).\n      encodeX(\"sqft_living\", Quantitative).\n      encodeY(\"price\", Quantitative),\n    Layer().\n      mark(Line).\n      configMark(color=\"red\").\n      encodeX(\"sqft_living\", Quantitative).\n      encodeY(\"prediction\", Quantitative)\n  ).\n  show","user":"anonymous","dateUpdated":"2018-03-10T12:32:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520684776104_237825134","id":"20180303-133741_197113445","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:08+0000","dateFinished":"2018-03-10T12:32:13+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1434"},{"text":"%md\n# Evaluate Goodness of Fit\n\nNow that we have a model, which tells us how much a house should cost in relation to its size, we want to measure how good we actually approximate the real data with our model.\n\nA typical measure for regressions is the *Root Mean Squared Error* or *RMSE* for short. It is defined as\n\n    SQRT( SUM( (real_value - prediction)² ) / n )\n    \nWe can use simple DataFrame functions and aggregations to calculate this netric","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Evaluate Goodness of Fit</h1>\n<p>Now that we have a model, which tells us how much a house should cost in relation to its size, we want to measure how good we actually approximate the real data with our model.</p>\n<p>A typical measure for regressions is the <em>Root Mean Squared Error</em> or <em>RMSE</em> for short. It is defined as</p>\n<pre><code>SQRT( SUM( (real_value - prediction)² ) / n )\n</code></pre>\n<p>We can use simple DataFrame functions and aggregations to calculate this netric</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776105_237440386","id":"20180225-170942_648665140","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1435"},{"text":"// We calculate the RMSE metric using DataFrame transformations\nval rmse = scala.math.sqrt(pred.select(avg(($\"price\" - $\"prediction\")*($\"price\" - $\"prediction\"))).collect()(0).getDouble(0))\n\nprintln(s\"RMSE = $rmse\")","user":"anonymous","dateUpdated":"2018-03-10T12:32:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rmse: Double = 261440.7903006722\nRMSE = 261440.7903006722\n"}]},"apps":[],"jobName":"paragraph_1520684776105_237440386","id":"20180303-135124_1588441915","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:26+0000","dateFinished":"2018-03-10T12:32:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1436"},{"text":"%md\n## Using Built-In Evaluator\n\nSince this Metric is omnipresent, Spark contains a small utility class which also performs the calculation for us (and also supports a couple of other mertrics)","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Using Built-In Evaluator</h2>\n<p>Since this Metric is omnipresent, Spark contains a small utility class which also performs the calculation for us (and also supports a couple of other mertrics)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776105_237440386","id":"20180303-135849_710845466","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1437"},{"text":"import org.apache.spark.ml.evaluation._\n\nval evaluator = new RegressionEvaluator()\n    .setLabelCol(\"price\")\n    .setPredictionCol(\"prediction\")\n    .setMetricName(\"rmse\")\n\nval rmse = evaluator.evaluate(pred)\n\nprintln(s\"RMSE = $rmse\")","user":"anonymous","dateUpdated":"2018-03-10T12:32:32+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.evaluation._\nevaluator: org.apache.spark.ml.evaluation.RegressionEvaluator = regEval_c823aff8e059\nrmse: Double = 261440.79030067223\nRMSE = 261440.79030067223\n"}]},"apps":[],"jobName":"paragraph_1520684776106_237055637","id":"20180303-135352_5952771","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:33+0000","dateFinished":"2018-03-10T12:32:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1438"},{"text":"%md\n# Adding more Features\nThe RMSE tells us that on average our prediction actually performs pretty bad. How can we improve that? Obviously we used only the size of the house for the price prediction so far, but we have a whole lot of additional information. So let's make use of that. The mathematical idea is that we create a more complex (but still linear) model that also includes other features.\n\nLet's recall that a linear  model looks as follows:\n\n    y = SUM(coeff[i]*x[i]) + intercept\n    \nThis means that we are not limited to single feature `x`, but we can use many features `x[0]...x[n]`. Let's do that with the house data!","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Adding more Features</h1>\n<p>The RMSE tells us that on average our prediction actually performs pretty bad. How can we improve that? Obviously we used only the size of the house for the price prediction so far, but we have a whole lot of additional information. So let&rsquo;s make use of that. The mathematical idea is that we create a more complex (but still linear) model that also includes other features.</p>\n<p>Let&rsquo;s recall that a linear model looks as follows:</p>\n<pre><code>y = SUM(coeff[i]*x[i]) + intercept\n</code></pre>\n<p>This means that we are not limited to single feature <code>x</code>, but we can use many features <code>x[0]...x[n]</code>. Let&rsquo;s do that with the house data!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776110_237055637","id":"20180303-140614_1726950739","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1439"},{"text":"rawData.printSchema","user":"anonymous","dateUpdated":"2018-03-10T12:32:39+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: long (nullable = true)\n |-- date: string (nullable = true)\n |-- price: decimal(7,0) (nullable = true)\n |-- bedrooms: integer (nullable = true)\n |-- bathrooms: double (nullable = true)\n |-- sqft_living: integer (nullable = true)\n |-- sqft_lot: integer (nullable = true)\n |-- floors: double (nullable = true)\n |-- waterfront: integer (nullable = true)\n |-- view: integer (nullable = true)\n |-- condition: integer (nullable = true)\n |-- grade: integer (nullable = true)\n |-- sqft_above: integer (nullable = true)\n |-- sqft_basement: integer (nullable = true)\n |-- yr_built: integer (nullable = true)\n |-- yr_renovated: integer (nullable = true)\n |-- zipcode: integer (nullable = true)\n |-- lat: double (nullable = true)\n |-- long: double (nullable = true)\n |-- sqft_living15: integer (nullable = true)\n |-- sqft_lot15: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1520684776111_236670888","id":"20180303-141056_524994228","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:40+0000","dateFinished":"2018-03-10T12:32:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1440"},{"text":"// Extract features using VectorAssembler\nval vectorAssembler = new VectorAssembler()\n    .setInputCols(Array(\"bedrooms\", \"bathrooms\", \"sqft_living\", \"sqft_lot\", \"floors\", \"waterfront\", \"view\", \"condition\", \"grade\", \"sqft_above\", \"sqft_basement\", \"yr_built\", \"yr_renovated\", \"sqft_living15\", \"sqft_lot15\"))\n    .setOutputCol(\"features\")\nval features = vectorAssembler.transform(rawData)\n\nz.show(features.limit(10))","user":"anonymous","dateUpdated":"2018-03-10T12:32:44+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vectorAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_a3867af1dc1c\nfeatures: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 20 more fields]\n"},{"type":"TABLE","data":"id\tdate\tprice\tbedrooms\tbathrooms\tsqft_living\tsqft_lot\tfloors\twaterfront\tview\tcondition\tgrade\tsqft_above\tsqft_basement\tyr_built\tyr_renovated\tzipcode\tlat\tlong\tsqft_living15\tsqft_lot15\tfeatures\n7129300520\t20141013T000000\t221900\t3\t1.0\t1180\t5650\t1.0\t0\t0\t3\t7\t1180\t0\t1955\t0\t98178\t47.5112\t-122.257\t1340\t5650\t[3.0,1.0,1180.0,5650.0,1.0,0.0,0.0,3.0,7.0,1180.0,0.0,1955.0,0.0,1340.0,5650.0]\n6414100192\t20141209T000000\t538000\t3\t2.25\t2570\t7242\t2.0\t0\t0\t3\t7\t2170\t400\t1951\t1991\t98125\t47.721\t-122.319\t1690\t7639\t[3.0,2.25,2570.0,7242.0,2.0,0.0,0.0,3.0,7.0,2170.0,400.0,1951.0,1991.0,1690.0,7639.0]\n5631500400\t20150225T000000\t180000\t2\t1.0\t770\t10000\t1.0\t0\t0\t3\t6\t770\t0\t1933\t0\t98028\t47.7379\t-122.233\t2720\t8062\t[2.0,1.0,770.0,10000.0,1.0,0.0,0.0,3.0,6.0,770.0,0.0,1933.0,0.0,2720.0,8062.0]\n2487200875\t20141209T000000\t604000\t4\t3.0\t1960\t5000\t1.0\t0\t0\t5\t7\t1050\t910\t1965\t0\t98136\t47.5208\t-122.393\t1360\t5000\t[4.0,3.0,1960.0,5000.0,1.0,0.0,0.0,5.0,7.0,1050.0,910.0,1965.0,0.0,1360.0,5000.0]\n1954400510\t20150218T000000\t510000\t3\t2.0\t1680\t8080\t1.0\t0\t0\t3\t8\t1680\t0\t1987\t0\t98074\t47.6168\t-122.045\t1800\t7503\t[3.0,2.0,1680.0,8080.0,1.0,0.0,0.0,3.0,8.0,1680.0,0.0,1987.0,0.0,1800.0,7503.0]\n7237550310\t20140512T000000\t1225000\t4\t4.5\t5420\t101930\t1.0\t0\t0\t3\t11\t3890\t1530\t2001\t0\t98053\t47.6561\t-122.005\t4760\t101930\t[4.0,4.5,5420.0,101930.0,1.0,0.0,0.0,3.0,11.0,3890.0,1530.0,2001.0,0.0,4760.0,101930.0]\n1321400060\t20140627T000000\t257500\t3\t2.25\t1715\t6819\t2.0\t0\t0\t3\t7\t1715\t0\t1995\t0\t98003\t47.3097\t-122.327\t2238\t6819\t[3.0,2.25,1715.0,6819.0,2.0,0.0,0.0,3.0,7.0,1715.0,0.0,1995.0,0.0,2238.0,6819.0]\n2008000270\t20150115T000000\t291850\t3\t1.5\t1060\t9711\t1.0\t0\t0\t3\t7\t1060\t0\t1963\t0\t98198\t47.4095\t-122.315\t1650\t9711\t[3.0,1.5,1060.0,9711.0,1.0,0.0,0.0,3.0,7.0,1060.0,0.0,1963.0,0.0,1650.0,9711.0]\n2414600126\t20150415T000000\t229500\t3\t1.0\t1780\t7470\t1.0\t0\t0\t3\t7\t1050\t730\t1960\t0\t98146\t47.5123\t-122.337\t1780\t8113\t[3.0,1.0,1780.0,7470.0,1.0,0.0,0.0,3.0,7.0,1050.0,730.0,1960.0,0.0,1780.0,8113.0]\n3793500160\t20150312T000000\t323000\t3\t2.5\t1890\t6560\t2.0\t0\t0\t3\t7\t1890\t0\t2003\t0\t98038\t47.3684\t-122.031\t2390\t7570\t[3.0,2.5,1890.0,6560.0,2.0,0.0,0.0,3.0,7.0,1890.0,0.0,2003.0,0.0,2390.0,7570.0]\n"}]},"apps":[],"jobName":"paragraph_1520684776111_236670888","id":"20180303-141030_2110222935","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:44+0000","dateFinished":"2018-03-10T12:32:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1441"},{"text":"// Train the Model\nval regression = new LinearRegression()\nregression.setFeaturesCol(\"features\")\nregression.setLabelCol(\"price\")\nval model = regression.fit(features)","user":"anonymous","dateUpdated":"2018-03-10T12:32:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"regression: org.apache.spark.ml.regression.LinearRegression = linReg_184be94d4c51\nres36: org.apache.spark.ml.regression.LinearRegression = linReg_184be94d4c51\nres37: org.apache.spark.ml.regression.LinearRegression = linReg_184be94d4c51\nmodel: org.apache.spark.ml.regression.LinearRegressionModel = linReg_184be94d4c51\n"}]},"apps":[],"jobName":"paragraph_1520684776111_236670888","id":"20180303-141311_467196882","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:49+0000","dateFinished":"2018-03-10T12:32:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1442"},{"text":"val pred = model.transform(features)\nval rmse = evaluator.evaluate(pred)\n\nprintln(s\"RMSE = $rmse\")","user":"anonymous","dateUpdated":"2018-03-10T12:32:57+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pred: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 21 more fields]\nrmse: Double = 216029.3746381502\nRMSE = 216029.3746381502\n"}]},"apps":[],"jobName":"paragraph_1520684776112_247059108","id":"20180303-141343_1507151443","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:32:57+0000","dateFinished":"2018-03-10T12:32:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1443"},{"text":"%md\n# Splitting Data: Training and Validation Sets\n\nNow we have a (very simple) linear model which can be used for prediction. We also know its average prediction error (RMSE) - but there is a problem with our approach. Actually we only know how well the model is fit to the data which was used for fitting the model. We do not know how well this model works with houses that it did not see during the fitting process.\n\nTherefore we split up all the data randomly into two separate data sets:\n* One set for training\n* Another set for measruing the models performance on new data","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Splitting Data: Training and Validation Sets</h1>\n<p>Now we have a (very simple) linear model which can be used for prediction. We also know its average prediction error (RMSE) - but there is a problem with our approach. Actually we only know how well the model is fit to the data which was used for fitting the model. We do not know how well this model works with houses that it did not see during the fitting process.</p>\n<p>Therefore we split up all the data randomly into two separate data sets:<br/>* One set for training<br/>* Another set for measruing the models performance on new data</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776112_247059108","id":"20180225-145738_2033473355","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1444"},{"text":"// Split the data - 80% for training, 20% for validation\nval Array(trainData, validationData) = rawData.randomSplit(Array(0.8,0.2))\n\nprintln(s\"traingData = ${trainData.count}\")\nprintln(s\"validationData = ${validationData.count}\")","user":"anonymous","dateUpdated":"2018-03-10T12:33:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: bigint, date: string ... 19 more fields]\nvalidationData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: bigint, date: string ... 19 more fields]\ntraingData = 17302\nvalidationData = 4311\n"}]},"apps":[],"jobName":"paragraph_1520684776112_247059108","id":"20180304-103415_198808093","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:33:03+0000","dateFinished":"2018-03-10T12:33:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1445"},{"text":"%md\n## Create Model with Training Data","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Create Model with Training Data</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776113_246674359","id":"20180225-172430_28070874","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1446"},{"text":"val vectorAssembler = new VectorAssembler()\n    .setInputCols(Array(\"bedrooms\", \"bathrooms\", \"sqft_living\", \"sqft_lot\", \"floors\", \"waterfront\", \"view\", \"condition\", \"grade\", \"sqft_above\", \"sqft_basement\", \"yr_built\", \"yr_renovated\", \"sqft_living15\", \"sqft_lot15\"))\n    .setOutputCol(\"features\")\nval features = vectorAssembler.transform(trainData)\n\nval regression = new LinearRegression()\nregression.setFeaturesCol(\"features\")\nregression.setLabelCol(\"price\")\nval model = regression.fit(features)\n","user":"anonymous","dateUpdated":"2018-03-10T12:33:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vectorAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_1eb11780c00c\nfeatures: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 20 more fields]\nregression: org.apache.spark.ml.regression.LinearRegression = linReg_e9154c3cf7e5\nres45: org.apache.spark.ml.regression.LinearRegression = linReg_e9154c3cf7e5\nres46: org.apache.spark.ml.regression.LinearRegression = linReg_e9154c3cf7e5\nmodel: org.apache.spark.ml.regression.LinearRegressionModel = linReg_e9154c3cf7e5\n"}]},"apps":[],"jobName":"paragraph_1520684776113_246674359","id":"20180304-103603_258606228","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:33:08+0000","dateFinished":"2018-03-10T12:33:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1447"},{"text":"%md\n## Evaluate Model using Validation Data","dateUpdated":"2018-03-10T12:41:51+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Evaluate Model using Validation Data</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776113_246674359","id":"20180225-172447_1125298691","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1448"},{"text":"val features = vectorAssembler.transform(validationData)\nval pred = model.transform(features)\nval rmse = evaluator.evaluate(pred)\n\nprintln(s\"RMSE = $rmse\")\n","user":"anonymous","dateUpdated":"2018-03-10T12:33:18+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"features: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 20 more fields]\npred: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 21 more fields]\nrmse: Double = 217484.90143900202\nRMSE = 217484.90143900202\n"}]},"apps":[],"jobName":"paragraph_1520684776114_247828606","id":"20180304-103618_2081842754","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:33:18+0000","dateFinished":"2018-03-10T12:33:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1449"},{"text":"%md\n# Add more Features\n\nNow let's add even more features. Since we don't have any additional information, we model some of the features differently. So far we used all features as direct linear predictors, which implies that a grade of 4 is twice as good as 2. Maybe that is not the case and not all predictors have a linear influence. Specifically nominal and ordinal features should be modeled differntly as categories. More an that later.\n\nFirst let's have a look at the data agin using Spark `describe`","user":"anonymous","dateUpdated":"2018-03-10T12:43:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Add more Features</h1>\n<p>Now let's add even more features. Since we don't have any additional information, we model some of the features differently. So far we used all features as direct linear predictors, which implies that a grade of 4 is twice as good as 2. Maybe that is not the case and not all predictors have a linear influence. Specifically nominal and ordinal features should be modeled differntly as categories. More an that later.</p>\n<p>First let's have a look at the data agin using Spark <code>describe</code></p>\n"}]},"apps":[],"jobName":"paragraph_1520684776114_247828606","id":"20180224-153308_1063200189","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:43:01+0000","dateFinished":"2018-03-10T12:43:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1450"},{"text":"z.show(rawData.describe())\n","user":"anonymous","dateUpdated":"2018-03-10T12:33:24+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"summary\tid\tdate\tprice\tbedrooms\tbathrooms\tsqft_living\tsqft_lot\tfloors\twaterfront\tview\tcondition\tgrade\tsqft_above\tsqft_basement\tyr_built\tyr_renovated\tzipcode\tlat\tlong\tsqft_living15\tsqft_lot15\ncount\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\t21613\nmean\t4.580301520864988E9\tnull\t540088.1418\t3.37084162309721\t2.1147573219821405\t2079.8997362698374\t15106.967565816869\t1.4943089807060566\t0.007541757275713691\t0.23430342849211122\t3.4094295100171195\t7.656873178179799\t1788.3906907879516\t291.5090454818859\t1971.0051357978994\t84.40225790033776\t98077.93980474715\t47.56005251931704\t-122.21389640494083\t1986.552491556008\t12768.455651691113\nstddev\t2.8765655713120522E9\tnull\t367127.19648270035\t0.930061831147451\t0.770163157217741\t918.4408970468096\t41420.51151513551\t0.5399888951423489\t0.08651719772788748\t0.7663175692736114\t0.6507430463662044\t1.1754587569743344\t828.0909776519175\t442.57504267746685\t29.373410802386243\t401.67924001917504\t53.505026257472466\t0.13856371024192368\t0.14082834238139288\t685.3913042527788\t27304.179631338524\nmin\t1000102\t20140502T000000\t75000\t0\t0.0\t290\t520\t1.0\t0\t0\t1\t1\t290\t0\t1900\t0\t98001\t47.1559\t-122.519\t399\t651\nmax\t9900000190\t20150527T000000\t7700000\t33\t8.0\t13540\t1651359\t3.5\t1\t4\t5\t13\t9410\t4820\t2015\t2015\t98199\t47.7776\t-121.315\t6210\t871200\n"}]},"apps":[],"jobName":"paragraph_1520684776114_247828606","id":"20180303-143756_621375550","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:33:25+0000","dateFinished":"2018-03-10T12:33:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1451"},{"text":"z.show(rawData.select(countDistinct(col(\"zipcode\"))))","user":"anonymous","dateUpdated":"2018-03-10T12:33:34+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"count(DISTINCT zipcode)\n70\n"}]},"apps":[],"jobName":"paragraph_1520684776115_247443857","id":"20180303-143935_1009221693","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:33:34+0000","dateFinished":"2018-03-10T12:33:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1452"},{"text":"%md\n## New Features using One-Hot Encoding\n\nA simple but powerful method for creating new features from categories (i.e. nominal and ordinal features) is to use One-Hot-Encoding.","dateUpdated":"2018-03-10T12:26:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>New Features using One-Hot Encoding</h2>\n<p>A simple but powerful method for creating new features from categories (i.e. nominal and ordinal features) is to use One-Hot-Encoding.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1520684776115_247443857","id":"20180304-105127_866320180","dateCreated":"2018-03-10T12:26:16+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1453"},{"text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature._\n\nval pipeline = new Pipeline().setStages(Array(\n    new StringIndexer()\n        .setInputCol(\"bathrooms\")\n        .setOutputCol(\"bathrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bathrooms_idx\")\n        .setOutputCol(\"bathrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"bedrooms\")\n        .setOutputCol(\"bedrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bedrooms_idx\")\n        .setOutputCol(\"bedrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"floors\")\n        .setOutputCol(\"floors_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"floors_idx\")\n        .setOutputCol(\"floors_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"view\")\n        .setOutputCol(\"view_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"condition\")\n        .setOutputCol(\"condition_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"grade\")\n        .setOutputCol(\"grade_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"grade_idx\")\n        .setOutputCol(\"grade_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"zipcode\")\n        .setOutputCol(\"zipcode_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"zipcode_idx\")\n        .setOutputCol(\"zipcode_onehot\"),\n    new VectorAssembler()\n        .setInputCols(Array(\"bedrooms_onehot\", \"bathrooms_onehot\", \"sqft_living\", \"sqft_lot\", \"floors_onehot\", \"waterfront\", \"view_onehot\", \"condition_onehot\", \"grade_onehot\", \"sqft_above\", \"sqft_basement\", \"yr_built\", \"yr_renovated\", \"zipcode_onehot\", \"sqft_living15\", \"sqft_lot15\"))\n        .setOutputCol(\"features\"),\n    new LinearRegression()\n        .setFeaturesCol(\"features\")\n        .setLabelCol(\"price\")\n    )\n)\n\nval model = pipeline.fit(trainData)\n\nval pred = model.transform(validationData)\nval rmse = evaluator.evaluate(pred)\n\nprintln(s\"RMSE = $rmse\")","user":"anonymous","dateUpdated":"2018-03-10T12:56:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature._\npipeline: org.apache.spark.ml.Pipeline = pipeline_0b48009bcf1e\nmodel: org.apache.spark.ml.PipelineModel = pipeline_0b48009bcf1e\npred: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 33 more fields]\nrmse: Double = 162988.04416301352\nRMSE = 162988.04416301352\n"}]},"apps":[],"jobName":"paragraph_1520684776115_247443857","id":"20180225-145446_499092244","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T12:56:47+0000","dateFinished":"2018-03-10T12:57:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1454"},{"text":"%md\n# Adding more Models\nAnother way of improving the overall prediction is to add multiple models to a single Pipeline. Each downstream ML algorithm has access to the prediction of the previous stages. This way we can create two independant models and eventually fit a mixed model as the last step.","user":"anonymous","dateUpdated":"2018-03-10T13:01:45+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Adding more Models</h1>\n<p>Another way of improving the overall prediction is to add multiple models to a single Pipeline. Each downstream ML algorithm has access to the prediction of the previous stages. This way we can create two independant models and eventually fit a mixed model as the last step.</p>\n"}]},"apps":[],"jobName":"paragraph_1520684776116_245520112","id":"20180304-103951_1075865665","dateCreated":"2018-03-10T12:26:16+0000","dateStarted":"2018-03-10T13:01:45+0000","dateFinished":"2018-03-10T13:01:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1455"},{"text":"val pipeline = new Pipeline().setStages(Array(\n    new StringIndexer()\n        .setInputCol(\"bathrooms\")\n        .setOutputCol(\"bathrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bathrooms_idx\")\n        .setOutputCol(\"bathrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"bedrooms\")\n        .setOutputCol(\"bedrooms_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"bedrooms_idx\")\n        .setOutputCol(\"bedrooms_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"floors\")\n        .setOutputCol(\"floors_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"floors_idx\")\n        .setOutputCol(\"floors_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"view\")\n        .setOutputCol(\"view_onehot\"),\n    new OneHotEncoder()\n        .setInputCol(\"condition\")\n        .setOutputCol(\"condition_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"grade\")\n        .setOutputCol(\"grade_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"grade_idx\")\n        .setOutputCol(\"grade_onehot\"),\n    new StringIndexer()\n        .setInputCol(\"zipcode\")\n        .setOutputCol(\"zipcode_idx\")\n        .setHandleInvalid(\"keep\"),\n    new OneHotEncoder()\n        .setInputCol(\"zipcode_idx\")\n        .setOutputCol(\"zipcode_onehot\"),\n    new VectorAssembler()\n        .setInputCols(Array(\"bedrooms_onehot\", \"bathrooms_onehot\", \"sqft_living\", \"sqft_lot\", \"floors_onehot\", \"waterfront\", \"view_onehot\", \"condition_onehot\", \"grade_onehot\", \"sqft_above\", \"sqft_basement\", \"yr_built\", \"yr_renovated\", \"zipcode_onehot\", \"sqft_living15\", \"sqft_lot15\"))\n        .setOutputCol(\"features\"),\n    new LinearRegression()\n        .setFeaturesCol(\"features\")\n        .setLabelCol(\"price\")\n        .setPredictionCol(\"linear_prediction\"),\n    new GeneralizedLinearRegression()\n        .setFeaturesCol(\"features\")\n        .setLabelCol(\"price\")\n        .setFamily(\"poisson\")\n        .setLink(\"log\")\n        .setPredictionCol(\"poisson_prediction\"),\n    new VectorAssembler()\n        .setInputCols(Array(\"linear_prediction\",\"poisson_prediction\"))\n        .setOutputCol(\"pred_features\"),\n    new LinearRegression()\n        .setFeaturesCol(\"pred_features\")\n        .setLabelCol(\"price\")\n        .setPredictionCol(\"prediction\")\n    )\n)\n\nval model = pipeline.fit(trainData)\n\nval pred = model.transform(validationData)\nval rmse = evaluator.evaluate(pred)\n\nprintln(s\"RMSE = $rmse\")","user":"anonymous","dateUpdated":"2018-03-10T12:56:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pipeline: org.apache.spark.ml.Pipeline = pipeline_3ff1cb273a63\nmodel: org.apache.spark.ml.PipelineModel = pipeline_3ff1cb273a63\npred: org.apache.spark.sql.DataFrame = [id: bigint, date: string ... 36 more fields]\nrmse: Double = 147378.84201342287\nRMSE = 147378.84201342287\n"}]},"apps":[],"jobName":"paragraph_1520686417871_-1991052603","id":"20180310-125337_48072730","dateCreated":"2018-03-10T12:53:37+0000","dateStarted":"2018-03-10T12:56:54+0000","dateFinished":"2018-03-10T12:57:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1456"},{"text":"%md\n### Inspect Model\nLet us inspect the coefficients of the last step, which tells us which of both models (linear or poisson) has more weight.","user":"anonymous","dateUpdated":"2018-03-10T13:00:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Inspect Model</h3>\n<p>Let us inspect the coefficients of the last step, which tells us which of both models (linear or poisson) has more weight.</p>\n"}]},"apps":[],"jobName":"paragraph_1520686771692_-219746932","id":"20180310-125931_108725758","dateCreated":"2018-03-10T12:59:31+0000","dateStarted":"2018-03-10T13:00:18+0000","dateFinished":"2018-03-10T13:00:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1457"},{"text":"model.stages.last.asInstanceOf[LinearRegressionModel].coefficients","user":"anonymous","dateUpdated":"2018-03-10T12:59:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res100: org.apache.spark.ml.linalg.Vector = [0.20519530201086167,0.7948046191266682]\n"}]},"apps":[],"jobName":"paragraph_1520686614510_771519476","id":"20180310-125654_760871982","dateCreated":"2018-03-10T12:56:54+0000","dateStarted":"2018-03-10T12:59:22+0000","dateFinished":"2018-03-10T12:59:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1458"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520686659831_762331475","id":"20180310-125739_1025770034","dateCreated":"2018-03-10T12:57:39+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1459"}],"name":"Linear Regression - Predicting House Prices Full","id":"2DAUPTSJD","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}