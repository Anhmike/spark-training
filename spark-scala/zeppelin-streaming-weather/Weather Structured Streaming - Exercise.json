{"paragraphs":[{"text":"%md\n# Load Station Data\n\nNow we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple. Nevertheless we will explicitly specify a schema, since we do not want to rely on the automatic type inference from Spark.\n","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Load Station Data</h1>\n<p>Now we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple. Nevertheless we will explicitly specify a schema, since we do not want to rely on the automatic type inference from Spark.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952687458_-1882023019","id":"20170109-022408_398981917","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9933"},{"text":"import org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructField\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.types.FloatType\nimport org.apache.spark.sql.types.DateType\n\ndef extractFloat = udf((v:String) => if (v != null) v.toFloat else None, FloatType)\n\nval isdSchema = StructType(\n        StructField(\"usaf\", StringType) ::\n        StructField(\"wban\", StringType) ::\n        StructField(\"name\", StringType) ::\n        StructField(\"country\", StringType) ::\n        StructField(\"state\", StringType) ::\n        StructField(\"icao\", StringType) ::\n        StructField(\"latitude\", StringType) ::\n        StructField(\"longitude\", StringType) ::\n        StructField(\"elevation\", StringType) ::\n        StructField(\"date_begin\", DateType) ::\n        StructField(\"date_end\", DateType) ::\n        Nil\n    )\nval isd = sqlContext.read\n    .option(\"header\",\"true\")\n    .option(\"dateFormat\",\"yyyyMMdd\")\n    .schema(isdSchema)\n    .csv(\"s3://dimajix-training/data/weather/isd-history\")\n    .withColumn(\"latitude\", extractFloat($\"latitude\"))\n    .withColumn(\"longitude\", extractFloat($\"longitude\"))\n    .withColumn(\"elevation\", extractFloat($\"elevation\"))\n    \n\nz.show(isd.limit(10))","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687458_-1882023019","id":"20170109-022420_197453754","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9934"},{"text":"isd.printSchema()","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687458_-1882023019","id":"20170109-022449_34670710","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9935"},{"text":"%md\n# Spark Structured Streaming","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Spark Structured Streaming</h1>\n"}]},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-022507_1035657177","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9936"},{"text":"%md\n# 1. Connect to data source\n\nFirst you need to run the netcat program, for example via\n\n    spark-training/utils/pynetcat.py -I1 -B10 -P9977 < weather_sample.txt\n\nThen we connect to the raw data socket as the datasource by using the `DataStreamReader` API via `spark.readStream`. We need to specify the options `host`, `port` and we need to use the format `socket` for connecting to the data source. The socket will stream weather data samples in raw format, i.e. one record per line.","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>1. Connect to data source</h1>\n<p>First you need to run the netcat program, for example via</p>\n<pre><code>spark-training/utils/pynetcat.py -I1 -B10 -P9977 &lt; weather_sample.txt\n</code></pre>\n<p>Then we connect to the raw data socket as the datasource by using the <code>DataStreamReader</code> API via <code>spark.readStream</code>. We need to specify the options <code>host</code>, <code>port</code> and we need to use the format <code>socket</code> for connecting to the data source. The socket will stream weather data samples in raw format, i.e. one record per line.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-022532_52613486","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9937"},{"text":"// Fill in the correct AWS VPC address of your master host\nval master = \"kku.training.dimajix-aws.net\"\n\n// Connect to raw text stream socket using the DataStreamReader API via spark.readStream. You need to specify the options `host`, `port` and you need to use the format `socket`\nval lines = ... // YOUR CODE HERE\n","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-022559_819187627","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9938"},{"text":"%md\n## 2. Extract Weather Data\n\nWe need to extract the weather data from the raw string. This can be done using SparkSQL methods. Since this is a rather time-consuming data-fiddling task, you can simply use the code as-is.","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2. Extract Weather Data</h2>\n<p>We need to extract the weather data from the raw string. This can be done using SparkSQL methods. Since this is a rather time-consuming data-fiddling task, you can simply use the code as-is.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-023945_1454623182","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9939"},{"text":"import org.apache.spark.sql.types.IntegerType\nimport org.apache.spark.sql.types.FloatType\n\nval weather = lines\n    .withColumn(\"date\", lines(\"value\").substr(16,8))\n    .withColumn(\"time\", lines(\"value\").substr(24,4))\n    .withColumn(\"usaf\", lines(\"value\").substr(5,6))\n    .withColumn(\"wban\", lines(\"value\").substr(11,5))\n    .withColumn(\"air_temperature_quality\", lines(\"value\").substr(93,1).cast(IntegerType))\n    .withColumn(\"air_temperature\", lines(\"value\").substr(88,5).cast(FloatType)/10.0)\n    .withColumn(\"wind_speed_quality\", lines(\"value\").substr(70,1).cast(IntegerType))\n    .withColumn(\"wind_speed\", lines(\"value\").substr(66,4).cast(FloatType)/10.0)\n","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-022624_1297431457","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9940"},{"text":"%md\n## 3. Peek inside Stream\n\nOne nice thing about structured streaming is that it is super easy to peek inside a stream. You need to perform the following steps:\n1. Create a `DataStreamWriter` object using the `writeStream` method of your DataFrame.\n2. Set the format to `console`\n3. Set the output mode to `append`\n4. Specify a `checkPointLocation` on HDFS (ok, this is not trivial, so it is in the code below)\n5. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3. Peek inside Stream</h2>\n<p>One nice thing about structured streaming is that it is super easy to peek inside a stream. You need to perform the following steps:</p>\n<ol>\n<li>Create a <code>DataStreamWriter</code> object using the <code>writeStream</code> method of your DataFrame.</li>\n<li>Set the format to <code>console</code></li>\n<li>Set the output mode to <code>append</code></li>\n<li>Specify a <code>checkPointLocation</code> on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-024025_443642059","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9941"},{"text":"val query = ... // YOUR CODE HERE\n    ...\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-print\")\n    ...","dateUpdated":"2018-04-05T18:25:09+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687459_-1882407767","id":"20170109-023319_1896648636","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9942"},{"text":"%md\n### 3.1 Stopping the Query\n\nIn contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the `stop` method on the query object. This makes working with streams much easier.","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>3.1 Stopping the Query</h3>\n<p>In contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the <code>stop</code> method on the query object. This makes working with streams much easier.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170218-144954_1651121593","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9943"},{"text":"// YOUR CODE HERE","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170109-023447_927715135","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9944"},{"text":"%md\n## 4. Perform Calculation\n\nAgain we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:\n\n* Minimum air temperature\n* Maximum air temperature\n* Minimum wind speed\n* Maximum wind speed\n\nAgain we need to evaulate the \"quality\" fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>4. Perform Calculation</h2>\n<p>Again we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:</p>\n<ul>\n<li>Minimum air temperature</li>\n<li>Maximum air temperature</li>\n<li>Minimum wind speed</li>\n<li>Maximum wind speed</li>\n</ul>\n<p>Again we need to evaulate the &ldquo;quality&rdquo; fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170109-023458_107574560","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9945"},{"text":"// Create a broadcast version of the station list. This seems to make sense specifically for streaming\nval stations = broadcast(isd)\n\nval aggregated_weather = ...\n    // 1. Join weather data with station data on columns 'usaf' and 'wban'\n\n    // 2. Extract year from date column (first four letters), store it in a new column called 'year'\n\n    // 4. Group by country (from isd) and year (from above)\n\n    // 5. Perform aggregations of min/max of temperature and wind speed. Again pay attention to quality flags!\n","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nstations: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [usaf: string, wban: string ... 9 more fields]\n\naggregated_weather: org.apache.spark.sql.DataFrame = [country: string, year: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170109-024107_164598352","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9946"},{"text":"%md\n### 4.1 Peek Inside\n\nThis is not what we really want at the end, but let's try to peek inside the infinite streaming table. This is achieved by the same steps as above:\n\n1. Create a DataStreamWriter object using the writeStream method of your DataFrame `aggregated_weather`.\n2. Set the format to `console`\n3. Set the output mode to `append` (aggregations do not support `append`)\n4. Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)\n5. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>4.1 Peek Inside</h3>\n<p>This is not what we really want at the end, but let's try to peek inside the infinite streaming table. This is achieved by the same steps as above:</p>\n<ol>\n<li>Create a DataStreamWriter object using the writeStream method of your DataFrame <code>aggregated_weather</code>.</li>\n<li>Set the format to <code>console</code></li>\n<li>Set the output mode to <code>append</code> (aggregations do not support <code>append</code>)</li>\n<li>Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170218-153633_1699313591","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9947"},{"text":"val consoleQuery = // YOUR CODE HERE\n    ...\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-agg\")\n    ...","dateUpdated":"2018-04-05T18:25:15+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687460_-1884331512","id":"20170109-024151_139400986","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9948"},{"text":"// Stop the query again\n// YOUR CODE HERE","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952687461_-1884716261","id":"20170109-024445_883855935","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9949"},{"text":"%md\n## 5. Create live Table\n\nWe can also use a \"memory\" output, which is a queryable live table. In order to do so, we again create a new table, but this time with format `memory` and an explicit query name `aggregated_weather`. Using a `memory` output will create a dynamic table in memory (only `complete` output supported right now), which can be queried using SQL.\n\n1. Create a DataStreamWriter object using the writeStream method of your DataFrame `aggregated_weather`.\n2. Set the format to `memory`\n3. Set the output mode to `complete`\n4. Set the query name to `aggregated_weather`\n5. Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)\n6. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Create live Table</h2>\n<p>We can also use a &ldquo;memory&rdquo; output, which is a queryable live table. In order to do so, we again create a new table, but this time with format <code>memory</code> and an explicit query name <code>aggregated_weather</code>. Using a <code>memory</code> output will create a dynamic table in memory (only <code>complete</code> output supported right now), which can be queried using SQL.</p>\n<ol>\n<li>Create a DataStreamWriter object using the writeStream method of your DataFrame <code>aggregated_weather</code>.</li>\n<li>Set the format to <code>memory</code></li>\n<li>Set the output mode to <code>complete</code></li>\n<li>Set the query name to <code>aggregated_weather</code></li>\n<li>Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952687461_-1884716261","id":"20170109-043321_2106212152","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9950"},{"text":"val tableQuery = ... // YOUR CODE HERE\n    ...\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-table\")\n    ...\n    .start()","dateUpdated":"2018-04-05T18:25:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687461_-1884716261","id":"20170109-024536_1643682762","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9951"},{"text":"%sql\nselect * from aggregated_weather","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"country","index":0,"aggr":"sum"}],"values":[{"name":"year","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"country","index":0,"aggr":"sum"},"yAxis":{"name":"year","index":1,"aggr":"sum"}}},"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687461_-1884716261","id":"20170109-043226_2033527472","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9952"},{"text":"// Stop the query again\ntableQuery.stop()","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952687462_-1883562014","id":"20170109-043235_704854873","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9953"},{"text":"","dateUpdated":"2018-04-05T18:24:47+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952687462_-1883562014","id":"20170109-043303_576621974","dateCreated":"2018-04-05T18:24:47+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9954"}],"name":"Weather Structured Streaming - Exercise","id":"2DAMV6SYH","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}