{"paragraphs":[{"text":"%md\n# Load Station Data\n\nNow we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple. Nevertheless we will explicitly specify a schema, since we do not want to rely on the automatic type inference from Spark.\n","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Load Station Data</h1>\n<p>Now we load the station meta data using traditional SparkSQL DataFrame methods. Since the meta data is stored as a simple CSV, this should be simple. Nevertheless we will explicitly specify a schema, since we do not want to rely on the automatic type inference from Spark.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952749194_1645663026","id":"20170109-022408_398981917","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11560"},{"text":"import org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructField\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.types.FloatType\nimport org.apache.spark.sql.types.DateType\n\ndef extractFloat = udf((v:String) => if (v != null) v.toFloat else None, FloatType)\n\nval isdSchema = StructType(\n        StructField(\"usaf\", StringType) ::\n        StructField(\"wban\", StringType) ::\n        StructField(\"name\", StringType) ::\n        StructField(\"country\", StringType) ::\n        StructField(\"state\", StringType) ::\n        StructField(\"icao\", StringType) ::\n        StructField(\"latitude\", StringType) ::\n        StructField(\"longitude\", StringType) ::\n        StructField(\"elevation\", StringType) ::\n        StructField(\"date_begin\", DateType) ::\n        StructField(\"date_end\", DateType) ::\n        Nil\n    )\nval isd = sqlContext.read\n    .option(\"header\",\"true\")\n    .option(\"dateFormat\",\"yyyyMMdd\")\n    .schema(isdSchema)\n    .csv(\"s3://dimajix-training/data/weather/isd-history\")\n    .withColumn(\"latitude\", extractFloat($\"latitude\"))\n    .withColumn(\"longitude\", extractFloat($\"longitude\"))\n    .withColumn(\"elevation\", extractFloat($\"elevation\"))\n    \n\nz.show(isd.limit(10))","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"usaf\twban\tname\tcountry\tstate\ticao\tlatitude\tlongitude\televation\tdate_begin\tdate_end\n007005\t99999\tCWOS 07005\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007011\t99999\tCWOS 07011\tnull\tnull\tnull\tnull\tnull\tnull\t2011-10-25\t2012-11-29\n007018\t99999\tWXPOD 7018\tnull\tnull\tnull\t0.0\t0.0\t7018.0\t2011-03-09\t2013-07-30\n007025\t99999\tCWOS 07025\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007026\t99999\tWXPOD 7026\tAF\tnull\tnull\t0.0\t0.0\t7026.0\t2012-07-13\t2014-11-20\n007034\t99999\tCWOS 07034\tnull\tnull\tnull\tnull\tnull\tnull\t2012-10-24\t2012-11-06\n007037\t99999\tCWOS 07037\tnull\tnull\tnull\tnull\tnull\tnull\t2011-12-02\t2012-11-25\n007044\t99999\tCWOS 07044\tnull\tnull\tnull\tnull\tnull\tnull\t2012-01-27\t2012-01-27\n007047\t99999\tCWOS 07047\tnull\tnull\tnull\tnull\tnull\tnull\t2012-06-13\t2012-07-17\n007052\t99999\tCWOS 07052\tnull\tnull\tnull\tnull\tnull\tnull\t2012-11-29\t2012-11-30\n"}]},"apps":[],"jobName":"paragraph_1522952749195_1645278277","id":"20170109-022420_197453754","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11561"},{"text":"isd.printSchema()","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- usaf: string (nullable = true)\n |-- wban: string (nullable = true)\n |-- name: string (nullable = true)\n |-- country: string (nullable = true)\n |-- state: string (nullable = true)\n |-- icao: string (nullable = true)\n |-- latitude: float (nullable = true)\n |-- longitude: float (nullable = true)\n |-- elevation: float (nullable = true)\n |-- date_begin: date (nullable = true)\n |-- date_end: date (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1522952749195_1645278277","id":"20170109-022449_34670710","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11562"},{"text":"%md\n# Spark Structured Streaming","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Spark Structured Streaming</h1>\n"}]},"apps":[],"jobName":"paragraph_1522952749195_1645278277","id":"20170109-022507_1035657177","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11563"},{"text":"%md\n# 1. Connect to data source\n\nFirst you need to run the netcat program, for example via\n\n    spark-training/utils/pynetcat.py -I1 -B10 -P9977 < weather_sample.txt\n\nThen we connect to the raw data socket as the datasource by using the `DataStreamReader` API via `spark.readStream`. We need to specify the options `host`, `port` and we need to use the format `socket` for connecting to the data source. The socket will stream weather data samples in raw format, i.e. one record per line.","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>1. Connect to data source</h1>\n<p>First you need to run the netcat program, for example via</p>\n<pre><code>spark-training/utils/pynetcat.py -I1 -B10 -P9977 &lt; weather_sample.txt\n</code></pre>\n<p>Then we connect to the raw data socket as the datasource by using the <code>DataStreamReader</code> API via <code>spark.readStream</code>. We need to specify the options <code>host</code>, <code>port</code> and we need to use the format <code>socket</code> for connecting to the data source. The socket will stream weather data samples in raw format, i.e. one record per line.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952749195_1645278277","id":"20170109-022532_52613486","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11564"},{"text":"// Fill in the correct AWS VPC address of your master host\nval master = \"kku.training.dimajix-aws.net\"\n\n// Connect to raw text stream socket using the DataStreamReader API via spark.readStream. You need to specify the options `host`, `port` and you need to use the format `socket`\nval lines = spark.readStream\n  .format(\"socket\")\n  .option(\"host\", master)\n  .option(\"port\", 9977)\n  .load()","dateUpdated":"2018-04-05T18:26:08+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmaster: String = 10.200.101.118\n\nlines: org.apache.spark.sql.DataFrame = [value: string]\n"}]},"apps":[],"jobName":"paragraph_1522952749195_1645278277","id":"20170109-022559_819187627","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11565"},{"text":"%md\n## 2. Extract Weather Data\n\nWe need to extract the weather data from the raw string. This can be done using SparkSQL methods. Since this is a rather time-consuming data-fiddling task, you can simply use the code as-is.","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2. Extract Weather Data</h2>\n<p>We need to extract the weather data from the raw string. This can be done using SparkSQL methods. Since this is a rather time-consuming data-fiddling task, you can simply use the code as-is.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170109-023945_1454623182","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11566"},{"text":"import org.apache.spark.sql.types.IntegerType\nimport org.apache.spark.sql.types.FloatType\n\nval weather = lines\n    .withColumn(\"date\", lines(\"value\").substr(16,8))\n    .withColumn(\"time\", lines(\"value\").substr(24,4))\n    .withColumn(\"usaf\", lines(\"value\").substr(5,6))\n    .withColumn(\"wban\", lines(\"value\").substr(11,5))\n    .withColumn(\"air_temperature_quality\", lines(\"value\").substr(93,1).cast(IntegerType))\n    .withColumn(\"air_temperature\", lines(\"value\").substr(88,5).cast(FloatType)/10.0)\n    .withColumn(\"wind_speed_quality\", lines(\"value\").substr(70,1).cast(IntegerType))\n    .withColumn(\"wind_speed\", lines(\"value\").substr(66,4).cast(FloatType)/10.0)\n","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.sql.types.IntegerType\n\nimport org.apache.spark.sql.types.FloatType\n\nweather: org.apache.spark.sql.DataFrame = [value: string, date: string ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170109-022624_1297431457","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11567"},{"text":"%md\n## 3. Peek inside Stream\n\nOne nice thing about structured streaming is that it is super easy to peek inside a stream. You need to perform the following steps:\n1. Create a `DataStreamWriter` object using the `writeStream` method of your DataFrame.\n2. Set the format to `console`\n3. Set the output mode to `append`\n4. Specify a `checkPointLocation` on HDFS (ok, this is not trivial, so it is in the code below)\n5. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3. Peek inside Stream</h2>\n<p>One nice thing about structured streaming is that it is super easy to peek inside a stream. You need to perform the following steps:</p>\n<ol>\n<li>Create a <code>DataStreamWriter</code> object using the <code>writeStream</code> method of your DataFrame.</li>\n<li>Set the format to <code>console</code></li>\n<li>Set the output mode to <code>append</code></li>\n<li>Specify a <code>checkPointLocation</code> on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170109-024025_443642059","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11568"},{"text":"val query = weather.writeStream\n    .format(\"console\")\n    .outputMode(\"append\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-print\")\n    .start()","dateUpdated":"2018-04-05T18:26:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nquery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query [id = 5f900092-adaf-4eac-af11-85e4cab2428e, runId = 65c270ef-608e-401c-80d7-c24c8b5ff7bf] [state = ACTIVE]\n"}]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170109-023319_1896648636","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11569"},{"text":"%md\n### 3.1 Stopping the Query\n\nIn contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the `stop` method on the query object. This makes working with streams much easier.","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>3.1 Stopping the Query</h3>\n<p>In contrast to the RDD API, we can simply stop an individual query instead of a whole StreamingContext by simply calling the <code>stop</code> method on the query object. This makes working with streams much easier.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170218-144954_1651121593","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11570"},{"text":"query.stop()","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952749196_1643354532","id":"20170109-023447_927715135","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11571"},{"text":"%md\n## 4. Perform Calculation\n\nAgain we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:\n\n* Minimum air temperature\n* Maximum air temperature\n* Minimum wind speed\n* Maximum wind speed\n\nAgain we need to evaulate the \"quality\" fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>4. Perform Calculation</h2>\n<p>Again we perform a grouped aggregation of some metrics. We are inetersted in the following metrics, grouped by country and year:</p>\n<ul>\n<li>Minimum air temperature</li>\n<li>Maximum air temperature</li>\n<li>Minimum wind speed</li>\n<li>Maximum wind speed</li>\n</ul>\n<p>Again we need to evaulate the &ldquo;quality&rdquo; fields of the incoming data to decide if the correspong wind speed or air temeprature is valid.</p>\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-023458_107574560","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11572"},{"text":"val stations = broadcast(isd)\n\nval aggregated_weather = weather\n    // 1. Join weather data with station data on columns 'usaf' and 'wban'\n    .join(stations, weather(\"usaf\") === isd(\"usaf\") && weather(\"wban\") === isd(\"wban\"))\n    // 2. Extract year from date column (first four letters), store it in a new column called  'year'\n    .withColumn(\"year\", weather(\"date\").substr(0,4))\n    // 3. Group by country (from isd) and year (from above)\n    .groupBy(isd(\"country\"), $\"year\")\n    // 4. Perform aggregations of min/max of temperature and wind speed. Again pay attention to quality flags!\n    .agg(\n        min(when(col(\"air_temperature_quality\") === lit(1), col(\"air_temperature\"))).as(\"temp_min\"),\n        max(when(col(\"air_temperature_quality\") === lit(1), col(\"air_temperature\"))).as(\"temp_max\"),\n        min(when(col(\"wind_speed_quality\") === lit(1), col(\"wind_speed\"))).as(\"wind_min\"),\n        max(when(col(\"wind_speed_quality\") === lit(1), col(\"wind_speed\"))).as(\"wind_max\")\n    )","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nstations: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [usaf: string, wban: string ... 9 more fields]\n\naggregated_weather: org.apache.spark.sql.DataFrame = [country: string, year: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-024107_164598352","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11573"},{"text":"%md\n### 4.1 Peek Inside\n\nThis is not what we really want at the end, but let's try to peek inside the infinite streaming table. This is achieved by the same steps as above:\n\n1. Create a DataStreamWriter object using the writeStream method of your DataFrame `aggregated_weather`.\n2. Set the format to `console`\n3. Set the output mode to `complete` (aggregations do not support `append`)\n4. Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)\n5. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>4.1 Peek Inside</h3>\n<p>This is not what we really want at the end, but let's try to peek inside the infinite streaming table. This is achieved by the same steps as above:</p>\n<ol>\n<li>Create a DataStreamWriter object using the writeStream method of your DataFrame <code>aggregated_weather</code>.</li>\n<li>Set the format to <code>console</code></li>\n<li>Set the output mode to <code>complete</code> (aggregations do not support <code>append</code>)</li>\n<li>Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170218-153819_1474123022","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11574"},{"text":"val consoleQuery = aggregated_weather.writeStream\n    .format(\"console\")\n    .outputMode(\"complete\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-agg\")\n    .start()","dateUpdated":"2018-04-05T18:26:23+0000","config":{"colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nconsoleQuery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query [id = 926eec84-d3cf-4dac-a181-4c6caa4c2a04, runId = 55dc953a-8dcc-4bf6-833f-c397fd271c29] [state = ACTIVE]\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-024151_139400986","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11575"},{"text":"// Stop the Query again\nconsoleQuery.stop()","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-024445_883855935","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11576"},{"text":"%md\n## 5. Create live Table\n\nWe can also use a \"memory\" output, which is a queryable live table. In order to do so, we again create a new table, but this time with format `memory` and an explicit query name `aggregated_weather`. Using a `memory` output will create a dynamic table in memory (only `complete` output supported right now), which can be queried using SQL.\n\n1. Create a DataStreamWriter object using the writeStream method of your DataFrame `aggregated_weather`.\n2. Set the format to `memory`\n3. Set the output mode to `complete`\n4. Set the query name to `aggregated_weather`\n5. Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)\n6. Start the continuous query via `start`","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Create live Table</h2>\n<p>We can also use a &ldquo;memory&rdquo; output, which is a queryable live table. In order to do so, we again create a new table, but this time with format <code>memory</code> and an explicit query name <code>aggregated_weather</code>. Using a <code>memory</code> output will create a dynamic table in memory (only <code>complete</code> output supported right now), which can be queried using SQL.</p>\n<ol>\n<li>Create a DataStreamWriter object using the writeStream method of your DataFrame <code>aggregated_weather</code>.</li>\n<li>Set the format to <code>memory</code></li>\n<li>Set the output mode to <code>complete</code></li>\n<li>Set the query name to <code>aggregated_weather</code></li>\n<li>Specify a checkPointLocation on HDFS (ok, this is not trivial, so it is in the code below)</li>\n<li>Start the continuous query via <code>start</code></li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-043321_2106212152","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11577"},{"text":"val tableQuery = aggregated_weather.writeStream\n    .outputMode(\"complete\")\n    .format(\"memory\")\n    .queryName(\"aggregated_weather\")\n    .option(\"checkpointLocation\", \"/tmp/zeppelin/checkpoint-table\")\n    .start()","dateUpdated":"2018-04-05T18:26:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntableQuery: org.apache.spark.sql.streaming.StreamingQuery = Streaming Query aggregated_weather [id = e1ec5c3a-a3c5-4968-a682-6a13f49821e8, runId = c4a38782-f9e4-4962-b90f-149744150bde] [state = ACTIVE]\n"}]},"apps":[],"jobName":"paragraph_1522952749197_1642969783","id":"20170109-024536_1643682762","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11578"},{"text":"%sql\nselect * from aggregated_weather","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"country","index":0,"aggr":"sum"}],"values":[{"name":"year","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"country","index":0,"aggr":"sum"},"yAxis":{"name":"year","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"country\tyear\ttemp_min\ttemp_max\twind_min\twind_max\nUK\t2004\t12.2\t12.2\t6.2\t6.2\nPO\t2004\t9.8\t14.0\t1.0\t1.5\nGK\t2004\t11.5\t11.5\t9.8\t9.8\nBE\t2004\t8.6\t11.0\t6.2\t8.0\nUS\t2004\t-12.0\t15.0\t0.0\t5.1\nNO\t2004\t-4.0\t1.0\t2.6\t8.2\nSC\t2004\t26.2\t27.0\t5.7\t5.7\nFI\t2004\t-19.0\t-19.0\t0.5\t0.5\nSW\t2004\t-16.2\t-16.2\t2.0\t2.0\nNL\t2004\t11.0\t12.0\t6.2\t19.0\nCA\t2004\tnull\tnull\tnull\tnull\nFR\t2004\t11.0\t11.0\t3.1\t3.1\nAM\t2004\t11.0\t11.0\t2.0\t2.0\n"}]},"apps":[],"jobName":"paragraph_1522952749198_1644124030","id":"20170109-043226_2033527472","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11579"},{"text":"tableQuery.stop()","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1522952749198_1644124030","id":"20170109-043235_704854873","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11580"},{"text":"","dateUpdated":"2018-04-05T18:25:49+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522952749198_1644124030","id":"20170109-043303_576621974","dateCreated":"2018-04-05T18:25:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:11581"}],"name":"Weather Structured Streaming - Solution","id":"2DCMGA2EE","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}